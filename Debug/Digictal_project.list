
Digictal_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080071b8  080071b8  000171b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007280  08007280  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007280  08007280  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007280  08007280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080072fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080072fc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e951  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  0002e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00030b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e03  00000000  00000000  00031fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e28b  00000000  00000000  00049dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085dbb  00000000  00000000  0005804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dde09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  000dde5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800719c 	.word	0x0800719c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800719c 	.word	0x0800719c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__gesf2>:
 8000d34:	f04f 3cff 	mov.w	ip, #4294967295
 8000d38:	e006      	b.n	8000d48 <__cmpsf2+0x4>
 8000d3a:	bf00      	nop

08000d3c <__lesf2>:
 8000d3c:	f04f 0c01 	mov.w	ip, #1
 8000d40:	e002      	b.n	8000d48 <__cmpsf2+0x4>
 8000d42:	bf00      	nop

08000d44 <__cmpsf2>:
 8000d44:	f04f 0c01 	mov.w	ip, #1
 8000d48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d011      	beq.n	8000d84 <__cmpsf2+0x40>
 8000d60:	b001      	add	sp, #4
 8000d62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d66:	bf18      	it	ne
 8000d68:	ea90 0f01 	teqne	r0, r1
 8000d6c:	bf58      	it	pl
 8000d6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d72:	bf88      	it	hi
 8000d74:	17c8      	asrhi	r0, r1, #31
 8000d76:	bf38      	it	cc
 8000d78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d7c:	bf18      	it	ne
 8000d7e:	f040 0001 	orrne.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	d102      	bne.n	8000d90 <__cmpsf2+0x4c>
 8000d8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8e:	d105      	bne.n	8000d9c <__cmpsf2+0x58>
 8000d90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d94:	d1e4      	bne.n	8000d60 <__cmpsf2+0x1c>
 8000d96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d9a:	d0e1      	beq.n	8000d60 <__cmpsf2+0x1c>
 8000d9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_cfrcmple>:
 8000da4:	4684      	mov	ip, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4661      	mov	r1, ip
 8000daa:	e7ff      	b.n	8000dac <__aeabi_cfcmpeq>

08000dac <__aeabi_cfcmpeq>:
 8000dac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dae:	f7ff ffc9 	bl	8000d44 <__cmpsf2>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	bf48      	it	mi
 8000db6:	f110 0f00 	cmnmi.w	r0, #0
 8000dba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dbc <__aeabi_fcmpeq>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff fff4 	bl	8000dac <__aeabi_cfcmpeq>
 8000dc4:	bf0c      	ite	eq
 8000dc6:	2001      	moveq	r0, #1
 8000dc8:	2000      	movne	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_fcmplt>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffea 	bl	8000dac <__aeabi_cfcmpeq>
 8000dd8:	bf34      	ite	cc
 8000dda:	2001      	movcc	r0, #1
 8000ddc:	2000      	movcs	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_fcmple>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffe0 	bl	8000dac <__aeabi_cfcmpeq>
 8000dec:	bf94      	ite	ls
 8000dee:	2001      	movls	r0, #1
 8000df0:	2000      	movhi	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_fcmpge>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffd2 	bl	8000da4 <__aeabi_cfrcmple>
 8000e00:	bf94      	ite	ls
 8000e02:	2001      	movls	r0, #1
 8000e04:	2000      	movhi	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_fcmpgt>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffc8 	bl	8000da4 <__aeabi_cfrcmple>
 8000e14:	bf34      	ite	cc
 8000e16:	2001      	movcc	r0, #1
 8000e18:	2000      	movcs	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_f2iz>:
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e28:	d30f      	bcc.n	8000e4a <__aeabi_f2iz+0x2a>
 8000e2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e32:	d90d      	bls.n	8000e50 <__aeabi_f2iz+0x30>
 8000e34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e40:	fa23 f002 	lsr.w	r0, r3, r2
 8000e44:	bf18      	it	ne
 8000e46:	4240      	negne	r0, r0
 8000e48:	4770      	bx	lr
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	4770      	bx	lr
 8000e50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e54:	d101      	bne.n	8000e5a <__aeabi_f2iz+0x3a>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d105      	bne.n	8000e66 <__aeabi_f2iz+0x46>
 8000e5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e5e:	bf08      	it	eq
 8000e60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr

08000e6c <HDL_DHT20_init>:
	DONE
} DHT20_state;
DHT20_state state;
DHT20_t dht20;
status_active active ;
void HDL_DHT20_init(){
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	state = INIT_DHT20;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HDL_DHT20_init+0x18>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	active = DHT20_OK;
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HDL_DHT20_init+0x1c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	200000f0 	.word	0x200000f0
 8000e88:	200000f1 	.word	0x200000f1

08000e8c <HDL_DHT20_run>:

void HDL_DHT20_run(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
	switch(state){
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	f200 80d0 	bhi.w	800103c <HDL_DHT20_run+0x1b0>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HDL_DHT20_run+0x18>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ed7 	.word	0x08000ed7
 8000eac:	08000ef3 	.word	0x08000ef3
 8000eb0:	08000f27 	.word	0x08000f27
 8000eb4:	08000f65 	.word	0x08000f65
 8000eb8:	08000fa5 	.word	0x08000fa5
 8000ebc:	08000fc3 	.word	0x08000fc3
	case INIT_DHT20:
		DHT20_Init(&dht20, &hi2c1);
 8000ec0:	4964      	ldr	r1, [pc, #400]	; (8001054 <HDL_DHT20_run+0x1c8>)
 8000ec2:	4865      	ldr	r0, [pc, #404]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000ec4:	f000 f8d2 	bl	800106c <DHT20_Init>
	 	 HAL_Delay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f000 ff2d 	bl	8001d28 <HAL_Delay>
		 state = CHECK_CONNECTION;
 8000ece:	4b60      	ldr	r3, [pc, #384]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
	 	 break;
 8000ed4:	e0b7      	b.n	8001046 <HDL_DHT20_run+0x1ba>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 8000ed6:	4860      	ldr	r0, [pc, #384]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000ed8:	f000 f8ee 	bl	80010b8 <DHT20_IsConnected>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HDL_DHT20_run+0x5e>
			state = CHECK_READY;
 8000ee2:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
		}
		break;
 8000ee8:	e0ad      	b.n	8001046 <HDL_DHT20_run+0x1ba>
			active = DHT20_ERROR_CONNECT;
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	701a      	strb	r2, [r3, #0]
		break;
 8000ef0:	e0a9      	b.n	8001046 <HDL_DHT20_run+0x1ba>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 8000ef2:	4859      	ldr	r0, [pc, #356]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000ef4:	f000 f9d4 	bl	80012a0 <DHT20_ReadStatus>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f003 0318 	and.w	r3, r3, #24
 8000efe:	2b18      	cmp	r3, #24
 8000f00:	d00a      	beq.n	8000f18 <HDL_DHT20_run+0x8c>
			DHT20_ResetSensor(&dht20);
 8000f02:	4855      	ldr	r0, [pc, #340]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000f04:	f000 fa18 	bl	8001338 <DHT20_ResetSensor>
		 	HAL_Delay(1000);
 8000f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0c:	f000 ff0c 	bl	8001d28 <HAL_Delay>
			state = CHECK_CONNECTION;
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
		}
		else {
			HAL_Delay(10);
			state = REQUEST_DATA;
		}
		break;
 8000f16:	e096      	b.n	8001046 <HDL_DHT20_run+0x1ba>
			HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f000 ff05 	bl	8001d28 <HAL_Delay>
			state = REQUEST_DATA;
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	701a      	strb	r2, [r3, #0]
		break;
 8000f24:	e08f      	b.n	8001046 <HDL_DHT20_run+0x1ba>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 8000f26:	f000 fef5 	bl	8001d14 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f36:	d311      	bcc.n	8000f5c <HDL_DHT20_run+0xd0>
			active = DHT20_RequestData(&dht20);
 8000f38:	4847      	ldr	r0, [pc, #284]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000f3a:	f000 f8d9 	bl	80010f0 <DHT20_RequestData>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f44:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 8000f46:	4b45      	ldr	r3, [pc, #276]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d178      	bne.n	8001040 <HDL_DHT20_run+0x1b4>
				HAL_Delay(80);
 8000f4e:	2050      	movs	r0, #80	; 0x50
 8000f50:	f000 feea 	bl	8001d28 <HAL_Delay>
				state = READ_DATA;
 8000f54:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 8000f5a:	e071      	b.n	8001040 <HDL_DHT20_run+0x1b4>
			active = DHT20_ERROR_LASTREAD;
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f5e:	2206      	movs	r2, #6
 8000f60:	701a      	strb	r2, [r3, #0]
		break;
 8000f62:	e06d      	b.n	8001040 <HDL_DHT20_run+0x1b4>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 8000f64:	f000 fed6 	bl	8001d14 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f74:	d212      	bcs.n	8000f9c <HDL_DHT20_run+0x110>
			active = DHT20_ReadData(&dht20);
 8000f76:	4838      	ldr	r0, [pc, #224]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000f78:	f000 f8e4 	bl	8001144 <DHT20_ReadData>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b36      	ldr	r3, [pc, #216]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f82:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <HDL_DHT20_run+0x108>
				state = CONVERT_DATA;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 8000f92:	e058      	b.n	8001046 <HDL_DHT20_run+0x1ba>
				state = REQUEST_DATA;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
		break;
 8000f9a:	e054      	b.n	8001046 <HDL_DHT20_run+0x1ba>
			active = DHT20_ERROR_READ_TIMEOUT;
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	701a      	strb	r2, [r3, #0]
		break;
 8000fa2:	e050      	b.n	8001046 <HDL_DHT20_run+0x1ba>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 8000fa4:	482c      	ldr	r0, [pc, #176]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000fa6:	f000 f90b 	bl	80011c0 <DHT20_Convert>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HDL_DHT20_run+0x1d0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d144      	bne.n	8001044 <HDL_DHT20_run+0x1b8>
			state = DONE;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8000fbc:	2206      	movs	r2, #6
 8000fbe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fc0:	e040      	b.n	8001044 <HDL_DHT20_run+0x1b8>
	{
	    char temp_str[6];      // Chuỗi để lưu giá trị nhiệt độ
	    char humidity_str[6];  // Chuỗi để lưu giá trị độ ẩm

	    // Chuyển đổi giá trị float thành chuỗi
	    float_to_str(dht20.temperature, temp_str, 2);
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f107 0108 	add.w	r1, r7, #8
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fb3d 	bl	800164c <float_to_str>
	    float_to_str(dht20.humidity, humidity_str, 2);
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HDL_DHT20_run+0x1cc>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4639      	mov	r1, r7
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fb36 	bl	800164c <float_to_str>
	    // Hiển thị giá trị lên màn hình LCD
	    lcd_goto_XY(1, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 fad7 	bl	8001596 <lcd_goto_XY>
        lcd_send_string("HUM:");
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <HDL_DHT20_run+0x1d4>)
 8000fea:	f000 fabf 	bl	800156c <lcd_send_string>
	    lcd_goto_XY(1, 4);
 8000fee:	2104      	movs	r1, #4
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fad0 	bl	8001596 <lcd_goto_XY>
	    lcd_send_string(humidity_str);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fab7 	bl	800156c <lcd_send_string>

	    HAL_Delay(50);
 8000ffe:	2032      	movs	r0, #50	; 0x32
 8001000:	f000 fe92 	bl	8001d28 <HAL_Delay>

	    lcd_goto_XY(2, 0);
 8001004:	2100      	movs	r1, #0
 8001006:	2002      	movs	r0, #2
 8001008:	f000 fac5 	bl	8001596 <lcd_goto_XY>
	    lcd_send_string("TEMP:");
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <HDL_DHT20_run+0x1d8>)
 800100e:	f000 faad 	bl	800156c <lcd_send_string>
	    lcd_goto_XY(2, 5);
 8001012:	2105      	movs	r1, #5
 8001014:	2002      	movs	r0, #2
 8001016:	f000 fabe 	bl	8001596 <lcd_goto_XY>
	    lcd_send_string(temp_str);
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f000 faa4 	bl	800156c <lcd_send_string>

		HAL_Delay(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f000 fe7e 	bl	8001d28 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 800102c:	2102      	movs	r1, #2
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <HDL_DHT20_run+0x1dc>)
 8001030:	f001 f9ce 	bl	80023d0 <HAL_GPIO_TogglePin>
		state = CHECK_READY;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HDL_DHT20_run+0x1c4>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
		break;
 800103a:	e004      	b.n	8001046 <HDL_DHT20_run+0x1ba>
	}
	default :
		break;
 800103c:	bf00      	nop
 800103e:	e002      	b.n	8001046 <HDL_DHT20_run+0x1ba>
		break;
 8001040:	bf00      	nop
 8001042:	e000      	b.n	8001046 <HDL_DHT20_run+0x1ba>
		break;
 8001044:	bf00      	nop
	}

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000f0 	.word	0x200000f0
 8001054:	2000009c 	.word	0x2000009c
 8001058:	200000f4 	.word	0x200000f4
 800105c:	200000f1 	.word	0x200000f1
 8001060:	080071b8 	.word	0x080071b8
 8001064:	080071c0 	.word	0x080071c0
 8001068:	40010800 	.word	0x40010800

0800106c <DHT20_Init>:
#include <dht20.h>

#include "i2c_master.h"
#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <DHT20_IsConnected>:

uint8_t DHT20_Begin(DHT20_t *dht20) {
    return DHT20_IsConnected(dht20);
}

uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
    uint8_t dummy = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &dummy, 1, HAL_MAX_DELAY) == HAL_OK) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	f107 020f 	add.w	r2, r7, #15
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2170      	movs	r1, #112	; 0x70
 80010d6:	f001 fb0f 	bl	80026f8 <HAL_I2C_Master_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <DHT20_IsConnected+0x2c>
        return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <DHT20_IsConnected+0x2e>
    }
    return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <DHT20_RequestData+0x50>)
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4611      	mov	r1, r2
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	3302      	adds	r3, #2
 8001106:	0c12      	lsrs	r2, r2, #16
 8001108:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2303      	movs	r3, #3
 800111a:	2170      	movs	r1, #112	; 0x70
 800111c:	f001 faec 	bl	80026f8 <HAL_I2C_Master_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8001126:	2302      	movs	r3, #2
 8001128:	e005      	b.n	8001136 <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 800112a:	f000 fdf3 	bl	8001d14 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	080071c8 	.word	0x080071c8

08001144 <DHT20_ReadData>:

uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 800114c:	2307      	movs	r3, #7
 800114e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f103 0220 	add.w	r2, r3, #32
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f04f 31ff 	mov.w	r1, #4294967295
 8001162:	9100      	str	r1, [sp, #0]
 8001164:	2170      	movs	r1, #112	; 0x70
 8001166:	f001 fbc5 	bl	80028f4 <HAL_I2C_Master_Receive>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8001170:	2302      	movs	r3, #2
 8001172:	e020      	b.n	80011b6 <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	e00c      	b.n	8001198 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4413      	add	r3, r2
 8001184:	3320      	adds	r3, #32
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <DHT20_ReadData+0x4e>
            allZero = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	75fb      	strb	r3, [r7, #23]
            break;
 8001190:	e006      	b.n	80011a0 <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbee      	blt.n	800117e <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <DHT20_ReadData+0x66>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e005      	b.n	80011b6 <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 80011aa:	f000 fdb3 	bl	8001d14 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <DHT20_Convert>:

uint8_t DHT20_Convert(DHT20_t *dht20) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = (dht20->bytes[1] << 12) | (dht20->bytes[2] << 4) | (dht20->bytes[3] >> 4);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d8:	031a      	lsls	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4313      	orrs	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80011ea:	0912      	lsrs	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
    dht20->humidity = rawHumidity * 9.5367431640625e-5; // Chuyển đổi theo công thức datasheet
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff f8ee 	bl	80003d4 <__aeabi_ui2d>
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <DHT20_Convert+0xd4>)
 80011fe:	f7ff f963 	bl	80004c8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc35 	bl	8000a78 <__aeabi_d2f>
 800120e:	4602      	mov	r2, r0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((dht20->bytes[3] & 0x0F) << 16) | (dht20->bytes[4] << 8) | dht20->bytes[5];
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	4313      	orrs	r3, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    dht20->temperature = rawTemperature * 1.9073486328125e-4 - 50; // Chuyển đổi theo công thức datasheet
 8001234:	6938      	ldr	r0, [r7, #16]
 8001236:	f7ff f8cd 	bl	80003d4 <__aeabi_ui2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <DHT20_Convert+0xd8>)
 8001240:	f7ff f942 	bl	80004c8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <DHT20_Convert+0xdc>)
 8001252:	f7fe ff81 	bl	8000158 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc0b 	bl	8000a78 <__aeabi_d2f>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3320      	adds	r3, #32
 800126c:	2106      	movs	r1, #6
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82f 	bl	80012d2 <DHT20_CRC8>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <DHT20_Convert+0xc8>
        return DHT20_ERROR_CHECKSUM;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <DHT20_Convert+0xca>
    }

    return DHT20_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	3f190000 	.word	0x3f190000
 8001298:	3f290000 	.word	0x3f290000
 800129c:	40490000 	.word	0x40490000

080012a0 <DHT20_ReadStatus>:

float DHT20_GetTemperature(DHT20_t *dht20) {
    return dht20->temperature + dht20->tempOffset;
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f107 020f 	add.w	r2, r7, #15
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2170      	movs	r1, #112	; 0x70
 80012be:	f001 fb19 	bl	80028f4 <HAL_I2C_Master_Receive>
    HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fd30 	bl	8001d28 <HAL_Delay>
    return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 80012e2:	e01e      	b.n	8001322 <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4053      	eors	r3, r2
 80012f0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	e011      	b.n	800131c <DHT20_CRC8+0x4a>
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da07      	bge.n	8001310 <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b25b      	sxtb	r3, r3
 8001306:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800130a:	b25b      	sxtb	r3, r3
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e002      	b.n	8001316 <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	3301      	adds	r3, #1
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	2b07      	cmp	r3, #7
 8001320:	d9ea      	bls.n	80012f8 <DHT20_CRC8+0x26>
    while (len--) {
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	70fa      	strb	r2, [r7, #3]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1db      	bne.n	80012e4 <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffab 	bl	80012a0 <DHT20_ReadStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	f003 0318 	and.w	r3, r3, #24
 8001350:	2b18      	cmp	r3, #24
 8001352:	d023      	beq.n	800139c <DHT20_ResetSensor+0x64>
    count++;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 800135a:	211b      	movs	r1, #27
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f823 	bl	80013a8 <DHT20_ResetRegister>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <DHT20_ResetSensor+0x36>
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 800136e:	211c      	movs	r1, #28
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f819 	bl	80013a8 <DHT20_ResetRegister>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <DHT20_ResetSensor+0x4a>
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3301      	adds	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8001382:	211e      	movs	r1, #30
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f80f 	bl	80013a8 <DHT20_ResetRegister>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <DHT20_ResetSensor+0x5e>
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	3301      	adds	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001396:	200a      	movs	r0, #10
 8001398:	f000 fcc6 	bl	8001d28 <HAL_Delay>
}

return count;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <DHT20_ResetRegister+0xa4>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	81bb      	strh	r3, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	1cfa      	adds	r2, r7, #3
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	2170      	movs	r1, #112	; 0x70
 80013ce:	f001 f993 	bl	80026f8 <HAL_I2C_Master_Transmit>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <DHT20_ResetRegister+0x34>
    return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e032      	b.n	8001442 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f000 fca3 	bl	8001d28 <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2303      	movs	r3, #3
 80013f2:	2170      	movs	r1, #112	; 0x70
 80013f4:	f001 fa7e 	bl	80028f4 <HAL_I2C_Master_Receive>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <DHT20_ResetRegister+0x5a>
    return 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	e01f      	b.n	8001442 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8001402:	200a      	movs	r0, #10
 8001404:	f000 fc90 	bl	8001d28 <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800140e:	b2db      	uxtb	r3, r3
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	727b      	strb	r3, [r7, #9]
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f107 0208 	add.w	r2, r7, #8
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2303      	movs	r3, #3
 800142a:	2170      	movs	r1, #112	; 0x70
 800142c:	f001 f964 	bl	80026f8 <HAL_I2C_Master_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <DHT20_ResetRegister+0x92>
    return 0;
 8001436:	2300      	movs	r3, #0
 8001438:	e003      	b.n	8001442 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 800143a:	2005      	movs	r0, #5
 800143c:	f000 fc74 	bl	8001d28 <HAL_Delay>

return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	080071cc 	.word	0x080071cc

08001450 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f023 030f 	bic.w	r3, r3, #15
 8001460:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f043 030c 	orr.w	r3, r3, #12
 800146e:	b2db      	uxtb	r3, r3
 8001470:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	b2db      	uxtb	r3, r3
 800147a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	f043 030c 	orr.w	r3, r3, #12
 8001482:	b2db      	uxtb	r3, r3
 8001484:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	b2db      	uxtb	r3, r3
 800148e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2304      	movs	r3, #4
 800149a:	2142      	movs	r1, #66	; 0x42
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <lcd_send_cmd+0x5c>)
 800149e:	f001 f92b 	bl	80026f8 <HAL_I2C_Master_Transmit>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000009c 	.word	0x2000009c

080014b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f043 030d 	orr.w	r3, r3, #13
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0309 	orr.w	r3, r3, #9
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	f043 030d 	orr.w	r3, r3, #13
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	f043 0309 	orr.w	r3, r3, #9
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2304      	movs	r3, #4
 80014fa:	2142      	movs	r1, #66	; 0x42
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <lcd_send_data+0x5c>)
 80014fe:	f001 f8fb 	bl	80026f8 <HAL_I2C_Master_Transmit>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000009c 	.word	0x2000009c

08001510 <lcd_init>:

void lcd_init (void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001514:	2033      	movs	r0, #51	; 0x33
 8001516:	f7ff ff9b 	bl	8001450 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f7ff ff98 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 8001520:	2032      	movs	r0, #50	; 0x32
 8001522:	f000 fc01 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001526:	2028      	movs	r0, #40	; 0x28
 8001528:	f7ff ff92 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 800152c:	2032      	movs	r0, #50	; 0x32
 800152e:	f000 fbfb 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff ff8c 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 8001538:	2032      	movs	r0, #50	; 0x32
 800153a:	f000 fbf5 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800153e:	2006      	movs	r0, #6
 8001540:	f7ff ff86 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 8001544:	2032      	movs	r0, #50	; 0x32
 8001546:	f000 fbef 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800154a:	200c      	movs	r0, #12
 800154c:	f7ff ff80 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 8001550:	2032      	movs	r0, #50	; 0x32
 8001552:	f000 fbe9 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001556:	2002      	movs	r0, #2
 8001558:	f7ff ff7a 	bl	8001450 <lcd_send_cmd>
	HAL_Delay(50);
 800155c:	2032      	movs	r0, #50	; 0x32
 800155e:	f000 fbe3 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001562:	2080      	movs	r0, #128	; 0x80
 8001564:	f7ff ff74 	bl	8001450 <lcd_send_cmd>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001574:	e006      	b.n	8001584 <lcd_send_string+0x18>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff96 	bl	80014b0 <lcd_send_data>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f4      	bne.n	8001576 <lcd_send_string+0xa>
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	337f      	adds	r3, #127	; 0x7f
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e008      	b.n	80015ca <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3340      	adds	r3, #64	; 0x40
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff3f 	bl	8001450 <lcd_send_cmd>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_I2C_ListenCpltCallback>:

	#include "i2c_slave.h"

	#define RxSize 6
	uint8_t Rxdata[RxSize];
	void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fc64 	bl	8002eb0 <HAL_I2C_EnableListen_IT>
	}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_I2C_AddrCallback>:
	void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT){
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d106      	bne.n	8001614 <HAL_I2C_AddrCallback+0x24>
			HAL_I2C_Slave_Seq_Receive_IT( hi2c, Rxdata, RxSize,I2C_FIRST_AND_LAST_FRAME);
 8001606:	2308      	movs	r3, #8
 8001608:	2206      	movs	r2, #6
 800160a:	4905      	ldr	r1, [pc, #20]	; (8001620 <HAL_I2C_AddrCallback+0x30>)
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 fbdd 	bl	8002dcc <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else{
			Error_Handler();
		}
	}
 8001612:	e001      	b.n	8001618 <HAL_I2C_AddrCallback+0x28>
			Error_Handler();
 8001614:	f000 f9aa 	bl	800196c <Error_Handler>
	}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000011c 	.word	0x2000011c

08001624 <HAL_I2C_SlaveRxCpltCallback>:
	void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

	}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_I2C_ErrorCallback>:
	void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f001 fc36 	bl	8002eb0 <HAL_I2C_EnableListen_IT>
	}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <float_to_str>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void float_to_str(float num, char *str, int decimal) {
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
    int int_part = (int)num;
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fbe1 	bl	8000e20 <__aeabi_f2iz>
 800165e:	4603      	mov	r3, r0
 8001660:	61fb      	str	r3, [r7, #28]
    float fraction = num - (float)int_part;
 8001662:	69f8      	ldr	r0, [r7, #28]
 8001664:	f7ff fb12 	bl	8000c8c <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fa57 	bl	8000b20 <__aeabi_fsub>
 8001672:	4603      	mov	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]

    // Xử lý số âm
    if (num < 0) {
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff fba8 	bl	8000dd0 <__aeabi_fcmplt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <float_to_str+0x52>
        int_part = -int_part;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	425b      	negs	r3, r3
 800168a:	61fb      	str	r3, [r7, #28]
        fraction = -fraction;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001692:	61bb      	str	r3, [r7, #24]
        *str++ = '-';
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	222d      	movs	r2, #45	; 0x2d
 800169c:	701a      	strb	r2, [r3, #0]
    }

    // Chuyển đổi phần nguyên
    sprintf(str, "%d.", int_part);
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4921      	ldr	r1, [pc, #132]	; (8001728 <float_to_str+0xdc>)
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f004 f9b0 	bl	8005a08 <siprintf>
    // Tìm vị trí dấu chấm
    while (*str != '.' && *str != '\0') str++;
 80016a8:	e002      	b.n	80016b0 <float_to_str+0x64>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b2e      	cmp	r3, #46	; 0x2e
 80016b6:	d003      	beq.n	80016c0 <float_to_str+0x74>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f4      	bne.n	80016aa <float_to_str+0x5e>
    str++; // B�? qua dấu chấm
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]

    // Chuyển đổi phần thập phân
    int frac_part = (int)(fraction * pow(10, decimal) + 0.5); // Làm tròn
 80016c6:	69b8      	ldr	r0, [r7, #24]
 80016c8:	f7fe fea6 	bl	8000418 <__aeabi_f2d>
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7fe fe8f 	bl	80003f4 <__aeabi_i2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	4913      	ldr	r1, [pc, #76]	; (800172c <float_to_str+0xe0>)
 80016e0:	f004 fdcc 	bl	800627c <pow>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe feec 	bl	80004c8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <float_to_str+0xe4>)
 80016fe:	f7fe fd2d 	bl	800015c <__adddf3>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f98d 	bl	8000a28 <__aeabi_d2iz>
 800170e:	4603      	mov	r3, r0
 8001710:	617b      	str	r3, [r7, #20]
    sprintf(str, "%0*d", decimal, frac_part);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4907      	ldr	r1, [pc, #28]	; (8001734 <float_to_str+0xe8>)
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f004 f975 	bl	8005a08 <siprintf>
}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
 8001726:	bf00      	nop
 8001728:	080071d0 	.word	0x080071d0
 800172c:	40240000 	.word	0x40240000
 8001730:	3fe00000 	.word	0x3fe00000
 8001734:	080071d4 	.word	0x080071d4

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f000 fa92 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f811 	bl	8001766 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f000 f8a4 	bl	8001890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001748:	f000 f878 	bl	800183c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800174c:	f000 f848 	bl	80017e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//extern status_active active;
  HDL_DHT20_init();
 8001750:	f7ff fb8c 	bl	8000e6c <HDL_DHT20_init>
  HAL_Delay(1000);
 8001754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001758:	f000 fae6 	bl	8001d28 <HAL_Delay>
  lcd_init();
 800175c:	f7ff fed8 	bl	8001510 <lcd_init>
	/*
	 if(active != DHT20_OK){
		 Error_Handler();
	 }
	 */
	 HDL_DHT20_run();
 8001760:	f7ff fb94 	bl	8000e8c <HDL_DHT20_run>
 8001764:	e7fc      	b.n	8001760 <main+0x28>

08001766 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b090      	sub	sp, #64	; 0x40
 800176a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	2228      	movs	r2, #40	; 0x28
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f004 f93f 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	2310      	movs	r3, #16
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fc15 	bl	8004fcc <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017a8:	f000 f8e0 	bl	800196c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fe80 	bl	80054cc <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80017d2:	f000 f8cb 	bl	800196c <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_I2C1_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MX_I2C1_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_I2C1_Init+0x50>)
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_I2C1_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_I2C1_Init+0x50>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_I2C1_Init+0x50>)
 800181e:	f000 fe13 	bl	8002448 <HAL_I2C_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001828:	f000 f8a0 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000009c 	.word	0x2000009c
 8001834:	40005400 	.word	0x40005400
 8001838:	000186a0 	.word	0x000186a0

0800183c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f003 ffb8 	bl	80057e8 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f875 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000124 	.word	0x20000124
 800188c:	40004400 	.word	0x40004400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <MX_GPIO_Init+0xcc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a2c      	ldr	r2, [pc, #176]	; (800195c <MX_GPIO_Init+0xcc>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <MX_GPIO_Init+0xcc>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_GPIO_Init+0xcc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <MX_GPIO_Init+0xcc>)
 80018c2:	f043 0320 	orr.w	r3, r3, #32
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_GPIO_Init+0xcc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_GPIO_Init+0xcc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <MX_GPIO_Init+0xcc>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_GPIO_Init+0xcc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_GPIO_Init+0xcc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <MX_GPIO_Init+0xcc>)
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_GPIO_Init+0xcc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2122      	movs	r1, #34	; 0x22
 8001908:	4815      	ldr	r0, [pc, #84]	; (8001960 <MX_GPIO_Init+0xd0>)
 800190a:	f000 fd49 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800190e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_GPIO_Init+0xd4>)
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_GPIO_Init+0xd8>)
 8001924:	f000 fbb8 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD2_Pin;
 8001928:	2322      	movs	r3, #34	; 0x22
 800192a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2302      	movs	r3, #2
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	4808      	ldr	r0, [pc, #32]	; (8001960 <MX_GPIO_Init+0xd0>)
 8001940:	f000 fbaa 	bl	8002098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2028      	movs	r0, #40	; 0x28
 800194a:	f000 fae8 	bl	8001f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800194e:	2028      	movs	r0, #40	; 0x28
 8001950:	f000 fb01 	bl	8001f56 <HAL_NVIC_EnableIRQ>

}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	40010800 	.word	0x40010800
 8001964:	10110000 	.word	0x10110000
 8001968:	40011000 	.word	0x40011000

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_MspInit+0x5c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_MspInit+0x5c>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_MspInit+0x5c>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_MspInit+0x5c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_MspInit+0x5c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_MspInit+0x5c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_MspInit+0x60>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_MspInit+0x60>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_I2C_MspInit+0xb0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d142      	bne.n	8001a82 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1a:	2312      	movs	r3, #18
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <HAL_I2C_MspInit+0xb8>)
 8001a2a:	f000 fb35 	bl	8002098 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_I2C_MspInit+0xbc>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_I2C_MspInit+0xbc>)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201f      	movs	r0, #31
 8001a68:	f000 fa59 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a6c:	201f      	movs	r0, #31
 8001a6e:	f000 fa72 	bl	8001f56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2020      	movs	r0, #32
 8001a78:	f000 fa51 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a7c:	2020      	movs	r0, #32
 8001a7e:	f000 fa6a 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x70>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d123      	bne.n	8001b04 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac6:	61d3      	str	r3, [r2, #28]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_UART_MspInit+0x74>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aec:	230c      	movs	r3, #12
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_UART_MspInit+0x78>)
 8001b00:	f000 faca 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40004400 	.word	0x40004400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010800 	.word	0x40010800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f000 f8c7 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <I2C1_EV_IRQHandler+0x10>)
 8001b6e:	f001 f9d4 	bl	8002f1a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000009c 	.word	0x2000009c

08001b7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <I2C1_ER_IRQHandler+0x10>)
 8001b82:	f001 fb3b 	bl	80031fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000009c 	.word	0x2000009c

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b98:	f000 fc34 	bl	8002404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f003 fee8 	bl	80059a4 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20005000 	.word	0x20005000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000090 	.word	0x20000090
 8001c08:	20000180 	.word	0x20000180

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c18:	f7ff fff8 	bl	8001c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c1e:	490c      	ldr	r1, [pc, #48]	; (8001c50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c34:	4c09      	ldr	r4, [pc, #36]	; (8001c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c42:	f003 feb5 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fd77 	bl	8001738 <main>
  bx lr
 8001c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c54:	08007288 	.word	0x08007288
  ldr r2, =_sbss
 8001c58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c5c:	20000180 	.word	0x20000180

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x28>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x28>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f947 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fe7a 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f95f 	bl	8001f72 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 f927 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x1c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x20>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_IncTick+0x20>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	2000016c 	.word	0x2000016c

08001d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_GetTick+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	2000016c 	.word	0x2000016c

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Delay+0x44>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffe0 	bl	8001d14 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4906      	ldr	r1, [pc, #24]	; (8001e08 <__NVIC_EnableIRQ+0x34>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff90 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff2d 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff42 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff90 	bl	8001e60 <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5f 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff35 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d005      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e051      	b.n	8002054 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020e 	bic.w	r2, r2, #14
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_DMA_Abort_IT+0xd4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d029      	beq.n	800202e <HAL_DMA_Abort_IT+0xa2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_DMA_Abort_IT+0xd8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <HAL_DMA_Abort_IT+0x9e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_DMA_Abort_IT+0xdc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01a      	beq.n	8002024 <HAL_DMA_Abort_IT+0x98>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_DMA_Abort_IT+0xe0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d012      	beq.n	800201e <HAL_DMA_Abort_IT+0x92>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_DMA_Abort_IT+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00a      	beq.n	8002018 <HAL_DMA_Abort_IT+0x8c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_DMA_Abort_IT+0xe8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d102      	bne.n	8002012 <HAL_DMA_Abort_IT+0x86>
 800200c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002010:	e00e      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 8002012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002016:	e00b      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 8002018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201c:	e008      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	e005      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	e002      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 800202a:	2310      	movs	r3, #16
 800202c:	e000      	b.n	8002030 <HAL_DMA_Abort_IT+0xa4>
 800202e:	2301      	movs	r3, #1
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_DMA_Abort_IT+0xec>)
 8002032:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
    } 
  }
  return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020008 	.word	0x40020008
 8002064:	4002001c 	.word	0x4002001c
 8002068:	40020030 	.word	0x40020030
 800206c:	40020044 	.word	0x40020044
 8002070:	40020058 	.word	0x40020058
 8002074:	4002006c 	.word	0x4002006c
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800208a:	b2db      	uxtb	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e169      	b.n	8002380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ac:	2201      	movs	r2, #1
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8158 	bne.w	800237a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a9a      	ldr	r2, [pc, #616]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d05e      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020d4:	4a98      	ldr	r2, [pc, #608]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d875      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020da:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d058      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020e0:	4a96      	ldr	r2, [pc, #600]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d86f      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020e6:	4a96      	ldr	r2, [pc, #600]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d052      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020ec:	4a94      	ldr	r2, [pc, #592]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d869      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020f2:	4a94      	ldr	r2, [pc, #592]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04c      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020f8:	4a92      	ldr	r2, [pc, #584]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d863      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020fe:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d046      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 8002104:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d85d      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 800210a:	2b12      	cmp	r3, #18
 800210c:	d82a      	bhi.n	8002164 <HAL_GPIO_Init+0xcc>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d859      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_GPIO_Init+0x80>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002193 	.word	0x08002193
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800217f 	.word	0x0800217f
 8002124:	080021c1 	.word	0x080021c1
 8002128:	080021c7 	.word	0x080021c7
 800212c:	080021c7 	.word	0x080021c7
 8002130:	080021c7 	.word	0x080021c7
 8002134:	080021c7 	.word	0x080021c7
 8002138:	080021c7 	.word	0x080021c7
 800213c:	080021c7 	.word	0x080021c7
 8002140:	080021c7 	.word	0x080021c7
 8002144:	080021c7 	.word	0x080021c7
 8002148:	080021c7 	.word	0x080021c7
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021c7 	.word	0x080021c7
 8002154:	080021c7 	.word	0x080021c7
 8002158:	080021c7 	.word	0x080021c7
 800215c:	08002175 	.word	0x08002175
 8002160:	08002189 	.word	0x08002189
 8002164:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_GPIO_Init+0x2b4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216a:	e02c      	b.n	80021c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e029      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	3304      	adds	r3, #4
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e024      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	3308      	adds	r3, #8
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e01f      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	330c      	adds	r3, #12
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e01a      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219a:	2304      	movs	r3, #4
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e013      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	611a      	str	r2, [r3, #16]
          break;
 80021b2:	e009      	b.n	80021c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	615a      	str	r2, [r3, #20]
          break;
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          break;
 80021c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d801      	bhi.n	80021d2 <HAL_GPIO_Init+0x13a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_Init+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d802      	bhi.n	80021e4 <HAL_GPIO_Init+0x14c>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x152>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3b08      	subs	r3, #8
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	210f      	movs	r1, #15
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80b1 	beq.w	800237a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_GPIO_Init+0x2c0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x1ec>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_GPIO_Init+0x2c4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x1e8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_GPIO_Init+0x2c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x2cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x1e0>
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002278:	2304      	movs	r3, #4
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002284:	2300      	movs	r3, #0
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002296:	492f      	ldr	r1, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4922      	ldr	r1, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4918      	ldr	r1, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4914      	ldr	r1, [pc, #80]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d021      	beq.n	800236c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e021      	b.n	800237a <HAL_GPIO_Init+0x2e2>
 8002336:	bf00      	nop
 8002338:	10320000 	.word	0x10320000
 800233c:	10310000 	.word	0x10310000
 8002340:	10220000 	.word	0x10220000
 8002344:	10210000 	.word	0x10210000
 8002348:	10120000 	.word	0x10120000
 800234c:	10110000 	.word	0x10110000
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000
 8002358:	40010800 	.word	0x40010800
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_GPIO_Init+0x304>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4909      	ldr	r1, [pc, #36]	; (800239c <HAL_GPIO_Init+0x304>)
 8002376:	4013      	ands	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f ae8e 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	372c      	adds	r7, #44	; 0x2c
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43d9      	mvns	r1, r3
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	400b      	ands	r3, r1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	611a      	str	r2, [r3, #16]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
	...

08002404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f806 	bl	8002434 <HAL_GPIO_EXTI_Callback>
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e12b      	b.n	80026b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fab4 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ac:	f003 f956 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 80024b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a81      	ldr	r2, [pc, #516]	; (80026bc <HAL_I2C_Init+0x274>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d807      	bhi.n	80024cc <HAL_I2C_Init+0x84>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a80      	ldr	r2, [pc, #512]	; (80026c0 <HAL_I2C_Init+0x278>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e006      	b.n	80024da <HAL_I2C_Init+0x92>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a7d      	ldr	r2, [pc, #500]	; (80026c4 <HAL_I2C_Init+0x27c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0e7      	b.n	80026b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <HAL_I2C_Init+0x280>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a6a      	ldr	r2, [pc, #424]	; (80026bc <HAL_I2C_Init+0x274>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d802      	bhi.n	800251c <HAL_I2C_Init+0xd4>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	e009      	b.n	8002530 <HAL_I2C_Init+0xe8>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a69      	ldr	r2, [pc, #420]	; (80026cc <HAL_I2C_Init+0x284>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	3301      	adds	r3, #1
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	430b      	orrs	r3, r1
 8002536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	495c      	ldr	r1, [pc, #368]	; (80026bc <HAL_I2C_Init+0x274>)
 800254c:	428b      	cmp	r3, r1
 800254e:	d819      	bhi.n	8002584 <HAL_I2C_Init+0x13c>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e59      	subs	r1, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fbb1 f3f3 	udiv	r3, r1, r3
 800255e:	1c59      	adds	r1, r3, #1
 8002560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002564:	400b      	ands	r3, r1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_I2C_Init+0x138>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e59      	subs	r1, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fbb1 f3f3 	udiv	r3, r1, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257e:	e051      	b.n	8002624 <HAL_I2C_Init+0x1dc>
 8002580:	2304      	movs	r3, #4
 8002582:	e04f      	b.n	8002624 <HAL_I2C_Init+0x1dc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <HAL_I2C_Init+0x168>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e58      	subs	r0, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	440b      	add	r3, r1
 800259a:	fbb0 f3f3 	udiv	r3, r0, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e012      	b.n	80025d6 <HAL_I2C_Init+0x18e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	0099      	lsls	r1, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Init+0x196>
 80025da:	2301      	movs	r3, #1
 80025dc:	e022      	b.n	8002624 <HAL_I2C_Init+0x1dc>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10e      	bne.n	8002604 <HAL_I2C_Init+0x1bc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e58      	subs	r0, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	440b      	add	r3, r1
 80025f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002602:	e00f      	b.n	8002624 <HAL_I2C_Init+0x1dc>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e58      	subs	r0, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	0099      	lsls	r1, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	6809      	ldr	r1, [r1, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6911      	ldr	r1, [r2, #16]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68d2      	ldr	r2, [r2, #12]
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	000186a0 	.word	0x000186a0
 80026c0:	001e847f 	.word	0x001e847f
 80026c4:	003d08ff 	.word	0x003d08ff
 80026c8:	431bde83 	.word	0x431bde83
 80026cc:	10624dd3 	.word	0x10624dd3

080026d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d103      	bne.n	80026ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	460b      	mov	r3, r1
 8002706:	817b      	strh	r3, [r7, #10]
 8002708:	4613      	mov	r3, r2
 800270a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff fb02 	bl	8001d14 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 80e0 	bne.w	80028e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4970      	ldr	r1, [pc, #448]	; (80028ec <HAL_I2C_Master_Transmit+0x1f4>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f002 f9cc 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e0d3      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_Master_Transmit+0x50>
 8002744:	2302      	movs	r3, #2
 8002746:	e0cc      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2221      	movs	r2, #33	; 0x21
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2210      	movs	r2, #16
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	893a      	ldrh	r2, [r7, #8]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f001 ff8e 	bl	80046d8 <I2C_MasterRequestWrite>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08d      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027dc:	e066      	b.n	80028ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f002 fa8a 	bl	8004cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b04      	cmp	r3, #4
 8002846:	d11b      	bne.n	8002880 <HAL_I2C_Master_Transmit+0x188>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d017      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f002 fa81 	bl	8004d8c <I2C_WaitOnBTFFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01a      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d194      	bne.n	80027de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	00100002 	.word	0x00100002
 80028f0:	ffff0000 	.word	0xffff0000

080028f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	460b      	mov	r3, r1
 8002902:	817b      	strh	r3, [r7, #10]
 8002904:	4613      	mov	r3, r2
 8002906:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff fa02 	bl	8001d14 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 824b 	bne.w	8002db6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	497f      	ldr	r1, [pc, #508]	; (8002b28 <HAL_I2C_Master_Receive+0x234>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f002 f8cc 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e23e      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2C_Master_Receive+0x54>
 8002944:	2302      	movs	r3, #2
 8002946:	e237      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d007      	beq.n	800296e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2222      	movs	r2, #34	; 0x22
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2210      	movs	r2, #16
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	893a      	ldrh	r2, [r7, #8]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_I2C_Master_Receive+0x238>)
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029b0:	8979      	ldrh	r1, [r7, #10]
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f001 ff10 	bl	80047dc <I2C_MasterRequestRead>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1f8      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e1cc      	b.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d11e      	bne.n	8002a3c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0e:	b672      	cpsid	i
}
 8002a10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a38:	b662      	cpsie	i
}
 8002a3a:	e035      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d11e      	bne.n	8002a82 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
}
 8002a56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i
}
 8002a80:	e012      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002aa8:	e172      	b.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	f200 811f 	bhi.w	8002cf2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d123      	bne.n	8002b04 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f002 f9dd 	bl	8004e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e173      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b02:	e145      	b.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d152      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_I2C_Master_Receive+0x23c>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f001 ffd6 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e148      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
 8002b26:	bf00      	nop
 8002b28:	00100002 	.word	0x00100002
 8002b2c:	ffff0000 	.word	0xffff0000
 8002b30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b7a:	b662      	cpsie	i
}
 8002b7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb0:	e0ee      	b.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4981      	ldr	r1, [pc, #516]	; (8002dc0 <HAL_I2C_Master_Receive+0x4cc>)
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f001 ff83 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0f5      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c12:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_I2C_Master_Receive+0x4d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <HAL_I2C_Master_Receive+0x4d4>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0a1a      	lsrs	r2, r3, #8
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d118      	bne.n	8002c6a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c5a:	b662      	cpsie	i
}
 8002c5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0a6      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d1d9      	bne.n	8002c2c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cba:	b662      	cpsie	i
}
 8002cbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cf0:	e04e      	b.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f002 f8c2 	bl	8004e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e058      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d124      	bne.n	8002d90 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f ae88 	bne.w	8002aaa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010004 	.word	0x00010004
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	14f8b589 	.word	0x14f8b589

08002dcc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002de8:	2b28      	cmp	r3, #40	; 0x28
 8002dea:	d15b      	bne.n	8002ea4 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e054      	b.n	8002ea6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e04d      	b.n	8002ea6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d007      	beq.n	8002e30 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	222a      	movs	r2, #42	; 0x2a
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e9e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d124      	bne.n	8002f0e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2228      	movs	r2, #40	; 0x28
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d007      	beq.n	8002eea <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f08:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b088      	sub	sp, #32
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f42:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d003      	beq.n	8002f52 <HAL_I2C_EV_IRQHandler+0x38>
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	f040 80c1 	bne.w	80030d4 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f72:	d003      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x62>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_EV_IRQHandler+0x66>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_I2C_EV_IRQHandler+0x68>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	f000 8132 	beq.w	80031ec <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_I2C_EV_IRQHandler+0x92>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 fff9 	bl	8004f96 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fd71 	bl	8003a8c <I2C_Master_SB>
 8002faa:	e092      	b.n	80030d2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	08db      	lsrs	r3, r3, #3
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_I2C_EV_IRQHandler+0xb2>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fde6 	bl	8003b96 <I2C_Master_ADD10>
 8002fca:	e082      	b.n	80030d2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0xd2>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fdff 	bl	8003be8 <I2C_Master_ADDR>
 8002fea:	e072      	b.n	80030d2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d03b      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003006:	f000 80f3 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	09db      	lsrs	r3, r3, #7
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x11c>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	0a9b      	lsrs	r3, r3, #10
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x11c>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9c9 	bl	80033c6 <I2C_MasterTransmit_TXE>
 8003034:	e04d      	b.n	80030d2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80d6 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80cf 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	2b21      	cmp	r3, #33	; 0x21
 8003056:	d103      	bne.n	8003060 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa50 	bl	80034fe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305e:	e0c7      	b.n	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	f040 80c4 	bne.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fabe 	bl	80035ea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306e:	e0bf      	b.n	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	f000 80b7 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00f      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x194>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	0a9b      	lsrs	r3, r3, #10
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x194>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fb37 	bl	800371a <I2C_MasterReceive_RXNE>
 80030ac:	e011      	b.n	80030d2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 809a 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	0a5b      	lsrs	r3, r3, #9
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8093 	beq.w	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbed 	bl	80038aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d0:	e08e      	b.n	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030d2:	e08d      	b.n	80031f0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e007      	b.n	80030f6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x20e>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	0a5b      	lsrs	r3, r3, #9
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 ffb8 	bl	8004096 <I2C_Slave_ADDR>
 8003126:	e066      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x22e>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fff3 	bl	800412c <I2C_Slave_STOPF>
 8003146:	e056      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003148:	7bbb      	ldrb	r3, [r7, #14]
 800314a:	2b21      	cmp	r3, #33	; 0x21
 800314c:	d002      	beq.n	8003154 <HAL_I2C_EV_IRQHandler+0x23a>
 800314e:	7bbb      	ldrb	r3, [r7, #14]
 8003150:	2b29      	cmp	r3, #41	; 0x29
 8003152:	d125      	bne.n	80031a0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	09db      	lsrs	r3, r3, #7
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x266>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x266>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fed0 	bl	8003f1e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800317e:	e039      	b.n	80031f4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d033      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x2da>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02d      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fefd 	bl	8003f98 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800319e:	e029      	b.n	80031f4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00f      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x2b2>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x2b2>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 ff07 	bl	8003fd8 <I2C_SlaveReceive_RXNE>
 80031ca:	e014      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00e      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	0a5b      	lsrs	r3, r3, #9
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 ff35 	bl	8004054 <I2C_SlaveReceive_BTF>
 80031ea:	e004      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80031ec:	bf00      	nop
 80031ee:	e002      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f0:	bf00      	nop
 80031f2:	e000      	b.n	80031f6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x5e>
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003248:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	0a5b      	lsrs	r3, r3, #9
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x88>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003282:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03f      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x114>
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d039      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800329c:	7efb      	ldrb	r3, [r7, #27]
 800329e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032b6:	7ebb      	ldrb	r3, [r7, #26]
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d112      	bne.n	80032e2 <HAL_I2C_ER_IRQHandler+0xe6>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_I2C_ER_IRQHandler+0xe6>
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b21      	cmp	r3, #33	; 0x21
 80032c6:	d008      	beq.n	80032da <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	2b29      	cmp	r3, #41	; 0x29
 80032cc:	d005      	beq.n	80032da <HAL_I2C_ER_IRQHandler+0xde>
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b28      	cmp	r3, #40	; 0x28
 80032d2:	d106      	bne.n	80032e2 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b21      	cmp	r3, #33	; 0x21
 80032d8:	d103      	bne.n	80032e2 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f001 f856 	bl	800438c <I2C_Slave_AF>
 80032e0:	e016      	b.n	8003310 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ea:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032f4:	7efb      	ldrb	r3, [r7, #27]
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d002      	beq.n	8003300 <HAL_I2C_ER_IRQHandler+0x104>
 80032fa:	7efb      	ldrb	r3, [r7, #27]
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	0adb      	lsrs	r3, r3, #11
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0x13e>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003338:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f001 f891 	bl	8004474 <I2C_ITError>
  }
}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	; 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033dc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d150      	bne.n	800348e <I2C_MasterTransmit_TXE+0xc8>
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b21      	cmp	r3, #33	; 0x21
 80033f0:	d14d      	bne.n	800348e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d01d      	beq.n	8003434 <I2C_MasterTransmit_TXE+0x6e>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d01a      	beq.n	8003434 <I2C_MasterTransmit_TXE+0x6e>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003404:	d016      	beq.n	8003434 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003414:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2211      	movs	r2, #17
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff94 	bl	800335a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003432:	e060      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003442:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d107      	bne.n	800347e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ff8a 	bl	8003390 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800347c:	e03b      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff67 	bl	800335a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800348c:	e033      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b21      	cmp	r3, #33	; 0x21
 8003492:	d005      	beq.n	80034a0 <I2C_MasterTransmit_TXE+0xda>
 8003494:	7bbb      	ldrb	r3, [r7, #14]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d12d      	bne.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b22      	cmp	r3, #34	; 0x22
 800349e:	d12a      	bne.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034ba:	e01c      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f88e 	bl	80035ea <I2C_MemoryTransmit_TXE_BTF>
}
 80034ce:	e012      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034f4:	e7ff      	b.n	80034f6 <I2C_MasterTransmit_TXE+0x130>
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b21      	cmp	r3, #33	; 0x21
 8003516:	d164      	bne.n	80035e2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003546:	e04c      	b.n	80035e2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b08      	cmp	r3, #8
 800354c:	d01d      	beq.n	800358a <I2C_MasterTransmit_BTF+0x8c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b20      	cmp	r3, #32
 8003552:	d01a      	beq.n	800358a <I2C_MasterTransmit_BTF+0x8c>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800355a:	d016      	beq.n	800358a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800356a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2211      	movs	r2, #17
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fee9 	bl	800335a <HAL_I2C_MasterTxCpltCallback>
}
 8003588:	e02b      	b.n	80035e2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003598:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d107      	bne.n	80035d4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fedf 	bl	8003390 <HAL_I2C_MemTxCpltCallback>
}
 80035d2:	e006      	b.n	80035e2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff febc 	bl	800335a <HAL_I2C_MasterTxCpltCallback>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10b      	bne.n	8003622 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	b2da      	uxtb	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003620:	e077      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003626:	b29b      	uxth	r3, r3
 8003628:	121b      	asrs	r3, r3, #8
 800362a:	b2da      	uxtb	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800363c:	e069      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10b      	bne.n	800365e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	b2da      	uxtb	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800365c:	e059      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	2b02      	cmp	r3, #2
 8003664:	d152      	bne.n	800370c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b22      	cmp	r3, #34	; 0x22
 800366a:	d10d      	bne.n	8003688 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003686:	e044      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b21      	cmp	r3, #33	; 0x21
 8003696:	d112      	bne.n	80036be <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036bc:	e029      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d124      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b21      	cmp	r3, #33	; 0x21
 80036cc:	d121      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036dc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fe43 	bl	8003390 <HAL_I2C_MemTxCpltCallback>
}
 800370a:	e002      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7fe ffdf 	bl	80026d0 <I2C_Flush_DR>
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b22      	cmp	r3, #34	; 0x22
 800372c:	f040 80b9 	bne.w	80038a2 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d921      	bls.n	8003788 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b03      	cmp	r3, #3
 8003772:	f040 8096 	bne.w	80038a2 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003786:	e08c      	b.n	80038a2 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	2b02      	cmp	r3, #2
 800378e:	d07f      	beq.n	8003890 <I2C_MasterReceive_RXNE+0x176>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <I2C_MasterReceive_RXNE+0x82>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d179      	bne.n	8003890 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f001 fb3d 	bl	8004e1c <I2C_WaitOnSTOPRequestThroughIT>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d14c      	bne.n	8003842 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d10a      	bne.n	8003818 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fdc6 	bl	80033a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003816:	e044      	b.n	80038a2 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d002      	beq.n	800382c <I2C_MasterReceive_RXNE+0x112>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b20      	cmp	r3, #32
 800382a:	d103      	bne.n	8003834 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
 8003832:	e002      	b.n	800383a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2212      	movs	r2, #18
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff fd96 	bl	800336c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003840:	e02f      	b.n	80038a2 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003850:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd fed4 	bl	8001636 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800388e:	e008      	b.n	80038a2 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389e:	605a      	str	r2, [r3, #4]
}
 80038a0:	e7ff      	b.n	80038a2 <I2C_MasterReceive_RXNE+0x188>
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d11b      	bne.n	80038fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038f8:	e0c4      	b.n	8003a84 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b03      	cmp	r3, #3
 8003902:	d129      	bne.n	8003958 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00a      	beq.n	8003930 <I2C_MasterReceive_BTF+0x86>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d007      	beq.n	8003930 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003956:	e095      	b.n	8003a84 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d17d      	bne.n	8003a5e <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d002      	beq.n	800396e <I2C_MasterReceive_BTF+0xc4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d108      	bne.n	8003980 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e016      	b.n	80039ae <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <I2C_MasterReceive_BTF+0xe2>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d108      	bne.n	800399e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e007      	b.n	80039ae <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a08:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d10a      	bne.n	8003a34 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fcb8 	bl	80033a2 <HAL_I2C_MemRxCpltCallback>
}
 8003a32:	e027      	b.n	8003a84 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d002      	beq.n	8003a48 <I2C_MasterReceive_BTF+0x19e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d103      	bne.n	8003a50 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4e:	e002      	b.n	8003a56 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2212      	movs	r2, #18
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fc88 	bl	800336c <HAL_I2C_MasterRxCpltCallback>
}
 8003a5c:	e012      	b.n	8003a84 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d117      	bne.n	8003ad0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003aba:	e067      	b.n	8003b8c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]
}
 8003ace:	e05d      	b.n	8003b8c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad8:	d133      	bne.n	8003b42 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b21      	cmp	r3, #33	; 0x21
 8003ae4:	d109      	bne.n	8003afa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af6:	611a      	str	r2, [r3, #16]
 8003af8:	e008      	b.n	8003b0c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <I2C_Master_SB+0x92>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d032      	beq.n	8003b8c <I2C_Master_SB+0x100>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02d      	beq.n	8003b8c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3e:	605a      	str	r2, [r3, #4]
}
 8003b40:	e024      	b.n	8003b8c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10e      	bne.n	8003b68 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	11db      	asrs	r3, r3, #7
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0306 	and.w	r3, r3, #6
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f063 030f 	orn	r3, r3, #15
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]
}
 8003b66:	e011      	b.n	8003b8c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10d      	bne.n	8003b8c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	11db      	asrs	r3, r3, #7
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f063 030e 	orn	r3, r3, #14
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <I2C_Master_ADD10+0x26>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <I2C_Master_ADD10+0x48>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	605a      	str	r2, [r3, #4]
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b091      	sub	sp, #68	; 0x44
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b22      	cmp	r3, #34	; 0x22
 8003c10:	f040 8174 	bne.w	8003efc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <I2C_Master_ADDR+0x54>
 8003c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d10b      	bne.n	8003c3c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c24:	2300      	movs	r3, #0
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	e16b      	b.n	8003f14 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11d      	bne.n	8003c80 <I2C_Master_ADDR+0x98>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c4c:	d118      	bne.n	8003c80 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c72:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c7e:	e149      	b.n	8003f14 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e120      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 808a 	bne.w	8003dd2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc4:	d137      	bne.n	8003d36 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce4:	d113      	bne.n	8003d0e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	e0f2      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e0de      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d02e      	beq.n	8003d9a <I2C_Master_ADDR+0x1b2>
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d02b      	beq.n	8003d9a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d102      	bne.n	8003d4e <I2C_Master_ADDR+0x166>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d125      	bne.n	8003d9a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d00e      	beq.n	8003d72 <I2C_Master_ADDR+0x18a>
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d00b      	beq.n	8003d72 <I2C_Master_ADDR+0x18a>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d008      	beq.n	8003d72 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e007      	b.n	8003d82 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	e0ac      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e090      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d158      	bne.n	8003e8e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d021      	beq.n	8003e26 <I2C_Master_ADDR+0x23e>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d01e      	beq.n	8003e26 <I2C_Master_ADDR+0x23e>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d01b      	beq.n	8003e26 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e012      	b.n	8003e4c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d14b      	bne.n	8003ef4 <I2C_Master_ADDR+0x30c>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e62:	d00b      	beq.n	8003e7c <I2C_Master_ADDR+0x294>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d008      	beq.n	8003e7c <I2C_Master_ADDR+0x294>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d005      	beq.n	8003e7c <I2C_Master_ADDR+0x294>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d002      	beq.n	8003e7c <I2C_Master_ADDR+0x294>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d13b      	bne.n	8003ef4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e032      	b.n	8003ef4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eac:	d117      	bne.n	8003ede <I2C_Master_ADDR+0x2f6>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb4:	d00b      	beq.n	8003ece <I2C_Master_ADDR+0x2e6>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d008      	beq.n	8003ece <I2C_Master_ADDR+0x2e6>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d005      	beq.n	8003ece <I2C_Master_ADDR+0x2e6>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d002      	beq.n	8003ece <I2C_Master_ADDR+0x2e6>
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d107      	bne.n	8003ede <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003edc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003efa:	e00b      	b.n	8003f14 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
}
 8003f12:	e7ff      	b.n	8003f14 <I2C_Master_ADDR+0x32c>
 8003f14:	bf00      	nop
 8003f16:	3744      	adds	r7, #68	; 0x44
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02b      	beq.n	8003f90 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d114      	bne.n	8003f90 <I2C_SlaveTransmit_TXE+0x72>
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b29      	cmp	r3, #41	; 0x29
 8003f6a:	d111      	bne.n	8003f90 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2221      	movs	r2, #33	; 0x21
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2228      	movs	r2, #40	; 0x28
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff f9f7 	bl	800337e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02c      	beq.n	800404c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d114      	bne.n	800404c <I2C_SlaveReceive_RXNE+0x74>
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b2a      	cmp	r3, #42	; 0x2a
 8004026:	d111      	bne.n	800404c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2222      	movs	r2, #34	; 0x22
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2228      	movs	r2, #40	; 0x28
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd faec 	bl	8001624 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d012      	beq.n	800408c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d127      	bne.n	8004104 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	09db      	lsrs	r3, r3, #7
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	81bb      	strh	r3, [r7, #12]
 80040e6:	e002      	b.n	80040ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040f6:	89ba      	ldrh	r2, [r7, #12]
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd fa77 	bl	80015f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004102:	e00e      	b.n	8004122 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800414a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	d172      	bne.n	8004270 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b22      	cmp	r3, #34	; 0x22
 800418e:	d002      	beq.n	8004196 <I2C_Slave_STOPF+0x6a>
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b2a      	cmp	r3, #42	; 0x2a
 8004194:	d135      	bne.n	8004202 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd ff54 	bl	800207c <HAL_DMA_GetState>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d049      	beq.n	800426e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	4a69      	ldr	r2, [pc, #420]	; (8004384 <I2C_Slave_STOPF+0x258>)
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fed0 	bl	8001f8c <HAL_DMA_Abort_IT>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d03d      	beq.n	800426e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041fc:	4610      	mov	r0, r2
 80041fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004200:	e035      	b.n	800426e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0204 	orr.w	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004234:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd ff1e 	bl	800207c <HAL_DMA_GetState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d014      	beq.n	8004270 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <I2C_Slave_STOPF+0x258>)
 800424c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fe9a 	bl	8001f8c <HAL_DMA_Abort_IT>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004268:	4610      	mov	r0, r2
 800426a:	4798      	blx	r3
 800426c:	e000      	b.n	8004270 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03e      	beq.n	80042f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d112      	bne.n	80042ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d112      	bne.n	80042e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8b7 	bl	8004474 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004306:	e039      	b.n	800437c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b2a      	cmp	r3, #42	; 0x2a
 800430c:	d109      	bne.n	8004322 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2228      	movs	r2, #40	; 0x28
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd f981 	bl	8001624 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b28      	cmp	r3, #40	; 0x28
 800432c:	d111      	bne.n	8004352 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <I2C_Slave_STOPF+0x25c>)
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd f945 	bl	80015da <HAL_I2C_ListenCpltCallback>
}
 8004350:	e014      	b.n	800437c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	2b22      	cmp	r3, #34	; 0x22
 8004358:	d002      	beq.n	8004360 <I2C_Slave_STOPF+0x234>
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b22      	cmp	r3, #34	; 0x22
 800435e:	d10d      	bne.n	800437c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd f954 	bl	8001624 <HAL_I2C_SlaveRxCpltCallback>
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08004979 	.word	0x08004979
 8004388:	ffff0000 	.word	0xffff0000

0800438c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d002      	beq.n	80043ae <I2C_Slave_AF+0x22>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d129      	bne.n	8004402 <I2C_Slave_AF+0x76>
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b28      	cmp	r3, #40	; 0x28
 80043b2:	d126      	bne.n	8004402 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a2e      	ldr	r2, [pc, #184]	; (8004470 <I2C_Slave_AF+0xe4>)
 80043b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f8ed 	bl	80015da <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004400:	e031      	b.n	8004466 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b21      	cmp	r3, #33	; 0x21
 8004406:	d129      	bne.n	800445c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a19      	ldr	r2, [pc, #100]	; (8004470 <I2C_Slave_AF+0xe4>)
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2221      	movs	r2, #33	; 0x21
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800443c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fe f93e 	bl	80026d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe ff92 	bl	800337e <HAL_I2C_SlaveTxCpltCallback>
}
 800445a:	e004      	b.n	8004466 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	ffff0000 	.word	0xffff0000

08004474 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	2b10      	cmp	r3, #16
 8004490:	d002      	beq.n	8004498 <I2C_ITError+0x24>
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d10a      	bne.n	80044ae <I2C_ITError+0x3a>
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b22      	cmp	r3, #34	; 0x22
 800449c:	d107      	bne.n	80044ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044b4:	2b28      	cmp	r3, #40	; 0x28
 80044b6:	d107      	bne.n	80044c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2228      	movs	r2, #40	; 0x28
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044c6:	e015      	b.n	80044f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d6:	d00a      	beq.n	80044ee <I2C_ITError+0x7a>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b60      	cmp	r3, #96	; 0x60
 80044dc:	d007      	beq.n	80044ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004502:	d162      	bne.n	80045ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004512:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d020      	beq.n	8004564 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	4a6a      	ldr	r2, [pc, #424]	; (80046d0 <I2C_ITError+0x25c>)
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fd2c 	bl	8001f8c <HAL_DMA_Abort_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8089 	beq.w	800464e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455e:	4610      	mov	r0, r2
 8004560:	4798      	blx	r3
 8004562:	e074      	b.n	800464e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	4a59      	ldr	r2, [pc, #356]	; (80046d0 <I2C_ITError+0x25c>)
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd fd0b 	bl	8001f8c <HAL_DMA_Abort_IT>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d068      	beq.n	800464e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d10b      	bne.n	80045a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
 80045c8:	e041      	b.n	800464e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b60      	cmp	r3, #96	; 0x60
 80045d4:	d125      	bne.n	8004622 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d10b      	bne.n	800460a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe feca 	bl	80033b4 <HAL_I2C_AbortCpltCallback>
 8004620:	e015      	b.n	800464e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d10b      	bne.n	8004648 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fc fff4 	bl	8001636 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10e      	bne.n	800467c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d113      	bne.n	80046c8 <I2C_ITError+0x254>
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b28      	cmp	r3, #40	; 0x28
 80046a4:	d110      	bne.n	80046c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <I2C_ITError+0x260>)
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc ff89 	bl	80015da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	08004979 	.word	0x08004979
 80046d4:	ffff0000 	.word	0xffff0000

080046d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	460b      	mov	r3, r1
 80046e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d006      	beq.n	8004702 <I2C_MasterRequestWrite+0x2a>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d003      	beq.n	8004702 <I2C_MasterRequestWrite+0x2a>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004700:	d108      	bne.n	8004714 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e00b      	b.n	800472c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b12      	cmp	r3, #18
 800471a:	d107      	bne.n	800472c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f9c5 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004752:	d103      	bne.n	800475c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e035      	b.n	80047cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004768:	d108      	bne.n	800477c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004778:	611a      	str	r2, [r3, #16]
 800477a:	e01b      	b.n	80047b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800477c:	897b      	ldrh	r3, [r7, #10]
 800477e:	11db      	asrs	r3, r3, #7
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0306 	and.w	r3, r3, #6
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f063 030f 	orn	r3, r3, #15
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <I2C_MasterRequestWrite+0xfc>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa0e 	bl	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e010      	b.n	80047cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047aa:	897b      	ldrh	r3, [r7, #10]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <I2C_MasterRequestWrite+0x100>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f9fe 	bl	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00010008 	.word	0x00010008
 80047d8:	00010002 	.word	0x00010002

080047dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d006      	beq.n	8004816 <I2C_MasterRequestRead+0x3a>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d003      	beq.n	8004816 <I2C_MasterRequestRead+0x3a>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004814:	d108      	bne.n	8004828 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e00b      	b.n	8004840 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	2b11      	cmp	r3, #17
 800482e:	d107      	bne.n	8004840 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f93b 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d103      	bne.n	8004870 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e079      	b.n	8004968 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487c:	d108      	bne.n	8004890 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	611a      	str	r2, [r3, #16]
 800488e:	e05f      	b.n	8004950 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004890:	897b      	ldrh	r3, [r7, #10]
 8004892:	11db      	asrs	r3, r3, #7
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0306 	and.w	r3, r3, #6
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f063 030f 	orn	r3, r3, #15
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4930      	ldr	r1, [pc, #192]	; (8004970 <I2C_MasterRequestRead+0x194>)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f984 	bl	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e054      	b.n	8004968 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4929      	ldr	r1, [pc, #164]	; (8004974 <I2C_MasterRequestRead+0x198>)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f974 	bl	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e044      	b.n	8004968 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f8d9 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d103      	bne.n	8004934 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e017      	b.n	8004968 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004938:	897b      	ldrh	r3, [r7, #10]
 800493a:	11db      	asrs	r3, r3, #7
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0306 	and.w	r3, r3, #6
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f063 030e 	orn	r3, r3, #14
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <I2C_MasterRequestRead+0x198>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f930 	bl	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	00010008 	.word	0x00010008
 8004974:	00010002 	.word	0x00010002

08004978 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004992:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <I2C_DMAAbort+0x148>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	4a4a      	ldr	r2, [pc, #296]	; (8004ac4 <I2C_DMAAbort+0x14c>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0a1a      	lsrs	r2, r3, #8
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	00da      	lsls	r2, r3, #3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049be:	e00a      	b.n	80049d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d0ea      	beq.n	80049ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	2200      	movs	r2, #0
 8004a1a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	2200      	movs	r2, #0
 8004a2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d10e      	bne.n	8004a66 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a5e:	6978      	ldr	r0, [r7, #20]
 8004a60:	f7fe fca8 	bl	80033b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a64:	e027      	b.n	8004ab6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a6c:	2b28      	cmp	r3, #40	; 0x28
 8004a6e:	d117      	bne.n	8004aa0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2228      	movs	r2, #40	; 0x28
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a9e:	e007      	b.n	8004ab0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7fc fdc0 	bl	8001636 <HAL_I2C_ErrorCallback>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	14f8b589 	.word	0x14f8b589

08004ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad8:	e048      	b.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d044      	beq.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fd f917 	bl	8001d14 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d139      	bne.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10d      	bne.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	e00c      	b.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	43da      	mvns	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d116      	bne.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e023      	b.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10d      	bne.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	e00c      	b.n	8004bac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d093      	beq.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bca:	e071      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d123      	bne.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e067      	b.n	8004cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d041      	beq.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2c:	f7fd f872 	bl	8001d14 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d302      	bcc.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d136      	bne.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10c      	bne.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e00b      	b.n	8004c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	43da      	mvns	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4013      	ands	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e021      	b.n	8004cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10c      	bne.n	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e00b      	b.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f af6d 	bne.w	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d08:	e034      	b.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f915 	bl	8004f3a <I2C_IsAcknowledgeFailed>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e034      	b.n	8004d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d028      	beq.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fc fff7 	bl	8001d14 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11d      	bne.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d016      	beq.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d1c3      	bne.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d98:	e034      	b.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8cd 	bl	8004f3a <I2C_IsAcknowledgeFailed>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e034      	b.n	8004e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d028      	beq.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fc ffaf 	bl	8001d14 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11d      	bne.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d016      	beq.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e007      	b.n	8004e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d1c3      	bne.n	8004d9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	0a1a      	lsrs	r2, r3, #8
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e008      	b.n	8004e6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d0e9      	beq.n	8004e3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	14f8b589 	.word	0x14f8b589

08004e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e8c:	e049      	b.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d119      	bne.n	8004ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0210 	mvn.w	r2, #16
 8004ea4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e030      	b.n	8004f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fc ff20 	bl	8001d14 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d11d      	bne.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d016      	beq.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e007      	b.n	8004f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d1ae      	bne.n	8004e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d11b      	bne.n	8004f8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fa6:	d103      	bne.n	8004fb0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fae:	e007      	b.n	8004fc0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fb8:	d102      	bne.n	8004fc0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e26c      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8087 	beq.w	80050fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fec:	4b92      	ldr	r3, [pc, #584]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d00c      	beq.n	8005012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d112      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d10b      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005012:	4b89      	ldr	r3, [pc, #548]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d06c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x12c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d168      	bne.n	80050f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e246      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x76>
 8005034:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7f      	ldr	r2, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e02e      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7a      	ldr	r2, [pc, #488]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b78      	ldr	r3, [pc, #480]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a77      	ldr	r2, [pc, #476]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0xbc>
 800506e:	4b72      	ldr	r3, [pc, #456]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a71      	ldr	r2, [pc, #452]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6e      	ldr	r2, [pc, #440]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005088:	4b6b      	ldr	r3, [pc, #428]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a67      	ldr	r2, [pc, #412]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fc fe34 	bl	8001d14 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fc fe30 	bl	8001d14 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1fa      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe4>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fc fe20 	bl	8001d14 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc fe1c 	bl	8001d14 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1e6      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b53      	ldr	r3, [pc, #332]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x10c>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d063      	beq.n	80051ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005106:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005112:	4b49      	ldr	r3, [pc, #292]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b08      	cmp	r3, #8
 800511c:	d11c      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1ba      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4939      	ldr	r1, [pc, #228]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	e03a      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x270>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005166:	f7fc fdd5 	bl	8001d14 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516e:	f7fc fdd1 	bl	8001d14 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e19b      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4927      	ldr	r1, [pc, #156]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <HAL_RCC_OscConfig+0x270>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fc fdb4 	bl	8001d14 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fc fdb0 	bl	8001d14 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e17a      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d03a      	beq.n	8005250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d019      	beq.n	8005216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fc fd94 	bl	8001d14 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fc fd90 	bl	8001d14 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e15a      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800520e:	2001      	movs	r0, #1
 8005210:	f000 facc 	bl	80057ac <RCC_Delay>
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521c:	f7fc fd7a 	bl	8001d14 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005222:	e00f      	b.n	8005244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7fc fd76 	bl	8001d14 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d908      	bls.n	8005244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e140      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	42420000 	.word	0x42420000
 8005240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	4b9e      	ldr	r3, [pc, #632]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e9      	bne.n	8005224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a6 	beq.w	80053aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005262:	4b97      	ldr	r3, [pc, #604]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b94      	ldr	r3, [pc, #592]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4a93      	ldr	r2, [pc, #588]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	61d3      	str	r3, [r2, #28]
 800527a:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b8e      	ldr	r3, [pc, #568]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b8b      	ldr	r3, [pc, #556]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a8a      	ldr	r2, [pc, #552]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fc fd37 	bl	8001d14 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fc fd33 	bl	8001d14 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b64      	cmp	r3, #100	; 0x64
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0fd      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	4b81      	ldr	r3, [pc, #516]	; (80054c4 <HAL_RCC_OscConfig+0x4f8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x312>
 80052d0:	4b7b      	ldr	r3, [pc, #492]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a7a      	ldr	r2, [pc, #488]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	e02d      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x334>
 80052e6:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4a75      	ldr	r2, [pc, #468]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	6213      	str	r3, [r2, #32]
 80052f2:	4b73      	ldr	r3, [pc, #460]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a72      	ldr	r2, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	6213      	str	r3, [r2, #32]
 80052fe:	e01c      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d10c      	bne.n	8005322 <HAL_RCC_OscConfig+0x356>
 8005308:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a6c      	ldr	r2, [pc, #432]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	6213      	str	r3, [r2, #32]
 8005314:	4b6a      	ldr	r3, [pc, #424]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4a69      	ldr	r2, [pc, #420]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e00b      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005322:	4b67      	ldr	r3, [pc, #412]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a66      	ldr	r2, [pc, #408]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	4b64      	ldr	r3, [pc, #400]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a63      	ldr	r2, [pc, #396]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d015      	beq.n	800536e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fc fce7 	bl	8001d14 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fc fce3 	bl	8001d14 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e0ab      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ee      	beq.n	800534a <HAL_RCC_OscConfig+0x37e>
 800536c:	e014      	b.n	8005398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fc fcd1 	bl	8001d14 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fc fccd 	bl	8001d14 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e095      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ee      	bne.n	8005376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4a47      	ldr	r2, [pc, #284]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8081 	beq.w	80054b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d061      	beq.n	8005484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d146      	bne.n	8005456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <HAL_RCC_OscConfig+0x4fc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fc fca1 	bl	8001d14 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fc fc9d 	bl	8001d14 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e067      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e8:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053fe:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	492d      	ldr	r1, [pc, #180]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a19      	ldr	r1, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	430b      	orrs	r3, r1
 8005422:	4927      	ldr	r1, [pc, #156]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_OscConfig+0x4fc>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fc fc71 	bl	8001d14 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7fc fc6d 	bl	8001d14 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e037      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x46a>
 8005454:	e02f      	b.n	80054b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <HAL_RCC_OscConfig+0x4fc>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fc fc5a 	bl	8001d14 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005464:	f7fc fc56 	bl	8001d14 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e020      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x498>
 8005482:	e018      	b.n	80054b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e013      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_OscConfig+0x4f4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40007000 	.word	0x40007000
 80054c8:	42420060 	.word	0x42420060

080054cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0d0      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e0:	4b6a      	ldr	r3, [pc, #424]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d910      	bls.n	8005510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b67      	ldr	r3, [pc, #412]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 0207 	bic.w	r2, r3, #7
 80054f6:	4965      	ldr	r1, [pc, #404]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0b8      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005528:	4b59      	ldr	r3, [pc, #356]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800552e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005540:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a52      	ldr	r2, [pc, #328]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800554a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554c:	4b50      	ldr	r3, [pc, #320]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	494d      	ldr	r1, [pc, #308]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d040      	beq.n	80055ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d115      	bne.n	80055aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e073      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e06b      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f023 0203 	bic.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4936      	ldr	r1, [pc, #216]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055bc:	f7fc fbaa 	bl	8001d14 <HAL_GetTick>
 80055c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c2:	e00a      	b.n	80055da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c4:	f7fc fba6 	bl	8001d14 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e053      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f003 020c 	and.w	r2, r3, #12
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d1eb      	bne.n	80055c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d210      	bcs.n	800561c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 0207 	bic.w	r2, r3, #7
 8005602:	4922      	ldr	r1, [pc, #136]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e032      	b.n	8005682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4916      	ldr	r1, [pc, #88]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	490e      	ldr	r1, [pc, #56]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800565a:	f000 f821 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800565e:	4602      	mov	r2, r0
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	490a      	ldr	r1, [pc, #40]	; (8005694 <HAL_RCC_ClockConfig+0x1c8>)
 800566c:	5ccb      	ldrb	r3, [r1, r3]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1cc>)
 8005674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1d0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc fb08 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40022000 	.word	0x40022000
 8005690:	40021000 	.word	0x40021000
 8005694:	080071dc 	.word	0x080071dc
 8005698:	20000000 	.word	0x20000000
 800569c:	20000004 	.word	0x20000004

080056a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <HAL_RCC_GetSysClockFreq+0x94>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d002      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x30>
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x36>
 80056ce:	e027      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_RCC_GetSysClockFreq+0x98>)
 80056d2:	613b      	str	r3, [r7, #16]
      break;
 80056d4:	e027      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	0c9b      	lsrs	r3, r3, #18
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <HAL_RCC_GetSysClockFreq+0x9c>)
 80056e0:	5cd3      	ldrb	r3, [r2, r3]
 80056e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d010      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_RCC_GetSysClockFreq+0x94>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	0c5b      	lsrs	r3, r3, #17
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056fa:	5cd3      	ldrb	r3, [r2, r3]
 80056fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a0d      	ldr	r2, [pc, #52]	; (8005738 <HAL_RCC_GetSysClockFreq+0x98>)
 8005702:	fb02 f203 	mul.w	r2, r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e004      	b.n	800571a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	613b      	str	r3, [r7, #16]
      break;
 800571e:	e002      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetSysClockFreq+0x98>)
 8005722:	613b      	str	r3, [r7, #16]
      break;
 8005724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005726:	693b      	ldr	r3, [r7, #16]
}
 8005728:	4618      	mov	r0, r3
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000
 8005738:	007a1200 	.word	0x007a1200
 800573c:	080071f4 	.word	0x080071f4
 8005740:	08007204 	.word	0x08007204
 8005744:	003d0900 	.word	0x003d0900

08005748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <HAL_RCC_GetHCLKFreq+0x10>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	20000000 	.word	0x20000000

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005760:	f7ff fff2 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000
 8005780:	080071ec 	.word	0x080071ec

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005788:	f7ff ffde 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	0adb      	lsrs	r3, r3, #11
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000
 80057a8:	080071ec 	.word	0x080071ec

080057ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <RCC_Delay+0x34>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <RCC_Delay+0x38>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a5b      	lsrs	r3, r3, #9
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057c8:	bf00      	nop
  }
  while (Delay --);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	60fa      	str	r2, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f9      	bne.n	80057c8 <RCC_Delay+0x1c>
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	20000000 	.word	0x20000000
 80057e4:	10624dd3 	.word	0x10624dd3

080057e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e042      	b.n	8005880 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc f944 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f82b 	bl	8005888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058c2:	f023 030c 	bic.w	r3, r3, #12
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2c      	ldr	r2, [pc, #176]	; (800599c <UART_SetConfig+0x114>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d103      	bne.n	80058f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7ff ff48 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	e002      	b.n	80058fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7ff ff30 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 80058fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009a      	lsls	r2, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <UART_SetConfig+0x118>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	0119      	lsls	r1, r3, #4
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	fbb2 f2f3 	udiv	r2, r2, r3
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <UART_SetConfig+0x118>)
 8005936:	fba3 0302 	umull	r0, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2064      	movs	r0, #100	; 0x64
 800593e:	fb00 f303 	mul.w	r3, r0, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	3332      	adds	r3, #50	; 0x32
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <UART_SetConfig+0x118>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005954:	4419      	add	r1, r3
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009a      	lsls	r2, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	fbb2 f2f3 	udiv	r2, r2, r3
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <UART_SetConfig+0x118>)
 800596e:	fba3 0302 	umull	r0, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	2064      	movs	r0, #100	; 0x64
 8005976:	fb00 f303 	mul.w	r3, r0, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	3332      	adds	r3, #50	; 0x32
 8005980:	4a07      	ldr	r2, [pc, #28]	; (80059a0 <UART_SetConfig+0x118>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	440a      	add	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40013800 	.word	0x40013800
 80059a0:	51eb851f 	.word	0x51eb851f

080059a4 <__errno>:
 80059a4:	4b01      	ldr	r3, [pc, #4]	; (80059ac <__errno+0x8>)
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	2000000c 	.word	0x2000000c

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	2600      	movs	r6, #0
 80059b4:	4d0c      	ldr	r5, [pc, #48]	; (80059e8 <__libc_init_array+0x38>)
 80059b6:	4c0d      	ldr	r4, [pc, #52]	; (80059ec <__libc_init_array+0x3c>)
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	42a6      	cmp	r6, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	f001 fbec 	bl	800719c <_init>
 80059c4:	2600      	movs	r6, #0
 80059c6:	4d0a      	ldr	r5, [pc, #40]	; (80059f0 <__libc_init_array+0x40>)
 80059c8:	4c0a      	ldr	r4, [pc, #40]	; (80059f4 <__libc_init_array+0x44>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d8:	4798      	blx	r3
 80059da:	3601      	adds	r6, #1
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e2:	4798      	blx	r3
 80059e4:	3601      	adds	r6, #1
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08007280 	.word	0x08007280
 80059ec:	08007280 	.word	0x08007280
 80059f0:	08007280 	.word	0x08007280
 80059f4:	08007284 	.word	0x08007284

080059f8 <memset>:
 80059f8:	4603      	mov	r3, r0
 80059fa:	4402      	add	r2, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <siprintf>:
 8005a08:	b40e      	push	{r1, r2, r3}
 8005a0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a0e:	b500      	push	{lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	ab1d      	add	r3, sp, #116	; 0x74
 8005a14:	9002      	str	r0, [sp, #8]
 8005a16:	9006      	str	r0, [sp, #24]
 8005a18:	9107      	str	r1, [sp, #28]
 8005a1a:	9104      	str	r1, [sp, #16]
 8005a1c:	4808      	ldr	r0, [pc, #32]	; (8005a40 <siprintf+0x38>)
 8005a1e:	4909      	ldr	r1, [pc, #36]	; (8005a44 <siprintf+0x3c>)
 8005a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a24:	9105      	str	r1, [sp, #20]
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	a902      	add	r1, sp, #8
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f000 f868 	bl	8005b00 <_svfiprintf_r>
 8005a30:	2200      	movs	r2, #0
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	b01c      	add	sp, #112	; 0x70
 8005a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a3c:	b003      	add	sp, #12
 8005a3e:	4770      	bx	lr
 8005a40:	2000000c 	.word	0x2000000c
 8005a44:	ffff0208 	.word	0xffff0208

08005a48 <__ssputs_r>:
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	688e      	ldr	r6, [r1, #8]
 8005a4e:	4682      	mov	sl, r0
 8005a50:	429e      	cmp	r6, r3
 8005a52:	460c      	mov	r4, r1
 8005a54:	4690      	mov	r8, r2
 8005a56:	461f      	mov	r7, r3
 8005a58:	d838      	bhi.n	8005acc <__ssputs_r+0x84>
 8005a5a:	898a      	ldrh	r2, [r1, #12]
 8005a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a60:	d032      	beq.n	8005ac8 <__ssputs_r+0x80>
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	6909      	ldr	r1, [r1, #16]
 8005a66:	3301      	adds	r3, #1
 8005a68:	eba5 0901 	sub.w	r9, r5, r1
 8005a6c:	6965      	ldr	r5, [r4, #20]
 8005a6e:	444b      	add	r3, r9
 8005a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a78:	106d      	asrs	r5, r5, #1
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	bf38      	it	cc
 8005a7e:	461d      	movcc	r5, r3
 8005a80:	0553      	lsls	r3, r2, #21
 8005a82:	d531      	bpl.n	8005ae8 <__ssputs_r+0xa0>
 8005a84:	4629      	mov	r1, r5
 8005a86:	f000 fb53 	bl	8006130 <_malloc_r>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	b950      	cbnz	r0, 8005aa4 <__ssputs_r+0x5c>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	f8ca 3000 	str.w	r3, [sl]
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa4:	464a      	mov	r2, r9
 8005aa6:	6921      	ldr	r1, [r4, #16]
 8005aa8:	f000 face 	bl	8006048 <memcpy>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	6126      	str	r6, [r4, #16]
 8005aba:	444e      	add	r6, r9
 8005abc:	6026      	str	r6, [r4, #0]
 8005abe:	463e      	mov	r6, r7
 8005ac0:	6165      	str	r5, [r4, #20]
 8005ac2:	eba5 0509 	sub.w	r5, r5, r9
 8005ac6:	60a5      	str	r5, [r4, #8]
 8005ac8:	42be      	cmp	r6, r7
 8005aca:	d900      	bls.n	8005ace <__ssputs_r+0x86>
 8005acc:	463e      	mov	r6, r7
 8005ace:	4632      	mov	r2, r6
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	f000 fac6 	bl	8006064 <memmove>
 8005ad8:	68a3      	ldr	r3, [r4, #8]
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	1b9b      	subs	r3, r3, r6
 8005ade:	4432      	add	r2, r6
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	6022      	str	r2, [r4, #0]
 8005ae6:	e7db      	b.n	8005aa0 <__ssputs_r+0x58>
 8005ae8:	462a      	mov	r2, r5
 8005aea:	f000 fb7b 	bl	80061e4 <_realloc_r>
 8005aee:	4606      	mov	r6, r0
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d1e1      	bne.n	8005ab8 <__ssputs_r+0x70>
 8005af4:	4650      	mov	r0, sl
 8005af6:	6921      	ldr	r1, [r4, #16]
 8005af8:	f000 face 	bl	8006098 <_free_r>
 8005afc:	e7c7      	b.n	8005a8e <__ssputs_r+0x46>
	...

08005b00 <_svfiprintf_r>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	4698      	mov	r8, r3
 8005b06:	898b      	ldrh	r3, [r1, #12]
 8005b08:	4607      	mov	r7, r0
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	4614      	mov	r4, r2
 8005b10:	b09d      	sub	sp, #116	; 0x74
 8005b12:	d50e      	bpl.n	8005b32 <_svfiprintf_r+0x32>
 8005b14:	690b      	ldr	r3, [r1, #16]
 8005b16:	b963      	cbnz	r3, 8005b32 <_svfiprintf_r+0x32>
 8005b18:	2140      	movs	r1, #64	; 0x40
 8005b1a:	f000 fb09 	bl	8006130 <_malloc_r>
 8005b1e:	6028      	str	r0, [r5, #0]
 8005b20:	6128      	str	r0, [r5, #16]
 8005b22:	b920      	cbnz	r0, 8005b2e <_svfiprintf_r+0x2e>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e0d1      	b.n	8005cd2 <_svfiprintf_r+0x1d2>
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	616b      	str	r3, [r5, #20]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9309      	str	r3, [sp, #36]	; 0x24
 8005b36:	2320      	movs	r3, #32
 8005b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b3c:	2330      	movs	r3, #48	; 0x30
 8005b3e:	f04f 0901 	mov.w	r9, #1
 8005b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005cec <_svfiprintf_r+0x1ec>
 8005b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b4e:	4623      	mov	r3, r4
 8005b50:	469a      	mov	sl, r3
 8005b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b56:	b10a      	cbz	r2, 8005b5c <_svfiprintf_r+0x5c>
 8005b58:	2a25      	cmp	r2, #37	; 0x25
 8005b5a:	d1f9      	bne.n	8005b50 <_svfiprintf_r+0x50>
 8005b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b60:	d00b      	beq.n	8005b7a <_svfiprintf_r+0x7a>
 8005b62:	465b      	mov	r3, fp
 8005b64:	4622      	mov	r2, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ff6d 	bl	8005a48 <__ssputs_r>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f000 80aa 	beq.w	8005cc8 <_svfiprintf_r+0x1c8>
 8005b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b76:	445a      	add	r2, fp
 8005b78:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a2 	beq.w	8005cc8 <_svfiprintf_r+0x1c8>
 8005b84:	2300      	movs	r3, #0
 8005b86:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8e:	f10a 0a01 	add.w	sl, sl, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	9307      	str	r3, [sp, #28]
 8005b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b9c:	4654      	mov	r4, sl
 8005b9e:	2205      	movs	r2, #5
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	4851      	ldr	r0, [pc, #324]	; (8005cec <_svfiprintf_r+0x1ec>)
 8005ba6:	f000 fa41 	bl	800602c <memchr>
 8005baa:	9a04      	ldr	r2, [sp, #16]
 8005bac:	b9d8      	cbnz	r0, 8005be6 <_svfiprintf_r+0xe6>
 8005bae:	06d0      	lsls	r0, r2, #27
 8005bb0:	bf44      	itt	mi
 8005bb2:	2320      	movmi	r3, #32
 8005bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb8:	0711      	lsls	r1, r2, #28
 8005bba:	bf44      	itt	mi
 8005bbc:	232b      	movmi	r3, #43	; 0x2b
 8005bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc8:	d015      	beq.n	8005bf6 <_svfiprintf_r+0xf6>
 8005bca:	4654      	mov	r4, sl
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f04f 0c0a 	mov.w	ip, #10
 8005bd2:	9a07      	ldr	r2, [sp, #28]
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bda:	3b30      	subs	r3, #48	; 0x30
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d94e      	bls.n	8005c7e <_svfiprintf_r+0x17e>
 8005be0:	b1b0      	cbz	r0, 8005c10 <_svfiprintf_r+0x110>
 8005be2:	9207      	str	r2, [sp, #28]
 8005be4:	e014      	b.n	8005c10 <_svfiprintf_r+0x110>
 8005be6:	eba0 0308 	sub.w	r3, r0, r8
 8005bea:	fa09 f303 	lsl.w	r3, r9, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	46a2      	mov	sl, r4
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	e7d2      	b.n	8005b9c <_svfiprintf_r+0x9c>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	1d19      	adds	r1, r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	9103      	str	r1, [sp, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfbb      	ittet	lt
 8005c02:	425b      	neglt	r3, r3
 8005c04:	f042 0202 	orrlt.w	r2, r2, #2
 8005c08:	9307      	strge	r3, [sp, #28]
 8005c0a:	9307      	strlt	r3, [sp, #28]
 8005c0c:	bfb8      	it	lt
 8005c0e:	9204      	strlt	r2, [sp, #16]
 8005c10:	7823      	ldrb	r3, [r4, #0]
 8005c12:	2b2e      	cmp	r3, #46	; 0x2e
 8005c14:	d10c      	bne.n	8005c30 <_svfiprintf_r+0x130>
 8005c16:	7863      	ldrb	r3, [r4, #1]
 8005c18:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1a:	d135      	bne.n	8005c88 <_svfiprintf_r+0x188>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	3402      	adds	r4, #2
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9203      	str	r2, [sp, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfb8      	it	lt
 8005c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c2e:	9305      	str	r3, [sp, #20]
 8005c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cfc <_svfiprintf_r+0x1fc>
 8005c34:	2203      	movs	r2, #3
 8005c36:	4650      	mov	r0, sl
 8005c38:	7821      	ldrb	r1, [r4, #0]
 8005c3a:	f000 f9f7 	bl	800602c <memchr>
 8005c3e:	b140      	cbz	r0, 8005c52 <_svfiprintf_r+0x152>
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	eba0 000a 	sub.w	r0, r0, sl
 8005c46:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4a:	9b04      	ldr	r3, [sp, #16]
 8005c4c:	3401      	adds	r4, #1
 8005c4e:	4303      	orrs	r3, r0
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c56:	2206      	movs	r2, #6
 8005c58:	4825      	ldr	r0, [pc, #148]	; (8005cf0 <_svfiprintf_r+0x1f0>)
 8005c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c5e:	f000 f9e5 	bl	800602c <memchr>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d038      	beq.n	8005cd8 <_svfiprintf_r+0x1d8>
 8005c66:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <_svfiprintf_r+0x1f4>)
 8005c68:	bb1b      	cbnz	r3, 8005cb2 <_svfiprintf_r+0x1b2>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	3307      	adds	r3, #7
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	3308      	adds	r3, #8
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c78:	4433      	add	r3, r6
 8005c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7c:	e767      	b.n	8005b4e <_svfiprintf_r+0x4e>
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2001      	movs	r0, #1
 8005c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c86:	e7a5      	b.n	8005bd4 <_svfiprintf_r+0xd4>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f04f 0c0a 	mov.w	ip, #10
 8005c8e:	4619      	mov	r1, r3
 8005c90:	3401      	adds	r4, #1
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	4620      	mov	r0, r4
 8005c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9a:	3a30      	subs	r2, #48	; 0x30
 8005c9c:	2a09      	cmp	r2, #9
 8005c9e:	d903      	bls.n	8005ca8 <_svfiprintf_r+0x1a8>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c5      	beq.n	8005c30 <_svfiprintf_r+0x130>
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	e7c3      	b.n	8005c30 <_svfiprintf_r+0x130>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2301      	movs	r3, #1
 8005cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb0:	e7f0      	b.n	8005c94 <_svfiprintf_r+0x194>
 8005cb2:	ab03      	add	r3, sp, #12
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4638      	mov	r0, r7
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <_svfiprintf_r+0x1f8>)
 8005cbc:	a904      	add	r1, sp, #16
 8005cbe:	f3af 8000 	nop.w
 8005cc2:	1c42      	adds	r2, r0, #1
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	d1d6      	bne.n	8005c76 <_svfiprintf_r+0x176>
 8005cc8:	89ab      	ldrh	r3, [r5, #12]
 8005cca:	065b      	lsls	r3, r3, #25
 8005ccc:	f53f af2c 	bmi.w	8005b28 <_svfiprintf_r+0x28>
 8005cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd2:	b01d      	add	sp, #116	; 0x74
 8005cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd8:	ab03      	add	r3, sp, #12
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4638      	mov	r0, r7
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <_svfiprintf_r+0x1f8>)
 8005ce2:	a904      	add	r1, sp, #16
 8005ce4:	f000 f87c 	bl	8005de0 <_printf_i>
 8005ce8:	e7eb      	b.n	8005cc2 <_svfiprintf_r+0x1c2>
 8005cea:	bf00      	nop
 8005cec:	08007206 	.word	0x08007206
 8005cf0:	08007210 	.word	0x08007210
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a49 	.word	0x08005a49
 8005cfc:	0800720c 	.word	0x0800720c

08005d00 <_printf_common>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	4616      	mov	r6, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	688a      	ldr	r2, [r1, #8]
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bfb8      	it	lt
 8005d12:	4613      	movlt	r3, r2
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d20:	b10a      	cbz	r2, 8005d26 <_printf_common+0x26>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	6833      	ldrmi	r3, [r6, #0]
 8005d2e:	3302      	addmi	r3, #2
 8005d30:	6033      	strmi	r3, [r6, #0]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d106      	bne.n	8005d48 <_printf_common+0x48>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	6832      	ldr	r2, [r6, #0]
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc28      	bgt.n	8005d9a <_printf_common+0x9a>
 8005d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d4c:	1e13      	subs	r3, r2, #0
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	0692      	lsls	r2, r2, #26
 8005d56:	d42d      	bmi.n	8005db4 <_printf_common+0xb4>
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d020      	beq.n	8005da8 <_printf_common+0xa8>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	68e5      	ldr	r5, [r4, #12]
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	bf18      	it	ne
 8005d72:	2500      	movne	r5, #0
 8005d74:	6832      	ldr	r2, [r6, #0]
 8005d76:	f04f 0600 	mov.w	r6, #0
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	bf08      	it	eq
 8005d7e:	1aad      	subeq	r5, r5, r2
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	bf08      	it	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bfc4      	itt	gt
 8005d8c:	1a9b      	subgt	r3, r3, r2
 8005d8e:	18ed      	addgt	r5, r5, r3
 8005d90:	341a      	adds	r4, #26
 8005d92:	42b5      	cmp	r5, r6
 8005d94:	d11a      	bne.n	8005dcc <_printf_common+0xcc>
 8005d96:	2000      	movs	r0, #0
 8005d98:	e008      	b.n	8005dac <_printf_common+0xac>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	4649      	mov	r1, r9
 8005da0:	4638      	mov	r0, r7
 8005da2:	47c0      	blx	r8
 8005da4:	3001      	adds	r0, #1
 8005da6:	d103      	bne.n	8005db0 <_printf_common+0xb0>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db0:	3501      	adds	r5, #1
 8005db2:	e7c4      	b.n	8005d3e <_printf_common+0x3e>
 8005db4:	2030      	movs	r0, #48	; 0x30
 8005db6:	18e1      	adds	r1, r4, r3
 8005db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc2:	4422      	add	r2, r4
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dca:	e7c5      	b.n	8005d58 <_printf_common+0x58>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4622      	mov	r2, r4
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	47c0      	blx	r8
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d0e6      	beq.n	8005da8 <_printf_common+0xa8>
 8005dda:	3601      	adds	r6, #1
 8005ddc:	e7d9      	b.n	8005d92 <_printf_common+0x92>
	...

08005de0 <_printf_i>:
 8005de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	7e27      	ldrb	r7, [r4, #24]
 8005de8:	4691      	mov	r9, r2
 8005dea:	2f78      	cmp	r7, #120	; 0x78
 8005dec:	4680      	mov	r8, r0
 8005dee:	469a      	mov	sl, r3
 8005df0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df6:	d807      	bhi.n	8005e08 <_printf_i+0x28>
 8005df8:	2f62      	cmp	r7, #98	; 0x62
 8005dfa:	d80a      	bhi.n	8005e12 <_printf_i+0x32>
 8005dfc:	2f00      	cmp	r7, #0
 8005dfe:	f000 80d9 	beq.w	8005fb4 <_printf_i+0x1d4>
 8005e02:	2f58      	cmp	r7, #88	; 0x58
 8005e04:	f000 80a4 	beq.w	8005f50 <_printf_i+0x170>
 8005e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e10:	e03a      	b.n	8005e88 <_printf_i+0xa8>
 8005e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e16:	2b15      	cmp	r3, #21
 8005e18:	d8f6      	bhi.n	8005e08 <_printf_i+0x28>
 8005e1a:	a001      	add	r0, pc, #4	; (adr r0, 8005e20 <_printf_i+0x40>)
 8005e1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e8d 	.word	0x08005e8d
 8005e28:	08005e09 	.word	0x08005e09
 8005e2c:	08005e09 	.word	0x08005e09
 8005e30:	08005e09 	.word	0x08005e09
 8005e34:	08005e09 	.word	0x08005e09
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08005e09 	.word	0x08005e09
 8005e40:	08005e09 	.word	0x08005e09
 8005e44:	08005e09 	.word	0x08005e09
 8005e48:	08005e09 	.word	0x08005e09
 8005e4c:	08005f9b 	.word	0x08005f9b
 8005e50:	08005ebd 	.word	0x08005ebd
 8005e54:	08005f7d 	.word	0x08005f7d
 8005e58:	08005e09 	.word	0x08005e09
 8005e5c:	08005e09 	.word	0x08005e09
 8005e60:	08005fbd 	.word	0x08005fbd
 8005e64:	08005e09 	.word	0x08005e09
 8005e68:	08005ebd 	.word	0x08005ebd
 8005e6c:	08005e09 	.word	0x08005e09
 8005e70:	08005e09 	.word	0x08005e09
 8005e74:	08005f85 	.word	0x08005f85
 8005e78:	680b      	ldr	r3, [r1, #0]
 8005e7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	600a      	str	r2, [r1, #0]
 8005e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0a4      	b.n	8005fd6 <_printf_i+0x1f6>
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	6808      	ldr	r0, [r1, #0]
 8005e90:	062e      	lsls	r6, r5, #24
 8005e92:	f100 0304 	add.w	r3, r0, #4
 8005e96:	d50a      	bpl.n	8005eae <_printf_i+0xce>
 8005e98:	6805      	ldr	r5, [r0, #0]
 8005e9a:	600b      	str	r3, [r1, #0]
 8005e9c:	2d00      	cmp	r5, #0
 8005e9e:	da03      	bge.n	8005ea8 <_printf_i+0xc8>
 8005ea0:	232d      	movs	r3, #45	; 0x2d
 8005ea2:	426d      	negs	r5, r5
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	230a      	movs	r3, #10
 8005eaa:	485e      	ldr	r0, [pc, #376]	; (8006024 <_printf_i+0x244>)
 8005eac:	e019      	b.n	8005ee2 <_printf_i+0x102>
 8005eae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eb2:	6805      	ldr	r5, [r0, #0]
 8005eb4:	600b      	str	r3, [r1, #0]
 8005eb6:	bf18      	it	ne
 8005eb8:	b22d      	sxthne	r5, r5
 8005eba:	e7ef      	b.n	8005e9c <_printf_i+0xbc>
 8005ebc:	680b      	ldr	r3, [r1, #0]
 8005ebe:	6825      	ldr	r5, [r4, #0]
 8005ec0:	1d18      	adds	r0, r3, #4
 8005ec2:	6008      	str	r0, [r1, #0]
 8005ec4:	0628      	lsls	r0, r5, #24
 8005ec6:	d501      	bpl.n	8005ecc <_printf_i+0xec>
 8005ec8:	681d      	ldr	r5, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <_printf_i+0xf2>
 8005ecc:	0669      	lsls	r1, r5, #25
 8005ece:	d5fb      	bpl.n	8005ec8 <_printf_i+0xe8>
 8005ed0:	881d      	ldrh	r5, [r3, #0]
 8005ed2:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2308      	moveq	r3, #8
 8005ed8:	230a      	movne	r3, #10
 8005eda:	4852      	ldr	r0, [pc, #328]	; (8006024 <_printf_i+0x244>)
 8005edc:	2100      	movs	r1, #0
 8005ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee2:	6866      	ldr	r6, [r4, #4]
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	bfa8      	it	ge
 8005ee8:	6821      	ldrge	r1, [r4, #0]
 8005eea:	60a6      	str	r6, [r4, #8]
 8005eec:	bfa4      	itt	ge
 8005eee:	f021 0104 	bicge.w	r1, r1, #4
 8005ef2:	6021      	strge	r1, [r4, #0]
 8005ef4:	b90d      	cbnz	r5, 8005efa <_printf_i+0x11a>
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d04d      	beq.n	8005f96 <_printf_i+0x1b6>
 8005efa:	4616      	mov	r6, r2
 8005efc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f00:	fb03 5711 	mls	r7, r3, r1, r5
 8005f04:	5dc7      	ldrb	r7, [r0, r7]
 8005f06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0a:	462f      	mov	r7, r5
 8005f0c:	42bb      	cmp	r3, r7
 8005f0e:	460d      	mov	r5, r1
 8005f10:	d9f4      	bls.n	8005efc <_printf_i+0x11c>
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d10b      	bne.n	8005f2e <_printf_i+0x14e>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	07df      	lsls	r7, r3, #31
 8005f1a:	d508      	bpl.n	8005f2e <_printf_i+0x14e>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	4299      	cmp	r1, r3
 8005f22:	bfde      	ittt	le
 8005f24:	2330      	movle	r3, #48	; 0x30
 8005f26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f2e:	1b92      	subs	r2, r2, r6
 8005f30:	6122      	str	r2, [r4, #16]
 8005f32:	464b      	mov	r3, r9
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f8cd a000 	str.w	sl, [sp]
 8005f3c:	aa03      	add	r2, sp, #12
 8005f3e:	f7ff fedf 	bl	8005d00 <_printf_common>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d14c      	bne.n	8005fe0 <_printf_i+0x200>
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	b004      	add	sp, #16
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	4834      	ldr	r0, [pc, #208]	; (8006024 <_printf_i+0x244>)
 8005f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f56:	680e      	ldr	r6, [r1, #0]
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f5e:	061f      	lsls	r7, r3, #24
 8005f60:	600e      	str	r6, [r1, #0]
 8005f62:	d514      	bpl.n	8005f8e <_printf_i+0x1ae>
 8005f64:	07d9      	lsls	r1, r3, #31
 8005f66:	bf44      	itt	mi
 8005f68:	f043 0320 	orrmi.w	r3, r3, #32
 8005f6c:	6023      	strmi	r3, [r4, #0]
 8005f6e:	b91d      	cbnz	r5, 8005f78 <_printf_i+0x198>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	f023 0320 	bic.w	r3, r3, #32
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	2310      	movs	r3, #16
 8005f7a:	e7af      	b.n	8005edc <_printf_i+0xfc>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	f043 0320 	orr.w	r3, r3, #32
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	2378      	movs	r3, #120	; 0x78
 8005f86:	4828      	ldr	r0, [pc, #160]	; (8006028 <_printf_i+0x248>)
 8005f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f8c:	e7e3      	b.n	8005f56 <_printf_i+0x176>
 8005f8e:	065e      	lsls	r6, r3, #25
 8005f90:	bf48      	it	mi
 8005f92:	b2ad      	uxthmi	r5, r5
 8005f94:	e7e6      	b.n	8005f64 <_printf_i+0x184>
 8005f96:	4616      	mov	r6, r2
 8005f98:	e7bb      	b.n	8005f12 <_printf_i+0x132>
 8005f9a:	680b      	ldr	r3, [r1, #0]
 8005f9c:	6826      	ldr	r6, [r4, #0]
 8005f9e:	1d1d      	adds	r5, r3, #4
 8005fa0:	6960      	ldr	r0, [r4, #20]
 8005fa2:	600d      	str	r5, [r1, #0]
 8005fa4:	0635      	lsls	r5, r6, #24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	d501      	bpl.n	8005fae <_printf_i+0x1ce>
 8005faa:	6018      	str	r0, [r3, #0]
 8005fac:	e002      	b.n	8005fb4 <_printf_i+0x1d4>
 8005fae:	0671      	lsls	r1, r6, #25
 8005fb0:	d5fb      	bpl.n	8005faa <_printf_i+0x1ca>
 8005fb2:	8018      	strh	r0, [r3, #0]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	e7ba      	b.n	8005f32 <_printf_i+0x152>
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	600a      	str	r2, [r1, #0]
 8005fc2:	681e      	ldr	r6, [r3, #0]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	6862      	ldr	r2, [r4, #4]
 8005fca:	f000 f82f 	bl	800602c <memchr>
 8005fce:	b108      	cbz	r0, 8005fd4 <_printf_i+0x1f4>
 8005fd0:	1b80      	subs	r0, r0, r6
 8005fd2:	6060      	str	r0, [r4, #4]
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fde:	e7a8      	b.n	8005f32 <_printf_i+0x152>
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	47d0      	blx	sl
 8005fea:	3001      	adds	r0, #1
 8005fec:	d0ab      	beq.n	8005f46 <_printf_i+0x166>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	079b      	lsls	r3, r3, #30
 8005ff2:	d413      	bmi.n	800601c <_printf_i+0x23c>
 8005ff4:	68e0      	ldr	r0, [r4, #12]
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	4298      	cmp	r0, r3
 8005ffa:	bfb8      	it	lt
 8005ffc:	4618      	movlt	r0, r3
 8005ffe:	e7a4      	b.n	8005f4a <_printf_i+0x16a>
 8006000:	2301      	movs	r3, #1
 8006002:	4632      	mov	r2, r6
 8006004:	4649      	mov	r1, r9
 8006006:	4640      	mov	r0, r8
 8006008:	47d0      	blx	sl
 800600a:	3001      	adds	r0, #1
 800600c:	d09b      	beq.n	8005f46 <_printf_i+0x166>
 800600e:	3501      	adds	r5, #1
 8006010:	68e3      	ldr	r3, [r4, #12]
 8006012:	9903      	ldr	r1, [sp, #12]
 8006014:	1a5b      	subs	r3, r3, r1
 8006016:	42ab      	cmp	r3, r5
 8006018:	dcf2      	bgt.n	8006000 <_printf_i+0x220>
 800601a:	e7eb      	b.n	8005ff4 <_printf_i+0x214>
 800601c:	2500      	movs	r5, #0
 800601e:	f104 0619 	add.w	r6, r4, #25
 8006022:	e7f5      	b.n	8006010 <_printf_i+0x230>
 8006024:	08007217 	.word	0x08007217
 8006028:	08007228 	.word	0x08007228

0800602c <memchr>:
 800602c:	4603      	mov	r3, r0
 800602e:	b510      	push	{r4, lr}
 8006030:	b2c9      	uxtb	r1, r1
 8006032:	4402      	add	r2, r0
 8006034:	4293      	cmp	r3, r2
 8006036:	4618      	mov	r0, r3
 8006038:	d101      	bne.n	800603e <memchr+0x12>
 800603a:	2000      	movs	r0, #0
 800603c:	e003      	b.n	8006046 <memchr+0x1a>
 800603e:	7804      	ldrb	r4, [r0, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	428c      	cmp	r4, r1
 8006044:	d1f6      	bne.n	8006034 <memchr+0x8>
 8006046:	bd10      	pop	{r4, pc}

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	4291      	cmp	r1, r2
 800605c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <memmove>:
 8006064:	4288      	cmp	r0, r1
 8006066:	b510      	push	{r4, lr}
 8006068:	eb01 0402 	add.w	r4, r1, r2
 800606c:	d902      	bls.n	8006074 <memmove+0x10>
 800606e:	4284      	cmp	r4, r0
 8006070:	4623      	mov	r3, r4
 8006072:	d807      	bhi.n	8006084 <memmove+0x20>
 8006074:	1e43      	subs	r3, r0, #1
 8006076:	42a1      	cmp	r1, r4
 8006078:	d008      	beq.n	800608c <memmove+0x28>
 800607a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800607e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006082:	e7f8      	b.n	8006076 <memmove+0x12>
 8006084:	4601      	mov	r1, r0
 8006086:	4402      	add	r2, r0
 8006088:	428a      	cmp	r2, r1
 800608a:	d100      	bne.n	800608e <memmove+0x2a>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006096:	e7f7      	b.n	8006088 <memmove+0x24>

08006098 <_free_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4605      	mov	r5, r0
 800609c:	2900      	cmp	r1, #0
 800609e:	d043      	beq.n	8006128 <_free_r+0x90>
 80060a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a4:	1f0c      	subs	r4, r1, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfb8      	it	lt
 80060aa:	18e4      	addlt	r4, r4, r3
 80060ac:	f000 f8d0 	bl	8006250 <__malloc_lock>
 80060b0:	4a1e      	ldr	r2, [pc, #120]	; (800612c <_free_r+0x94>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	4610      	mov	r0, r2
 80060b6:	b933      	cbnz	r3, 80060c6 <_free_r+0x2e>
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	6014      	str	r4, [r2, #0]
 80060bc:	4628      	mov	r0, r5
 80060be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c2:	f000 b8cb 	b.w	800625c <__malloc_unlock>
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	d90a      	bls.n	80060e0 <_free_r+0x48>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	1862      	adds	r2, r4, r1
 80060ce:	4293      	cmp	r3, r2
 80060d0:	bf01      	itttt	eq
 80060d2:	681a      	ldreq	r2, [r3, #0]
 80060d4:	685b      	ldreq	r3, [r3, #4]
 80060d6:	1852      	addeq	r2, r2, r1
 80060d8:	6022      	streq	r2, [r4, #0]
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	6004      	str	r4, [r0, #0]
 80060de:	e7ed      	b.n	80060bc <_free_r+0x24>
 80060e0:	461a      	mov	r2, r3
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	b10b      	cbz	r3, 80060ea <_free_r+0x52>
 80060e6:	42a3      	cmp	r3, r4
 80060e8:	d9fa      	bls.n	80060e0 <_free_r+0x48>
 80060ea:	6811      	ldr	r1, [r2, #0]
 80060ec:	1850      	adds	r0, r2, r1
 80060ee:	42a0      	cmp	r0, r4
 80060f0:	d10b      	bne.n	800610a <_free_r+0x72>
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	4401      	add	r1, r0
 80060f6:	1850      	adds	r0, r2, r1
 80060f8:	4283      	cmp	r3, r0
 80060fa:	6011      	str	r1, [r2, #0]
 80060fc:	d1de      	bne.n	80060bc <_free_r+0x24>
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4401      	add	r1, r0
 8006104:	6011      	str	r1, [r2, #0]
 8006106:	6053      	str	r3, [r2, #4]
 8006108:	e7d8      	b.n	80060bc <_free_r+0x24>
 800610a:	d902      	bls.n	8006112 <_free_r+0x7a>
 800610c:	230c      	movs	r3, #12
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	e7d4      	b.n	80060bc <_free_r+0x24>
 8006112:	6820      	ldr	r0, [r4, #0]
 8006114:	1821      	adds	r1, r4, r0
 8006116:	428b      	cmp	r3, r1
 8006118:	bf01      	itttt	eq
 800611a:	6819      	ldreq	r1, [r3, #0]
 800611c:	685b      	ldreq	r3, [r3, #4]
 800611e:	1809      	addeq	r1, r1, r0
 8006120:	6021      	streq	r1, [r4, #0]
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	6054      	str	r4, [r2, #4]
 8006126:	e7c9      	b.n	80060bc <_free_r+0x24>
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop
 800612c:	20000094 	.word	0x20000094

08006130 <_malloc_r>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	1ccd      	adds	r5, r1, #3
 8006134:	f025 0503 	bic.w	r5, r5, #3
 8006138:	3508      	adds	r5, #8
 800613a:	2d0c      	cmp	r5, #12
 800613c:	bf38      	it	cc
 800613e:	250c      	movcc	r5, #12
 8006140:	2d00      	cmp	r5, #0
 8006142:	4606      	mov	r6, r0
 8006144:	db01      	blt.n	800614a <_malloc_r+0x1a>
 8006146:	42a9      	cmp	r1, r5
 8006148:	d903      	bls.n	8006152 <_malloc_r+0x22>
 800614a:	230c      	movs	r3, #12
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	2000      	movs	r0, #0
 8006150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006152:	f000 f87d 	bl	8006250 <__malloc_lock>
 8006156:	4921      	ldr	r1, [pc, #132]	; (80061dc <_malloc_r+0xac>)
 8006158:	680a      	ldr	r2, [r1, #0]
 800615a:	4614      	mov	r4, r2
 800615c:	b99c      	cbnz	r4, 8006186 <_malloc_r+0x56>
 800615e:	4f20      	ldr	r7, [pc, #128]	; (80061e0 <_malloc_r+0xb0>)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	b923      	cbnz	r3, 800616e <_malloc_r+0x3e>
 8006164:	4621      	mov	r1, r4
 8006166:	4630      	mov	r0, r6
 8006168:	f000 f862 	bl	8006230 <_sbrk_r>
 800616c:	6038      	str	r0, [r7, #0]
 800616e:	4629      	mov	r1, r5
 8006170:	4630      	mov	r0, r6
 8006172:	f000 f85d 	bl	8006230 <_sbrk_r>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	d123      	bne.n	80061c2 <_malloc_r+0x92>
 800617a:	230c      	movs	r3, #12
 800617c:	4630      	mov	r0, r6
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f000 f86c 	bl	800625c <__malloc_unlock>
 8006184:	e7e3      	b.n	800614e <_malloc_r+0x1e>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	1b5b      	subs	r3, r3, r5
 800618a:	d417      	bmi.n	80061bc <_malloc_r+0x8c>
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d903      	bls.n	8006198 <_malloc_r+0x68>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	441c      	add	r4, r3
 8006194:	6025      	str	r5, [r4, #0]
 8006196:	e004      	b.n	80061a2 <_malloc_r+0x72>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	42a2      	cmp	r2, r4
 800619c:	bf0c      	ite	eq
 800619e:	600b      	streq	r3, [r1, #0]
 80061a0:	6053      	strne	r3, [r2, #4]
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f85a 	bl	800625c <__malloc_unlock>
 80061a8:	f104 000b 	add.w	r0, r4, #11
 80061ac:	1d23      	adds	r3, r4, #4
 80061ae:	f020 0007 	bic.w	r0, r0, #7
 80061b2:	1ac2      	subs	r2, r0, r3
 80061b4:	d0cc      	beq.n	8006150 <_malloc_r+0x20>
 80061b6:	1a1b      	subs	r3, r3, r0
 80061b8:	50a3      	str	r3, [r4, r2]
 80061ba:	e7c9      	b.n	8006150 <_malloc_r+0x20>
 80061bc:	4622      	mov	r2, r4
 80061be:	6864      	ldr	r4, [r4, #4]
 80061c0:	e7cc      	b.n	800615c <_malloc_r+0x2c>
 80061c2:	1cc4      	adds	r4, r0, #3
 80061c4:	f024 0403 	bic.w	r4, r4, #3
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d0e3      	beq.n	8006194 <_malloc_r+0x64>
 80061cc:	1a21      	subs	r1, r4, r0
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 f82e 	bl	8006230 <_sbrk_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	d1dd      	bne.n	8006194 <_malloc_r+0x64>
 80061d8:	e7cf      	b.n	800617a <_malloc_r+0x4a>
 80061da:	bf00      	nop
 80061dc:	20000094 	.word	0x20000094
 80061e0:	20000098 	.word	0x20000098

080061e4 <_realloc_r>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	4607      	mov	r7, r0
 80061e8:	4614      	mov	r4, r2
 80061ea:	460e      	mov	r6, r1
 80061ec:	b921      	cbnz	r1, 80061f8 <_realloc_r+0x14>
 80061ee:	4611      	mov	r1, r2
 80061f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061f4:	f7ff bf9c 	b.w	8006130 <_malloc_r>
 80061f8:	b922      	cbnz	r2, 8006204 <_realloc_r+0x20>
 80061fa:	f7ff ff4d 	bl	8006098 <_free_r>
 80061fe:	4625      	mov	r5, r4
 8006200:	4628      	mov	r0, r5
 8006202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006204:	f000 f830 	bl	8006268 <_malloc_usable_size_r>
 8006208:	42a0      	cmp	r0, r4
 800620a:	d20f      	bcs.n	800622c <_realloc_r+0x48>
 800620c:	4621      	mov	r1, r4
 800620e:	4638      	mov	r0, r7
 8006210:	f7ff ff8e 	bl	8006130 <_malloc_r>
 8006214:	4605      	mov	r5, r0
 8006216:	2800      	cmp	r0, #0
 8006218:	d0f2      	beq.n	8006200 <_realloc_r+0x1c>
 800621a:	4631      	mov	r1, r6
 800621c:	4622      	mov	r2, r4
 800621e:	f7ff ff13 	bl	8006048 <memcpy>
 8006222:	4631      	mov	r1, r6
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ff37 	bl	8006098 <_free_r>
 800622a:	e7e9      	b.n	8006200 <_realloc_r+0x1c>
 800622c:	4635      	mov	r5, r6
 800622e:	e7e7      	b.n	8006200 <_realloc_r+0x1c>

08006230 <_sbrk_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	2300      	movs	r3, #0
 8006234:	4d05      	ldr	r5, [pc, #20]	; (800624c <_sbrk_r+0x1c>)
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fb fcb0 	bl	8001ba0 <_sbrk>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_sbrk_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_sbrk_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000170 	.word	0x20000170

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__malloc_lock+0x8>)
 8006252:	f000 b811 	b.w	8006278 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	20000178 	.word	0x20000178

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__malloc_unlock+0x8>)
 800625e:	f000 b80c 	b.w	800627a <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	20000178 	.word	0x20000178

08006268 <_malloc_usable_size_r>:
 8006268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626c:	1f18      	subs	r0, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfbc      	itt	lt
 8006272:	580b      	ldrlt	r3, [r1, r0]
 8006274:	18c0      	addlt	r0, r0, r3
 8006276:	4770      	bx	lr

08006278 <__retarget_lock_acquire_recursive>:
 8006278:	4770      	bx	lr

0800627a <__retarget_lock_release_recursive>:
 800627a:	4770      	bx	lr

0800627c <pow>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	461f      	mov	r7, r3
 8006282:	4680      	mov	r8, r0
 8006284:	4689      	mov	r9, r1
 8006286:	4616      	mov	r6, r2
 8006288:	f000 f8a6 	bl	80063d8 <__ieee754_pow>
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <pow+0x148>)
 800628e:	4604      	mov	r4, r0
 8006290:	f993 3000 	ldrsb.w	r3, [r3]
 8006294:	460d      	mov	r5, r1
 8006296:	3301      	adds	r3, #1
 8006298:	d015      	beq.n	80062c6 <pow+0x4a>
 800629a:	4632      	mov	r2, r6
 800629c:	463b      	mov	r3, r7
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa fbab 	bl	80009fc <__aeabi_dcmpun>
 80062a6:	b970      	cbnz	r0, 80062c6 <pow+0x4a>
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7fa fba4 	bl	80009fc <__aeabi_dcmpun>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	b148      	cbz	r0, 80062ce <pow+0x52>
 80062ba:	4630      	mov	r0, r6
 80062bc:	4639      	mov	r1, r7
 80062be:	f7fa fb6b 	bl	8000998 <__aeabi_dcmpeq>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d17b      	bne.n	80063be <pow+0x142>
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7fa fb61 	bl	8000998 <__aeabi_dcmpeq>
 80062d6:	b1e0      	cbz	r0, 8006312 <pow+0x96>
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	4630      	mov	r0, r6
 80062de:	4639      	mov	r1, r7
 80062e0:	f7fa fb5a 	bl	8000998 <__aeabi_dcmpeq>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d16a      	bne.n	80063be <pow+0x142>
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f000 fe39 	bl	8006f62 <finite>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d0e8      	beq.n	80062c6 <pow+0x4a>
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7fa fb56 	bl	80009ac <__aeabi_dcmplt>
 8006300:	2800      	cmp	r0, #0
 8006302:	d0e0      	beq.n	80062c6 <pow+0x4a>
 8006304:	f7ff fb4e 	bl	80059a4 <__errno>
 8006308:	2321      	movs	r3, #33	; 0x21
 800630a:	2400      	movs	r4, #0
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	4d2e      	ldr	r5, [pc, #184]	; (80063c8 <pow+0x14c>)
 8006310:	e7d9      	b.n	80062c6 <pow+0x4a>
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f000 fe24 	bl	8006f62 <finite>
 800631a:	bba8      	cbnz	r0, 8006388 <pow+0x10c>
 800631c:	4640      	mov	r0, r8
 800631e:	4649      	mov	r1, r9
 8006320:	f000 fe1f 	bl	8006f62 <finite>
 8006324:	b380      	cbz	r0, 8006388 <pow+0x10c>
 8006326:	4630      	mov	r0, r6
 8006328:	4639      	mov	r1, r7
 800632a:	f000 fe1a 	bl	8006f62 <finite>
 800632e:	b358      	cbz	r0, 8006388 <pow+0x10c>
 8006330:	4622      	mov	r2, r4
 8006332:	462b      	mov	r3, r5
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7fa fb60 	bl	80009fc <__aeabi_dcmpun>
 800633c:	b160      	cbz	r0, 8006358 <pow+0xdc>
 800633e:	f7ff fb31 	bl	80059a4 <__errno>
 8006342:	2321      	movs	r3, #33	; 0x21
 8006344:	2200      	movs	r2, #0
 8006346:	6003      	str	r3, [r0, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	f7fa f9e5 	bl	800071c <__aeabi_ddiv>
 8006352:	4604      	mov	r4, r0
 8006354:	460d      	mov	r5, r1
 8006356:	e7b6      	b.n	80062c6 <pow+0x4a>
 8006358:	f7ff fb24 	bl	80059a4 <__errno>
 800635c:	2322      	movs	r3, #34	; 0x22
 800635e:	2200      	movs	r2, #0
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	4649      	mov	r1, r9
 8006364:	2300      	movs	r3, #0
 8006366:	4640      	mov	r0, r8
 8006368:	f7fa fb20 	bl	80009ac <__aeabi_dcmplt>
 800636c:	2400      	movs	r4, #0
 800636e:	b148      	cbz	r0, 8006384 <pow+0x108>
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f000 fe02 	bl	8006f7c <rint>
 8006378:	4632      	mov	r2, r6
 800637a:	463b      	mov	r3, r7
 800637c:	f7fa fb0c 	bl	8000998 <__aeabi_dcmpeq>
 8006380:	2800      	cmp	r0, #0
 8006382:	d0c4      	beq.n	800630e <pow+0x92>
 8006384:	4d11      	ldr	r5, [pc, #68]	; (80063cc <pow+0x150>)
 8006386:	e79e      	b.n	80062c6 <pow+0x4a>
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7fa fb02 	bl	8000998 <__aeabi_dcmpeq>
 8006394:	2800      	cmp	r0, #0
 8006396:	d096      	beq.n	80062c6 <pow+0x4a>
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f000 fde1 	bl	8006f62 <finite>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d090      	beq.n	80062c6 <pow+0x4a>
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f000 fddb 	bl	8006f62 <finite>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d08a      	beq.n	80062c6 <pow+0x4a>
 80063b0:	f7ff faf8 	bl	80059a4 <__errno>
 80063b4:	2322      	movs	r3, #34	; 0x22
 80063b6:	2400      	movs	r4, #0
 80063b8:	2500      	movs	r5, #0
 80063ba:	6003      	str	r3, [r0, #0]
 80063bc:	e783      	b.n	80062c6 <pow+0x4a>
 80063be:	2400      	movs	r4, #0
 80063c0:	4d03      	ldr	r5, [pc, #12]	; (80063d0 <pow+0x154>)
 80063c2:	e780      	b.n	80062c6 <pow+0x4a>
 80063c4:	20000070 	.word	0x20000070
 80063c8:	fff00000 	.word	0xfff00000
 80063cc:	7ff00000 	.word	0x7ff00000
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	00000000 	.word	0x00000000

080063d8 <__ieee754_pow>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	b093      	sub	sp, #76	; 0x4c
 80063de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80063e6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80063ea:	ea55 0302 	orrs.w	r3, r5, r2
 80063ee:	4607      	mov	r7, r0
 80063f0:	4688      	mov	r8, r1
 80063f2:	f000 84bf 	beq.w	8006d74 <__ieee754_pow+0x99c>
 80063f6:	4b7e      	ldr	r3, [pc, #504]	; (80065f0 <__ieee754_pow+0x218>)
 80063f8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80063fc:	429c      	cmp	r4, r3
 80063fe:	4689      	mov	r9, r1
 8006400:	4682      	mov	sl, r0
 8006402:	dc09      	bgt.n	8006418 <__ieee754_pow+0x40>
 8006404:	d103      	bne.n	800640e <__ieee754_pow+0x36>
 8006406:	b978      	cbnz	r0, 8006428 <__ieee754_pow+0x50>
 8006408:	42a5      	cmp	r5, r4
 800640a:	dd02      	ble.n	8006412 <__ieee754_pow+0x3a>
 800640c:	e00c      	b.n	8006428 <__ieee754_pow+0x50>
 800640e:	429d      	cmp	r5, r3
 8006410:	dc02      	bgt.n	8006418 <__ieee754_pow+0x40>
 8006412:	429d      	cmp	r5, r3
 8006414:	d10e      	bne.n	8006434 <__ieee754_pow+0x5c>
 8006416:	b16a      	cbz	r2, 8006434 <__ieee754_pow+0x5c>
 8006418:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800641c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006420:	ea54 030a 	orrs.w	r3, r4, sl
 8006424:	f000 84a6 	beq.w	8006d74 <__ieee754_pow+0x99c>
 8006428:	4872      	ldr	r0, [pc, #456]	; (80065f4 <__ieee754_pow+0x21c>)
 800642a:	b013      	add	sp, #76	; 0x4c
 800642c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	f000 bd9e 	b.w	8006f70 <nan>
 8006434:	f1b9 0f00 	cmp.w	r9, #0
 8006438:	da39      	bge.n	80064ae <__ieee754_pow+0xd6>
 800643a:	4b6f      	ldr	r3, [pc, #444]	; (80065f8 <__ieee754_pow+0x220>)
 800643c:	429d      	cmp	r5, r3
 800643e:	dc54      	bgt.n	80064ea <__ieee754_pow+0x112>
 8006440:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006444:	429d      	cmp	r5, r3
 8006446:	f340 84a6 	ble.w	8006d96 <__ieee754_pow+0x9be>
 800644a:	152b      	asrs	r3, r5, #20
 800644c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006450:	2b14      	cmp	r3, #20
 8006452:	dd0f      	ble.n	8006474 <__ieee754_pow+0x9c>
 8006454:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006458:	fa22 f103 	lsr.w	r1, r2, r3
 800645c:	fa01 f303 	lsl.w	r3, r1, r3
 8006460:	4293      	cmp	r3, r2
 8006462:	f040 8498 	bne.w	8006d96 <__ieee754_pow+0x9be>
 8006466:	f001 0101 	and.w	r1, r1, #1
 800646a:	f1c1 0302 	rsb	r3, r1, #2
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	b182      	cbz	r2, 8006494 <__ieee754_pow+0xbc>
 8006472:	e05e      	b.n	8006532 <__ieee754_pow+0x15a>
 8006474:	2a00      	cmp	r2, #0
 8006476:	d15a      	bne.n	800652e <__ieee754_pow+0x156>
 8006478:	f1c3 0314 	rsb	r3, r3, #20
 800647c:	fa45 f103 	asr.w	r1, r5, r3
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	42ab      	cmp	r3, r5
 8006486:	f040 8483 	bne.w	8006d90 <__ieee754_pow+0x9b8>
 800648a:	f001 0101 	and.w	r1, r1, #1
 800648e:	f1c1 0302 	rsb	r3, r1, #2
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4b59      	ldr	r3, [pc, #356]	; (80065fc <__ieee754_pow+0x224>)
 8006496:	429d      	cmp	r5, r3
 8006498:	d130      	bne.n	80064fc <__ieee754_pow+0x124>
 800649a:	2e00      	cmp	r6, #0
 800649c:	f280 8474 	bge.w	8006d88 <__ieee754_pow+0x9b0>
 80064a0:	463a      	mov	r2, r7
 80064a2:	4643      	mov	r3, r8
 80064a4:	2000      	movs	r0, #0
 80064a6:	4955      	ldr	r1, [pc, #340]	; (80065fc <__ieee754_pow+0x224>)
 80064a8:	f7fa f938 	bl	800071c <__aeabi_ddiv>
 80064ac:	e02f      	b.n	800650e <__ieee754_pow+0x136>
 80064ae:	2300      	movs	r3, #0
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	d13d      	bne.n	8006532 <__ieee754_pow+0x15a>
 80064b6:	4b4e      	ldr	r3, [pc, #312]	; (80065f0 <__ieee754_pow+0x218>)
 80064b8:	429d      	cmp	r5, r3
 80064ba:	d1eb      	bne.n	8006494 <__ieee754_pow+0xbc>
 80064bc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80064c0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80064c4:	ea53 030a 	orrs.w	r3, r3, sl
 80064c8:	f000 8454 	beq.w	8006d74 <__ieee754_pow+0x99c>
 80064cc:	4b4c      	ldr	r3, [pc, #304]	; (8006600 <__ieee754_pow+0x228>)
 80064ce:	429c      	cmp	r4, r3
 80064d0:	dd0d      	ble.n	80064ee <__ieee754_pow+0x116>
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	f280 8454 	bge.w	8006d80 <__ieee754_pow+0x9a8>
 80064d8:	f04f 0b00 	mov.w	fp, #0
 80064dc:	f04f 0c00 	mov.w	ip, #0
 80064e0:	4658      	mov	r0, fp
 80064e2:	4661      	mov	r1, ip
 80064e4:	b013      	add	sp, #76	; 0x4c
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	2302      	movs	r3, #2
 80064ec:	e7e0      	b.n	80064b0 <__ieee754_pow+0xd8>
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	daf2      	bge.n	80064d8 <__ieee754_pow+0x100>
 80064f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80064f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80064fa:	e7f1      	b.n	80064e0 <__ieee754_pow+0x108>
 80064fc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006500:	d108      	bne.n	8006514 <__ieee754_pow+0x13c>
 8006502:	463a      	mov	r2, r7
 8006504:	4643      	mov	r3, r8
 8006506:	4638      	mov	r0, r7
 8006508:	4641      	mov	r1, r8
 800650a:	f7f9 ffdd 	bl	80004c8 <__aeabi_dmul>
 800650e:	4683      	mov	fp, r0
 8006510:	468c      	mov	ip, r1
 8006512:	e7e5      	b.n	80064e0 <__ieee754_pow+0x108>
 8006514:	4b3b      	ldr	r3, [pc, #236]	; (8006604 <__ieee754_pow+0x22c>)
 8006516:	429e      	cmp	r6, r3
 8006518:	d10b      	bne.n	8006532 <__ieee754_pow+0x15a>
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	db08      	blt.n	8006532 <__ieee754_pow+0x15a>
 8006520:	4638      	mov	r0, r7
 8006522:	4641      	mov	r1, r8
 8006524:	b013      	add	sp, #76	; 0x4c
 8006526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f000 bc6b 	b.w	8006e04 <__ieee754_sqrt>
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4638      	mov	r0, r7
 8006534:	4641      	mov	r1, r8
 8006536:	f000 fd11 	bl	8006f5c <fabs>
 800653a:	4683      	mov	fp, r0
 800653c:	468c      	mov	ip, r1
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	d129      	bne.n	8006598 <__ieee754_pow+0x1c0>
 8006544:	b124      	cbz	r4, 8006550 <__ieee754_pow+0x178>
 8006546:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <__ieee754_pow+0x224>)
 8006548:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800654c:	429a      	cmp	r2, r3
 800654e:	d123      	bne.n	8006598 <__ieee754_pow+0x1c0>
 8006550:	2e00      	cmp	r6, #0
 8006552:	da07      	bge.n	8006564 <__ieee754_pow+0x18c>
 8006554:	465a      	mov	r2, fp
 8006556:	4663      	mov	r3, ip
 8006558:	2000      	movs	r0, #0
 800655a:	4928      	ldr	r1, [pc, #160]	; (80065fc <__ieee754_pow+0x224>)
 800655c:	f7fa f8de 	bl	800071c <__aeabi_ddiv>
 8006560:	4683      	mov	fp, r0
 8006562:	468c      	mov	ip, r1
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	daba      	bge.n	80064e0 <__ieee754_pow+0x108>
 800656a:	9b00      	ldr	r3, [sp, #0]
 800656c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006570:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006574:	4323      	orrs	r3, r4
 8006576:	d108      	bne.n	800658a <__ieee754_pow+0x1b2>
 8006578:	465a      	mov	r2, fp
 800657a:	4663      	mov	r3, ip
 800657c:	4658      	mov	r0, fp
 800657e:	4661      	mov	r1, ip
 8006580:	f7f9 fdea 	bl	8000158 <__aeabi_dsub>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	e78e      	b.n	80064a8 <__ieee754_pow+0xd0>
 800658a:	9b00      	ldr	r3, [sp, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d1a7      	bne.n	80064e0 <__ieee754_pow+0x108>
 8006590:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006594:	469c      	mov	ip, r3
 8006596:	e7a3      	b.n	80064e0 <__ieee754_pow+0x108>
 8006598:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800659c:	3b01      	subs	r3, #1
 800659e:	930c      	str	r3, [sp, #48]	; 0x30
 80065a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	d104      	bne.n	80065b2 <__ieee754_pow+0x1da>
 80065a8:	463a      	mov	r2, r7
 80065aa:	4643      	mov	r3, r8
 80065ac:	4638      	mov	r0, r7
 80065ae:	4641      	mov	r1, r8
 80065b0:	e7e6      	b.n	8006580 <__ieee754_pow+0x1a8>
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <__ieee754_pow+0x230>)
 80065b4:	429d      	cmp	r5, r3
 80065b6:	f340 80f9 	ble.w	80067ac <__ieee754_pow+0x3d4>
 80065ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80065be:	429d      	cmp	r5, r3
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <__ieee754_pow+0x228>)
 80065c2:	dd09      	ble.n	80065d8 <__ieee754_pow+0x200>
 80065c4:	429c      	cmp	r4, r3
 80065c6:	dc0c      	bgt.n	80065e2 <__ieee754_pow+0x20a>
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	da85      	bge.n	80064d8 <__ieee754_pow+0x100>
 80065cc:	a306      	add	r3, pc, #24	; (adr r3, 80065e8 <__ieee754_pow+0x210>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	4610      	mov	r0, r2
 80065d4:	4619      	mov	r1, r3
 80065d6:	e798      	b.n	800650a <__ieee754_pow+0x132>
 80065d8:	429c      	cmp	r4, r3
 80065da:	dbf5      	blt.n	80065c8 <__ieee754_pow+0x1f0>
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <__ieee754_pow+0x224>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	dd14      	ble.n	800660c <__ieee754_pow+0x234>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	dcf2      	bgt.n	80065cc <__ieee754_pow+0x1f4>
 80065e6:	e777      	b.n	80064d8 <__ieee754_pow+0x100>
 80065e8:	8800759c 	.word	0x8800759c
 80065ec:	7e37e43c 	.word	0x7e37e43c
 80065f0:	7ff00000 	.word	0x7ff00000
 80065f4:	0800720b 	.word	0x0800720b
 80065f8:	433fffff 	.word	0x433fffff
 80065fc:	3ff00000 	.word	0x3ff00000
 8006600:	3fefffff 	.word	0x3fefffff
 8006604:	3fe00000 	.word	0x3fe00000
 8006608:	41e00000 	.word	0x41e00000
 800660c:	4661      	mov	r1, ip
 800660e:	2200      	movs	r2, #0
 8006610:	4658      	mov	r0, fp
 8006612:	4b61      	ldr	r3, [pc, #388]	; (8006798 <__ieee754_pow+0x3c0>)
 8006614:	f7f9 fda0 	bl	8000158 <__aeabi_dsub>
 8006618:	a355      	add	r3, pc, #340	; (adr r3, 8006770 <__ieee754_pow+0x398>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
 8006622:	f7f9 ff51 	bl	80004c8 <__aeabi_dmul>
 8006626:	a354      	add	r3, pc, #336	; (adr r3, 8006778 <__ieee754_pow+0x3a0>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7f9 ff48 	bl	80004c8 <__aeabi_dmul>
 8006638:	2200      	movs	r2, #0
 800663a:	4682      	mov	sl, r0
 800663c:	468b      	mov	fp, r1
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	4b56      	ldr	r3, [pc, #344]	; (800679c <__ieee754_pow+0x3c4>)
 8006644:	f7f9 ff40 	bl	80004c8 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	a14c      	add	r1, pc, #304	; (adr r1, 8006780 <__ieee754_pow+0x3a8>)
 800664e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006652:	f7f9 fd81 	bl	8000158 <__aeabi_dsub>
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	f7f9 ff35 	bl	80004c8 <__aeabi_dmul>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	2000      	movs	r0, #0
 8006664:	494e      	ldr	r1, [pc, #312]	; (80067a0 <__ieee754_pow+0x3c8>)
 8006666:	f7f9 fd77 	bl	8000158 <__aeabi_dsub>
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	4680      	mov	r8, r0
 8006670:	4689      	mov	r9, r1
 8006672:	4620      	mov	r0, r4
 8006674:	4629      	mov	r1, r5
 8006676:	f7f9 ff27 	bl	80004c8 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4640      	mov	r0, r8
 8006680:	4649      	mov	r1, r9
 8006682:	f7f9 ff21 	bl	80004c8 <__aeabi_dmul>
 8006686:	a340      	add	r3, pc, #256	; (adr r3, 8006788 <__ieee754_pow+0x3b0>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 ff1c 	bl	80004c8 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4650      	mov	r0, sl
 8006696:	4659      	mov	r1, fp
 8006698:	f7f9 fd5e 	bl	8000158 <__aeabi_dsub>
 800669c:	f04f 0a00 	mov.w	sl, #0
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7f9 fd56 	bl	800015c <__adddf3>
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	4650      	mov	r0, sl
 80066b6:	468b      	mov	fp, r1
 80066b8:	f7f9 fd4e 	bl	8000158 <__aeabi_dsub>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4620      	mov	r0, r4
 80066c2:	4629      	mov	r1, r5
 80066c4:	f7f9 fd48 	bl	8000158 <__aeabi_dsub>
 80066c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066cc:	9b00      	ldr	r3, [sp, #0]
 80066ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d0:	3b01      	subs	r3, #1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f04f 0600 	mov.w	r6, #0
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	bf0c      	ite	eq
 80066de:	4b31      	ldreq	r3, [pc, #196]	; (80067a4 <__ieee754_pow+0x3cc>)
 80066e0:	4b2d      	ldrne	r3, [pc, #180]	; (8006798 <__ieee754_pow+0x3c0>)
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	e9cd 2300 	strd	r2, r3, [sp]
 80066ee:	4632      	mov	r2, r6
 80066f0:	463b      	mov	r3, r7
 80066f2:	f7f9 fd31 	bl	8000158 <__aeabi_dsub>
 80066f6:	4652      	mov	r2, sl
 80066f8:	465b      	mov	r3, fp
 80066fa:	f7f9 fee5 	bl	80004c8 <__aeabi_dmul>
 80066fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	4620      	mov	r0, r4
 8006708:	4629      	mov	r1, r5
 800670a:	f7f9 fedd 	bl	80004c8 <__aeabi_dmul>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fd21 	bl	800015c <__adddf3>
 800671a:	4632      	mov	r2, r6
 800671c:	463b      	mov	r3, r7
 800671e:	4680      	mov	r8, r0
 8006720:	4689      	mov	r9, r1
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	f7f9 fecf 	bl	80004c8 <__aeabi_dmul>
 800672a:	4604      	mov	r4, r0
 800672c:	460d      	mov	r5, r1
 800672e:	460b      	mov	r3, r1
 8006730:	4602      	mov	r2, r0
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800673a:	f7f9 fd0f 	bl	800015c <__adddf3>
 800673e:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <__ieee754_pow+0x3d0>)
 8006740:	4682      	mov	sl, r0
 8006742:	4299      	cmp	r1, r3
 8006744:	460f      	mov	r7, r1
 8006746:	460e      	mov	r6, r1
 8006748:	f340 82ed 	ble.w	8006d26 <__ieee754_pow+0x94e>
 800674c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006750:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006754:	4303      	orrs	r3, r0
 8006756:	f000 81e7 	beq.w	8006b28 <__ieee754_pow+0x750>
 800675a:	a30d      	add	r3, pc, #52	; (adr r3, 8006790 <__ieee754_pow+0x3b8>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006764:	f7f9 feb0 	bl	80004c8 <__aeabi_dmul>
 8006768:	a309      	add	r3, pc, #36	; (adr r3, 8006790 <__ieee754_pow+0x3b8>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	e6cc      	b.n	800650a <__ieee754_pow+0x132>
 8006770:	60000000 	.word	0x60000000
 8006774:	3ff71547 	.word	0x3ff71547
 8006778:	f85ddf44 	.word	0xf85ddf44
 800677c:	3e54ae0b 	.word	0x3e54ae0b
 8006780:	55555555 	.word	0x55555555
 8006784:	3fd55555 	.word	0x3fd55555
 8006788:	652b82fe 	.word	0x652b82fe
 800678c:	3ff71547 	.word	0x3ff71547
 8006790:	8800759c 	.word	0x8800759c
 8006794:	7e37e43c 	.word	0x7e37e43c
 8006798:	3ff00000 	.word	0x3ff00000
 800679c:	3fd00000 	.word	0x3fd00000
 80067a0:	3fe00000 	.word	0x3fe00000
 80067a4:	bff00000 	.word	0xbff00000
 80067a8:	408fffff 	.word	0x408fffff
 80067ac:	4bd4      	ldr	r3, [pc, #848]	; (8006b00 <__ieee754_pow+0x728>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	ea09 0303 	and.w	r3, r9, r3
 80067b4:	b943      	cbnz	r3, 80067c8 <__ieee754_pow+0x3f0>
 80067b6:	4658      	mov	r0, fp
 80067b8:	4661      	mov	r1, ip
 80067ba:	4bd2      	ldr	r3, [pc, #840]	; (8006b04 <__ieee754_pow+0x72c>)
 80067bc:	f7f9 fe84 	bl	80004c8 <__aeabi_dmul>
 80067c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80067c4:	4683      	mov	fp, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	1523      	asrs	r3, r4, #20
 80067ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067ce:	4413      	add	r3, r2
 80067d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d2:	4bcd      	ldr	r3, [pc, #820]	; (8006b08 <__ieee754_pow+0x730>)
 80067d4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067d8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80067dc:	429c      	cmp	r4, r3
 80067de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80067e2:	dd08      	ble.n	80067f6 <__ieee754_pow+0x41e>
 80067e4:	4bc9      	ldr	r3, [pc, #804]	; (8006b0c <__ieee754_pow+0x734>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	f340 819c 	ble.w	8006b24 <__ieee754_pow+0x74c>
 80067ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80067f2:	3301      	adds	r3, #1
 80067f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f6:	2600      	movs	r6, #0
 80067f8:	00f3      	lsls	r3, r6, #3
 80067fa:	930d      	str	r3, [sp, #52]	; 0x34
 80067fc:	4bc4      	ldr	r3, [pc, #784]	; (8006b10 <__ieee754_pow+0x738>)
 80067fe:	4658      	mov	r0, fp
 8006800:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006804:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006808:	4629      	mov	r1, r5
 800680a:	461a      	mov	r2, r3
 800680c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006810:	4623      	mov	r3, r4
 8006812:	f7f9 fca1 	bl	8000158 <__aeabi_dsub>
 8006816:	46da      	mov	sl, fp
 8006818:	462b      	mov	r3, r5
 800681a:	4652      	mov	r2, sl
 800681c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006820:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006824:	f7f9 fc9a 	bl	800015c <__adddf3>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	2000      	movs	r0, #0
 800682e:	49b9      	ldr	r1, [pc, #740]	; (8006b14 <__ieee754_pow+0x73c>)
 8006830:	f7f9 ff74 	bl	800071c <__aeabi_ddiv>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800683c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006840:	f7f9 fe42 	bl	80004c8 <__aeabi_dmul>
 8006844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006848:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800684c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006850:	2300      	movs	r3, #0
 8006852:	2200      	movs	r2, #0
 8006854:	46ab      	mov	fp, r5
 8006856:	106d      	asrs	r5, r5, #1
 8006858:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006862:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006866:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	4614      	mov	r4, r2
 8006870:	461d      	mov	r5, r3
 8006872:	f7f9 fe29 	bl	80004c8 <__aeabi_dmul>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800687e:	f7f9 fc6b 	bl	8000158 <__aeabi_dsub>
 8006882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7f9 fc63 	bl	8000158 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7f9 fc5d 	bl	8000158 <__aeabi_dsub>
 800689e:	4642      	mov	r2, r8
 80068a0:	464b      	mov	r3, r9
 80068a2:	f7f9 fe11 	bl	80004c8 <__aeabi_dmul>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fc53 	bl	8000158 <__aeabi_dsub>
 80068b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068b6:	f7f9 fe07 	bl	80004c8 <__aeabi_dmul>
 80068ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	f7f9 fdff 	bl	80004c8 <__aeabi_dmul>
 80068ca:	a37b      	add	r3, pc, #492	; (adr r3, 8006ab8 <__ieee754_pow+0x6e0>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	f7f9 fdf8 	bl	80004c8 <__aeabi_dmul>
 80068d8:	a379      	add	r3, pc, #484	; (adr r3, 8006ac0 <__ieee754_pow+0x6e8>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fc3d 	bl	800015c <__adddf3>
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f7f9 fdef 	bl	80004c8 <__aeabi_dmul>
 80068ea:	a377      	add	r3, pc, #476	; (adr r3, 8006ac8 <__ieee754_pow+0x6f0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fc34 	bl	800015c <__adddf3>
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	f7f9 fde6 	bl	80004c8 <__aeabi_dmul>
 80068fc:	a374      	add	r3, pc, #464	; (adr r3, 8006ad0 <__ieee754_pow+0x6f8>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fc2b 	bl	800015c <__adddf3>
 8006906:	4622      	mov	r2, r4
 8006908:	462b      	mov	r3, r5
 800690a:	f7f9 fddd 	bl	80004c8 <__aeabi_dmul>
 800690e:	a372      	add	r3, pc, #456	; (adr r3, 8006ad8 <__ieee754_pow+0x700>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f7f9 fc22 	bl	800015c <__adddf3>
 8006918:	4622      	mov	r2, r4
 800691a:	462b      	mov	r3, r5
 800691c:	f7f9 fdd4 	bl	80004c8 <__aeabi_dmul>
 8006920:	a36f      	add	r3, pc, #444	; (adr r3, 8006ae0 <__ieee754_pow+0x708>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fc19 	bl	800015c <__adddf3>
 800692a:	4622      	mov	r2, r4
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	462b      	mov	r3, r5
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fdc7 	bl	80004c8 <__aeabi_dmul>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4630      	mov	r0, r6
 8006940:	4639      	mov	r1, r7
 8006942:	f7f9 fdc1 	bl	80004c8 <__aeabi_dmul>
 8006946:	4604      	mov	r4, r0
 8006948:	460d      	mov	r5, r1
 800694a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	f7f9 fc03 	bl	800015c <__adddf3>
 8006956:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800695a:	f7f9 fdb5 	bl	80004c8 <__aeabi_dmul>
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f7f9 fbfb 	bl	800015c <__adddf3>
 8006966:	4642      	mov	r2, r8
 8006968:	4606      	mov	r6, r0
 800696a:	460f      	mov	r7, r1
 800696c:	464b      	mov	r3, r9
 800696e:	4640      	mov	r0, r8
 8006970:	4649      	mov	r1, r9
 8006972:	f7f9 fda9 	bl	80004c8 <__aeabi_dmul>
 8006976:	2200      	movs	r2, #0
 8006978:	4b67      	ldr	r3, [pc, #412]	; (8006b18 <__ieee754_pow+0x740>)
 800697a:	4682      	mov	sl, r0
 800697c:	468b      	mov	fp, r1
 800697e:	f7f9 fbed 	bl	800015c <__adddf3>
 8006982:	4632      	mov	r2, r6
 8006984:	463b      	mov	r3, r7
 8006986:	f7f9 fbe9 	bl	800015c <__adddf3>
 800698a:	9c04      	ldr	r4, [sp, #16]
 800698c:	460d      	mov	r5, r1
 800698e:	4622      	mov	r2, r4
 8006990:	460b      	mov	r3, r1
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7f9 fd97 	bl	80004c8 <__aeabi_dmul>
 800699a:	2200      	movs	r2, #0
 800699c:	4680      	mov	r8, r0
 800699e:	4689      	mov	r9, r1
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <__ieee754_pow+0x740>)
 80069a6:	f7f9 fbd7 	bl	8000158 <__aeabi_dsub>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7f9 fbd3 	bl	8000158 <__aeabi_dsub>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fbcd 	bl	8000158 <__aeabi_dsub>
 80069be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069c2:	f7f9 fd81 	bl	80004c8 <__aeabi_dmul>
 80069c6:	4622      	mov	r2, r4
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069d0:	462b      	mov	r3, r5
 80069d2:	f7f9 fd79 	bl	80004c8 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 fbbd 	bl	800015c <__adddf3>
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fbb5 	bl	800015c <__adddf3>
 80069f2:	a33d      	add	r3, pc, #244	; (adr r3, 8006ae8 <__ieee754_pow+0x710>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	9c04      	ldr	r4, [sp, #16]
 80069fa:	460d      	mov	r5, r1
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7f9 fd63 	bl	80004c8 <__aeabi_dmul>
 8006a02:	4642      	mov	r2, r8
 8006a04:	464b      	mov	r3, r9
 8006a06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f7f9 fba3 	bl	8000158 <__aeabi_dsub>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 fb9d 	bl	8000158 <__aeabi_dsub>
 8006a1e:	a334      	add	r3, pc, #208	; (adr r3, 8006af0 <__ieee754_pow+0x718>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fd50 	bl	80004c8 <__aeabi_dmul>
 8006a28:	a333      	add	r3, pc, #204	; (adr r3, 8006af8 <__ieee754_pow+0x720>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7f9 fd47 	bl	80004c8 <__aeabi_dmul>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4630      	mov	r0, r6
 8006a40:	4639      	mov	r1, r7
 8006a42:	f7f9 fb8b 	bl	800015c <__adddf3>
 8006a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a48:	4b34      	ldr	r3, [pc, #208]	; (8006b1c <__ieee754_pow+0x744>)
 8006a4a:	4413      	add	r3, r2
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fb84 	bl	800015c <__adddf3>
 8006a54:	4680      	mov	r8, r0
 8006a56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a58:	4689      	mov	r9, r1
 8006a5a:	f7f9 fccb 	bl	80003f4 <__aeabi_i2d>
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a64:	4b2e      	ldr	r3, [pc, #184]	; (8006b20 <__ieee754_pow+0x748>)
 8006a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	f7f9 fb72 	bl	800015c <__adddf3>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 fb6e 	bl	800015c <__adddf3>
 8006a80:	4622      	mov	r2, r4
 8006a82:	462b      	mov	r3, r5
 8006a84:	f7f9 fb6a 	bl	800015c <__adddf3>
 8006a88:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	462b      	mov	r3, r5
 8006a90:	4650      	mov	r0, sl
 8006a92:	468b      	mov	fp, r1
 8006a94:	f7f9 fb60 	bl	8000158 <__aeabi_dsub>
 8006a98:	4632      	mov	r2, r6
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	f7f9 fb5c 	bl	8000158 <__aeabi_dsub>
 8006aa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aa4:	f7f9 fb58 	bl	8000158 <__aeabi_dsub>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4640      	mov	r0, r8
 8006aae:	4649      	mov	r1, r9
 8006ab0:	e608      	b.n	80066c4 <__ieee754_pow+0x2ec>
 8006ab2:	bf00      	nop
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	4a454eef 	.word	0x4a454eef
 8006abc:	3fca7e28 	.word	0x3fca7e28
 8006ac0:	93c9db65 	.word	0x93c9db65
 8006ac4:	3fcd864a 	.word	0x3fcd864a
 8006ac8:	a91d4101 	.word	0xa91d4101
 8006acc:	3fd17460 	.word	0x3fd17460
 8006ad0:	518f264d 	.word	0x518f264d
 8006ad4:	3fd55555 	.word	0x3fd55555
 8006ad8:	db6fabff 	.word	0xdb6fabff
 8006adc:	3fdb6db6 	.word	0x3fdb6db6
 8006ae0:	33333303 	.word	0x33333303
 8006ae4:	3fe33333 	.word	0x3fe33333
 8006ae8:	e0000000 	.word	0xe0000000
 8006aec:	3feec709 	.word	0x3feec709
 8006af0:	dc3a03fd 	.word	0xdc3a03fd
 8006af4:	3feec709 	.word	0x3feec709
 8006af8:	145b01f5 	.word	0x145b01f5
 8006afc:	be3e2fe0 	.word	0xbe3e2fe0
 8006b00:	7ff00000 	.word	0x7ff00000
 8006b04:	43400000 	.word	0x43400000
 8006b08:	0003988e 	.word	0x0003988e
 8006b0c:	000bb679 	.word	0x000bb679
 8006b10:	08007240 	.word	0x08007240
 8006b14:	3ff00000 	.word	0x3ff00000
 8006b18:	40080000 	.word	0x40080000
 8006b1c:	08007260 	.word	0x08007260
 8006b20:	08007250 	.word	0x08007250
 8006b24:	2601      	movs	r6, #1
 8006b26:	e667      	b.n	80067f8 <__ieee754_pow+0x420>
 8006b28:	a39d      	add	r3, pc, #628	; (adr r3, 8006da0 <__ieee754_pow+0x9c8>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4649      	mov	r1, r9
 8006b32:	f7f9 fb13 	bl	800015c <__adddf3>
 8006b36:	4622      	mov	r2, r4
 8006b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	4650      	mov	r0, sl
 8006b40:	4639      	mov	r1, r7
 8006b42:	f7f9 fb09 	bl	8000158 <__aeabi_dsub>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b4e:	f7f9 ff4b 	bl	80009e8 <__aeabi_dcmpgt>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f47f ae01 	bne.w	800675a <__ieee754_pow+0x382>
 8006b58:	4aa5      	ldr	r2, [pc, #660]	; (8006df0 <__ieee754_pow+0xa18>)
 8006b5a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f340 8103 	ble.w	8006d6a <__ieee754_pow+0x992>
 8006b64:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b68:	2000      	movs	r0, #0
 8006b6a:	151b      	asrs	r3, r3, #20
 8006b6c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b70:	fa4a f303 	asr.w	r3, sl, r3
 8006b74:	4433      	add	r3, r6
 8006b76:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006b7a:	4f9e      	ldr	r7, [pc, #632]	; (8006df4 <__ieee754_pow+0xa1c>)
 8006b7c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006b80:	4117      	asrs	r7, r2
 8006b82:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006b86:	ea23 0107 	bic.w	r1, r3, r7
 8006b8a:	f1c2 0214 	rsb	r2, r2, #20
 8006b8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006b92:	460b      	mov	r3, r1
 8006b94:	fa4a fa02 	asr.w	sl, sl, r2
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	bfb8      	it	lt
 8006ba2:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ba6:	f7f9 fad7 	bl	8000158 <__aeabi_dsub>
 8006baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	f7f9 fad0 	bl	800015c <__adddf3>
 8006bbc:	a37a      	add	r3, pc, #488	; (adr r3, 8006da8 <__ieee754_pow+0x9d0>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	f7f9 fc7f 	bl	80004c8 <__aeabi_dmul>
 8006bca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 fabf 	bl	8000158 <__aeabi_dsub>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 fab9 	bl	8000158 <__aeabi_dsub>
 8006be6:	a372      	add	r3, pc, #456	; (adr r3, 8006db0 <__ieee754_pow+0x9d8>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fc6c 	bl	80004c8 <__aeabi_dmul>
 8006bf0:	a371      	add	r3, pc, #452	; (adr r3, 8006db8 <__ieee754_pow+0x9e0>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fc63 	bl	80004c8 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4640      	mov	r0, r8
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f7f9 faa7 	bl	800015c <__adddf3>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4630      	mov	r0, r6
 8006c18:	4639      	mov	r1, r7
 8006c1a:	f7f9 fa9f 	bl	800015c <__adddf3>
 8006c1e:	4632      	mov	r2, r6
 8006c20:	463b      	mov	r3, r7
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	f7f9 fa97 	bl	8000158 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 fa91 	bl	8000158 <__aeabi_dsub>
 8006c36:	4642      	mov	r2, r8
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 fc41 	bl	80004c8 <__aeabi_dmul>
 8006c46:	a35e      	add	r3, pc, #376	; (adr r3, 8006dc0 <__ieee754_pow+0x9e8>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	f7f9 fc3a 	bl	80004c8 <__aeabi_dmul>
 8006c54:	a35c      	add	r3, pc, #368	; (adr r3, 8006dc8 <__ieee754_pow+0x9f0>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fa7d 	bl	8000158 <__aeabi_dsub>
 8006c5e:	4622      	mov	r2, r4
 8006c60:	462b      	mov	r3, r5
 8006c62:	f7f9 fc31 	bl	80004c8 <__aeabi_dmul>
 8006c66:	a35a      	add	r3, pc, #360	; (adr r3, 8006dd0 <__ieee754_pow+0x9f8>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fa76 	bl	800015c <__adddf3>
 8006c70:	4622      	mov	r2, r4
 8006c72:	462b      	mov	r3, r5
 8006c74:	f7f9 fc28 	bl	80004c8 <__aeabi_dmul>
 8006c78:	a357      	add	r3, pc, #348	; (adr r3, 8006dd8 <__ieee754_pow+0xa00>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fa6b 	bl	8000158 <__aeabi_dsub>
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	f7f9 fc1f 	bl	80004c8 <__aeabi_dmul>
 8006c8a:	a355      	add	r3, pc, #340	; (adr r3, 8006de0 <__ieee754_pow+0xa08>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fa64 	bl	800015c <__adddf3>
 8006c94:	4622      	mov	r2, r4
 8006c96:	462b      	mov	r3, r5
 8006c98:	f7f9 fc16 	bl	80004c8 <__aeabi_dmul>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 fa58 	bl	8000158 <__aeabi_dsub>
 8006ca8:	4604      	mov	r4, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 fc08 	bl	80004c8 <__aeabi_dmul>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7f9 fa47 	bl	8000158 <__aeabi_dsub>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd2:	f7f9 fd23 	bl	800071c <__aeabi_ddiv>
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	463b      	mov	r3, r7
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fbf1 	bl	80004c8 <__aeabi_dmul>
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	463b      	mov	r3, r7
 8006cea:	f7f9 fa37 	bl	800015c <__adddf3>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fa2f 	bl	8000158 <__aeabi_dsub>
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	f7f9 fa2b 	bl	8000158 <__aeabi_dsub>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	2000      	movs	r0, #0
 8006d08:	493b      	ldr	r1, [pc, #236]	; (8006df8 <__ieee754_pow+0xa20>)
 8006d0a:	f7f9 fa25 	bl	8000158 <__aeabi_dsub>
 8006d0e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006d12:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006d16:	da2b      	bge.n	8006d70 <__ieee754_pow+0x998>
 8006d18:	4652      	mov	r2, sl
 8006d1a:	f000 f9b9 	bl	8007090 <scalbn>
 8006d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d22:	f7ff bbf2 	b.w	800650a <__ieee754_pow+0x132>
 8006d26:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <__ieee754_pow+0xa24>)
 8006d28:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006d2c:	429f      	cmp	r7, r3
 8006d2e:	f77f af13 	ble.w	8006b58 <__ieee754_pow+0x780>
 8006d32:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <__ieee754_pow+0xa28>)
 8006d34:	440b      	add	r3, r1
 8006d36:	4303      	orrs	r3, r0
 8006d38:	d00b      	beq.n	8006d52 <__ieee754_pow+0x97a>
 8006d3a:	a32b      	add	r3, pc, #172	; (adr r3, 8006de8 <__ieee754_pow+0xa10>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d44:	f7f9 fbc0 	bl	80004c8 <__aeabi_dmul>
 8006d48:	a327      	add	r3, pc, #156	; (adr r3, 8006de8 <__ieee754_pow+0xa10>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7ff bbdc 	b.w	800650a <__ieee754_pow+0x132>
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	f7f9 f9ff 	bl	8000158 <__aeabi_dsub>
 8006d5a:	4642      	mov	r2, r8
 8006d5c:	464b      	mov	r3, r9
 8006d5e:	f7f9 fe39 	bl	80009d4 <__aeabi_dcmpge>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f aef8 	beq.w	8006b58 <__ieee754_pow+0x780>
 8006d68:	e7e7      	b.n	8006d3a <__ieee754_pow+0x962>
 8006d6a:	f04f 0a00 	mov.w	sl, #0
 8006d6e:	e71e      	b.n	8006bae <__ieee754_pow+0x7d6>
 8006d70:	4621      	mov	r1, r4
 8006d72:	e7d4      	b.n	8006d1e <__ieee754_pow+0x946>
 8006d74:	f04f 0b00 	mov.w	fp, #0
 8006d78:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006df8 <__ieee754_pow+0xa20>
 8006d7c:	f7ff bbb0 	b.w	80064e0 <__ieee754_pow+0x108>
 8006d80:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006d84:	f7ff bbac 	b.w	80064e0 <__ieee754_pow+0x108>
 8006d88:	4638      	mov	r0, r7
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	f7ff bbbf 	b.w	800650e <__ieee754_pow+0x136>
 8006d90:	9200      	str	r2, [sp, #0]
 8006d92:	f7ff bb7f 	b.w	8006494 <__ieee754_pow+0xbc>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f7ff bb69 	b.w	800646e <__ieee754_pow+0x96>
 8006d9c:	f3af 8000 	nop.w
 8006da0:	652b82fe 	.word	0x652b82fe
 8006da4:	3c971547 	.word	0x3c971547
 8006da8:	00000000 	.word	0x00000000
 8006dac:	3fe62e43 	.word	0x3fe62e43
 8006db0:	fefa39ef 	.word	0xfefa39ef
 8006db4:	3fe62e42 	.word	0x3fe62e42
 8006db8:	0ca86c39 	.word	0x0ca86c39
 8006dbc:	be205c61 	.word	0xbe205c61
 8006dc0:	72bea4d0 	.word	0x72bea4d0
 8006dc4:	3e663769 	.word	0x3e663769
 8006dc8:	c5d26bf1 	.word	0xc5d26bf1
 8006dcc:	3ebbbd41 	.word	0x3ebbbd41
 8006dd0:	af25de2c 	.word	0xaf25de2c
 8006dd4:	3f11566a 	.word	0x3f11566a
 8006dd8:	16bebd93 	.word	0x16bebd93
 8006ddc:	3f66c16c 	.word	0x3f66c16c
 8006de0:	5555553e 	.word	0x5555553e
 8006de4:	3fc55555 	.word	0x3fc55555
 8006de8:	c2f8f359 	.word	0xc2f8f359
 8006dec:	01a56e1f 	.word	0x01a56e1f
 8006df0:	3fe00000 	.word	0x3fe00000
 8006df4:	000fffff 	.word	0x000fffff
 8006df8:	3ff00000 	.word	0x3ff00000
 8006dfc:	4090cbff 	.word	0x4090cbff
 8006e00:	3f6f3400 	.word	0x3f6f3400

08006e04 <__ieee754_sqrt>:
 8006e04:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006f58 <__ieee754_sqrt+0x154>
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006e10:	460b      	mov	r3, r1
 8006e12:	4606      	mov	r6, r0
 8006e14:	460d      	mov	r5, r1
 8006e16:	460a      	mov	r2, r1
 8006e18:	4607      	mov	r7, r0
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	d10e      	bne.n	8006e3c <__ieee754_sqrt+0x38>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f7f9 fb52 	bl	80004c8 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f7f9 f996 	bl	800015c <__adddf3>
 8006e30:	4606      	mov	r6, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	4630      	mov	r0, r6
 8006e36:	4629      	mov	r1, r5
 8006e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	dc0d      	bgt.n	8006e5c <__ieee754_sqrt+0x58>
 8006e40:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006e44:	ea5c 0707 	orrs.w	r7, ip, r7
 8006e48:	d0f4      	beq.n	8006e34 <__ieee754_sqrt+0x30>
 8006e4a:	b139      	cbz	r1, 8006e5c <__ieee754_sqrt+0x58>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	f7f9 f983 	bl	8000158 <__aeabi_dsub>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	f7f9 fc61 	bl	800071c <__aeabi_ddiv>
 8006e5a:	e7e9      	b.n	8006e30 <__ieee754_sqrt+0x2c>
 8006e5c:	1512      	asrs	r2, r2, #20
 8006e5e:	d074      	beq.n	8006f4a <__ieee754_sqrt+0x146>
 8006e60:	2000      	movs	r0, #0
 8006e62:	07d5      	lsls	r5, r2, #31
 8006e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e68:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006e6c:	bf5e      	ittt	pl
 8006e6e:	0fe3      	lsrpl	r3, r4, #31
 8006e70:	0064      	lslpl	r4, r4, #1
 8006e72:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006e76:	0fe3      	lsrs	r3, r4, #31
 8006e78:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006e7c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006e80:	2516      	movs	r5, #22
 8006e82:	4601      	mov	r1, r0
 8006e84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e88:	1076      	asrs	r6, r6, #1
 8006e8a:	0064      	lsls	r4, r4, #1
 8006e8c:	188f      	adds	r7, r1, r2
 8006e8e:	429f      	cmp	r7, r3
 8006e90:	bfde      	ittt	le
 8006e92:	1bdb      	suble	r3, r3, r7
 8006e94:	18b9      	addle	r1, r7, r2
 8006e96:	1880      	addle	r0, r0, r2
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	3d01      	subs	r5, #1
 8006e9c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006ea0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006ea4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006ea8:	d1f0      	bne.n	8006e8c <__ieee754_sqrt+0x88>
 8006eaa:	462a      	mov	r2, r5
 8006eac:	f04f 0e20 	mov.w	lr, #32
 8006eb0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	eb07 0c05 	add.w	ip, r7, r5
 8006eba:	dc02      	bgt.n	8006ec2 <__ieee754_sqrt+0xbe>
 8006ebc:	d113      	bne.n	8006ee6 <__ieee754_sqrt+0xe2>
 8006ebe:	45a4      	cmp	ip, r4
 8006ec0:	d811      	bhi.n	8006ee6 <__ieee754_sqrt+0xe2>
 8006ec2:	f1bc 0f00 	cmp.w	ip, #0
 8006ec6:	eb0c 0507 	add.w	r5, ip, r7
 8006eca:	da43      	bge.n	8006f54 <__ieee754_sqrt+0x150>
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	db41      	blt.n	8006f54 <__ieee754_sqrt+0x150>
 8006ed0:	f101 0801 	add.w	r8, r1, #1
 8006ed4:	1a5b      	subs	r3, r3, r1
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	45a4      	cmp	ip, r4
 8006eda:	bf88      	it	hi
 8006edc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006ee0:	eba4 040c 	sub.w	r4, r4, ip
 8006ee4:	443a      	add	r2, r7
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	f1be 0e01 	subs.w	lr, lr, #1
 8006eec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006ef0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006ef4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006ef8:	d1dc      	bne.n	8006eb4 <__ieee754_sqrt+0xb0>
 8006efa:	4323      	orrs	r3, r4
 8006efc:	d006      	beq.n	8006f0c <__ieee754_sqrt+0x108>
 8006efe:	1c54      	adds	r4, r2, #1
 8006f00:	bf0b      	itete	eq
 8006f02:	4672      	moveq	r2, lr
 8006f04:	3201      	addne	r2, #1
 8006f06:	3001      	addeq	r0, #1
 8006f08:	f022 0201 	bicne.w	r2, r2, #1
 8006f0c:	1043      	asrs	r3, r0, #1
 8006f0e:	07c1      	lsls	r1, r0, #31
 8006f10:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006f14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006f18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006f1c:	bf48      	it	mi
 8006f1e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006f22:	4610      	mov	r0, r2
 8006f24:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006f28:	e782      	b.n	8006e30 <__ieee754_sqrt+0x2c>
 8006f2a:	0ae3      	lsrs	r3, r4, #11
 8006f2c:	3915      	subs	r1, #21
 8006f2e:	0564      	lsls	r4, r4, #21
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0fa      	beq.n	8006f2a <__ieee754_sqrt+0x126>
 8006f34:	02de      	lsls	r6, r3, #11
 8006f36:	d50a      	bpl.n	8006f4e <__ieee754_sqrt+0x14a>
 8006f38:	f1c2 0020 	rsb	r0, r2, #32
 8006f3c:	fa24 f000 	lsr.w	r0, r4, r0
 8006f40:	1e55      	subs	r5, r2, #1
 8006f42:	4094      	lsls	r4, r2
 8006f44:	4303      	orrs	r3, r0
 8006f46:	1b4a      	subs	r2, r1, r5
 8006f48:	e78a      	b.n	8006e60 <__ieee754_sqrt+0x5c>
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	e7f0      	b.n	8006f30 <__ieee754_sqrt+0x12c>
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	3201      	adds	r2, #1
 8006f52:	e7ef      	b.n	8006f34 <__ieee754_sqrt+0x130>
 8006f54:	4688      	mov	r8, r1
 8006f56:	e7bd      	b.n	8006ed4 <__ieee754_sqrt+0xd0>
 8006f58:	7ff00000 	.word	0x7ff00000

08006f5c <fabs>:
 8006f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f60:	4770      	bx	lr

08006f62 <finite>:
 8006f62:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006f66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f6a:	0fc0      	lsrs	r0, r0, #31
 8006f6c:	4770      	bx	lr
	...

08006f70 <nan>:
 8006f70:	2000      	movs	r0, #0
 8006f72:	4901      	ldr	r1, [pc, #4]	; (8006f78 <nan+0x8>)
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	7ff80000 	.word	0x7ff80000

08006f7c <rint>:
 8006f7c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8006f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f82:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8006f86:	2f13      	cmp	r7, #19
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	4605      	mov	r5, r0
 8006f90:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006f94:	dc59      	bgt.n	800704a <rint+0xce>
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	da2a      	bge.n	8006ff0 <rint+0x74>
 8006f9a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f9e:	4301      	orrs	r1, r0
 8006fa0:	d022      	beq.n	8006fe8 <rint+0x6c>
 8006fa2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006fa6:	4301      	orrs	r1, r0
 8006fa8:	424d      	negs	r5, r1
 8006faa:	430d      	orrs	r5, r1
 8006fac:	4936      	ldr	r1, [pc, #216]	; (8007088 <rint+0x10c>)
 8006fae:	0c5c      	lsrs	r4, r3, #17
 8006fb0:	0b2d      	lsrs	r5, r5, #12
 8006fb2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8006fb6:	0464      	lsls	r4, r4, #17
 8006fb8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fbc:	ea45 0304 	orr.w	r3, r5, r4
 8006fc0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f8c8 	bl	800015c <__adddf3>
 8006fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8006fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	f7f9 f8be 	bl	8000158 <__aeabi_dsub>
 8006fdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fe0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	b003      	add	sp, #12
 8006fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff0:	4926      	ldr	r1, [pc, #152]	; (800708c <rint+0x110>)
 8006ff2:	4139      	asrs	r1, r7
 8006ff4:	ea03 0001 	and.w	r0, r3, r1
 8006ff8:	4310      	orrs	r0, r2
 8006ffa:	d0f5      	beq.n	8006fe8 <rint+0x6c>
 8006ffc:	084b      	lsrs	r3, r1, #1
 8006ffe:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8007002:	ea52 0501 	orrs.w	r5, r2, r1
 8007006:	d00c      	beq.n	8007022 <rint+0xa6>
 8007008:	ea24 0303 	bic.w	r3, r4, r3
 800700c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007010:	2f13      	cmp	r7, #19
 8007012:	bf0c      	ite	eq
 8007014:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007018:	2500      	movne	r5, #0
 800701a:	fa44 f707 	asr.w	r7, r4, r7
 800701e:	ea43 0407 	orr.w	r4, r3, r7
 8007022:	4919      	ldr	r1, [pc, #100]	; (8007088 <rint+0x10c>)
 8007024:	4623      	mov	r3, r4
 8007026:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800702a:	462a      	mov	r2, r5
 800702c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 f892 	bl	800015c <__adddf3>
 8007038:	e9cd 0100 	strd	r0, r1, [sp]
 800703c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	f7f9 f888 	bl	8000158 <__aeabi_dsub>
 8007048:	e7cc      	b.n	8006fe4 <rint+0x68>
 800704a:	2f33      	cmp	r7, #51	; 0x33
 800704c:	dd05      	ble.n	800705a <rint+0xde>
 800704e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8007052:	d1c9      	bne.n	8006fe8 <rint+0x6c>
 8007054:	f7f9 f882 	bl	800015c <__adddf3>
 8007058:	e7c4      	b.n	8006fe4 <rint+0x68>
 800705a:	f04f 31ff 	mov.w	r1, #4294967295
 800705e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8007062:	fa21 f10c 	lsr.w	r1, r1, ip
 8007066:	4208      	tst	r0, r1
 8007068:	d0be      	beq.n	8006fe8 <rint+0x6c>
 800706a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800706e:	bf18      	it	ne
 8007070:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8007074:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8007078:	bf1e      	ittt	ne
 800707a:	ea20 0303 	bicne.w	r3, r0, r3
 800707e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8007082:	ea43 050c 	orrne.w	r5, r3, ip
 8007086:	e7cc      	b.n	8007022 <rint+0xa6>
 8007088:	08007270 	.word	0x08007270
 800708c:	000fffff 	.word	0x000fffff

08007090 <scalbn>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007096:	4604      	mov	r4, r0
 8007098:	460d      	mov	r5, r1
 800709a:	4617      	mov	r7, r2
 800709c:	460b      	mov	r3, r1
 800709e:	b996      	cbnz	r6, 80070c6 <scalbn+0x36>
 80070a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070a4:	4303      	orrs	r3, r0
 80070a6:	d039      	beq.n	800711c <scalbn+0x8c>
 80070a8:	4b35      	ldr	r3, [pc, #212]	; (8007180 <scalbn+0xf0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7f9 fa0c 	bl	80004c8 <__aeabi_dmul>
 80070b0:	4b34      	ldr	r3, [pc, #208]	; (8007184 <scalbn+0xf4>)
 80070b2:	4604      	mov	r4, r0
 80070b4:	429f      	cmp	r7, r3
 80070b6:	460d      	mov	r5, r1
 80070b8:	da0f      	bge.n	80070da <scalbn+0x4a>
 80070ba:	a32d      	add	r3, pc, #180	; (adr r3, 8007170 <scalbn+0xe0>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f7f9 fa02 	bl	80004c8 <__aeabi_dmul>
 80070c4:	e006      	b.n	80070d4 <scalbn+0x44>
 80070c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80070ca:	4296      	cmp	r6, r2
 80070cc:	d10a      	bne.n	80070e4 <scalbn+0x54>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f7f9 f844 	bl	800015c <__adddf3>
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	e020      	b.n	800711c <scalbn+0x8c>
 80070da:	460b      	mov	r3, r1
 80070dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80070e0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80070e4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80070e8:	19b9      	adds	r1, r7, r6
 80070ea:	4291      	cmp	r1, r2
 80070ec:	dd0e      	ble.n	800710c <scalbn+0x7c>
 80070ee:	a322      	add	r3, pc, #136	; (adr r3, 8007178 <scalbn+0xe8>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80070f8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80070fc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007100:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007104:	4820      	ldr	r0, [pc, #128]	; (8007188 <scalbn+0xf8>)
 8007106:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800710a:	e7d9      	b.n	80070c0 <scalbn+0x30>
 800710c:	2900      	cmp	r1, #0
 800710e:	dd08      	ble.n	8007122 <scalbn+0x92>
 8007110:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007118:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800711c:	4620      	mov	r0, r4
 800711e:	4629      	mov	r1, r5
 8007120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007122:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007126:	da16      	bge.n	8007156 <scalbn+0xc6>
 8007128:	f24c 3350 	movw	r3, #50000	; 0xc350
 800712c:	429f      	cmp	r7, r3
 800712e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007132:	dd08      	ble.n	8007146 <scalbn+0xb6>
 8007134:	4c15      	ldr	r4, [pc, #84]	; (800718c <scalbn+0xfc>)
 8007136:	4814      	ldr	r0, [pc, #80]	; (8007188 <scalbn+0xf8>)
 8007138:	f363 74df 	bfi	r4, r3, #31, #1
 800713c:	a30e      	add	r3, pc, #56	; (adr r3, 8007178 <scalbn+0xe8>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	4621      	mov	r1, r4
 8007144:	e7bc      	b.n	80070c0 <scalbn+0x30>
 8007146:	4c12      	ldr	r4, [pc, #72]	; (8007190 <scalbn+0x100>)
 8007148:	4812      	ldr	r0, [pc, #72]	; (8007194 <scalbn+0x104>)
 800714a:	f363 74df 	bfi	r4, r3, #31, #1
 800714e:	a308      	add	r3, pc, #32	; (adr r3, 8007170 <scalbn+0xe0>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e7f5      	b.n	8007142 <scalbn+0xb2>
 8007156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800715a:	3136      	adds	r1, #54	; 0x36
 800715c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007160:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	2200      	movs	r2, #0
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <scalbn+0x108>)
 800716c:	e7a8      	b.n	80070c0 <scalbn+0x30>
 800716e:	bf00      	nop
 8007170:	c2f8f359 	.word	0xc2f8f359
 8007174:	01a56e1f 	.word	0x01a56e1f
 8007178:	8800759c 	.word	0x8800759c
 800717c:	7e37e43c 	.word	0x7e37e43c
 8007180:	43500000 	.word	0x43500000
 8007184:	ffff3cb0 	.word	0xffff3cb0
 8007188:	8800759c 	.word	0x8800759c
 800718c:	7e37e43c 	.word	0x7e37e43c
 8007190:	01a56e1f 	.word	0x01a56e1f
 8007194:	c2f8f359 	.word	0xc2f8f359
 8007198:	3c900000 	.word	0x3c900000

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
