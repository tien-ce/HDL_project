
Digictal_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000765c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007770  08007770  00017770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007838  08007838  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007838  08007838  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007838  08007838  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080078b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080078b4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1df  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a5  00000000  00000000  0002f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00031528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fba  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb3c  00000000  00000000  0004a9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000857f6  00000000  00000000  000594fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000decf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000ded48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007754 	.word	0x08007754

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007754 	.word	0x08007754

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__gesf2>:
 8000f34:	f04f 3cff 	mov.w	ip, #4294967295
 8000f38:	e006      	b.n	8000f48 <__cmpsf2+0x4>
 8000f3a:	bf00      	nop

08000f3c <__lesf2>:
 8000f3c:	f04f 0c01 	mov.w	ip, #1
 8000f40:	e002      	b.n	8000f48 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__cmpsf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	bf18      	it	ne
 8000f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5e:	d011      	beq.n	8000f84 <__cmpsf2+0x40>
 8000f60:	b001      	add	sp, #4
 8000f62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f66:	bf18      	it	ne
 8000f68:	ea90 0f01 	teqne	r0, r1
 8000f6c:	bf58      	it	pl
 8000f6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f72:	bf88      	it	hi
 8000f74:	17c8      	asrhi	r0, r1, #31
 8000f76:	bf38      	it	cc
 8000f78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f7c:	bf18      	it	ne
 8000f7e:	f040 0001 	orrne.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	d102      	bne.n	8000f90 <__cmpsf2+0x4c>
 8000f8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8e:	d105      	bne.n	8000f9c <__cmpsf2+0x58>
 8000f90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f94:	d1e4      	bne.n	8000f60 <__cmpsf2+0x1c>
 8000f96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9a:	d0e1      	beq.n	8000f60 <__cmpsf2+0x1c>
 8000f9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_cfrcmple>:
 8000fa4:	4684      	mov	ip, r0
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4661      	mov	r1, ip
 8000faa:	e7ff      	b.n	8000fac <__aeabi_cfcmpeq>

08000fac <__aeabi_cfcmpeq>:
 8000fac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fae:	f7ff ffc9 	bl	8000f44 <__cmpsf2>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	bf48      	it	mi
 8000fb6:	f110 0f00 	cmnmi.w	r0, #0
 8000fba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fbc <__aeabi_fcmpeq>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff fff4 	bl	8000fac <__aeabi_cfcmpeq>
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmplt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffea 	bl	8000fac <__aeabi_cfcmpeq>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmple>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffe0 	bl	8000fac <__aeabi_cfcmpeq>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpge>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffd2 	bl	8000fa4 <__aeabi_cfrcmple>
 8001000:	bf94      	ite	ls
 8001002:	2001      	movls	r0, #1
 8001004:	2000      	movhi	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmpgt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffc8 	bl	8000fa4 <__aeabi_cfrcmple>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_f2iz>:
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30f      	bcc.n	800104a <__aeabi_f2iz+0x2a>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d90d      	bls.n	8001050 <__aeabi_f2iz+0x30>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	bf18      	it	ne
 8001046:	4240      	negne	r0, r0
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr
 8001050:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001054:	d101      	bne.n	800105a <__aeabi_f2iz+0x3a>
 8001056:	0242      	lsls	r2, r0, #9
 8001058:	d105      	bne.n	8001066 <__aeabi_f2iz+0x46>
 800105a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105e:	bf08      	it	eq
 8001060:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr

0800106c <HDL_DHT20_init>:
	DONE
} DHT20_state;
DHT20_state state;
DHT20_t dht20;
status_active active ;
void HDL_DHT20_init(){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	state = INIT_DHT20;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HDL_DHT20_init+0x18>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	active = DHT20_OK;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HDL_DHT20_init+0x1c>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200000f0 	.word	0x200000f0
 8001088:	200000f1 	.word	0x200000f1

0800108c <HDL_DHT20_run>:

void HDL_DHT20_run(){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
	switch(state){
 8001092:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b06      	cmp	r3, #6
 8001098:	f200 80d0 	bhi.w	800123c <HDL_DHT20_run+0x1b0>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <HDL_DHT20_run+0x18>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010c1 	.word	0x080010c1
 80010a8:	080010d7 	.word	0x080010d7
 80010ac:	080010f3 	.word	0x080010f3
 80010b0:	08001127 	.word	0x08001127
 80010b4:	08001165 	.word	0x08001165
 80010b8:	080011a5 	.word	0x080011a5
 80010bc:	080011c3 	.word	0x080011c3
	case INIT_DHT20:
		DHT20_Init(&dht20, &hi2c1);
 80010c0:	4964      	ldr	r1, [pc, #400]	; (8001254 <HDL_DHT20_run+0x1c8>)
 80010c2:	4865      	ldr	r0, [pc, #404]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80010c4:	f004 fc54 	bl	8005970 <DHT20_Init>
	 	 HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f000 fc3d 	bl	8001948 <HAL_Delay>
		 state = CHECK_CONNECTION;
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <HDL_DHT20_run+0x1c4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
	 	 break;
 80010d4:	e0b7      	b.n	8001246 <HDL_DHT20_run+0x1ba>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 80010d6:	4860      	ldr	r0, [pc, #384]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80010d8:	f004 fc70 	bl	80059bc <DHT20_IsConnected>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HDL_DHT20_run+0x5e>
			state = CHECK_READY;
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <HDL_DHT20_run+0x1c4>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
		}
		break;
 80010e8:	e0ad      	b.n	8001246 <HDL_DHT20_run+0x1ba>
			active = DHT20_ERROR_CONNECT;
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HDL_DHT20_run+0x1d0>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
		break;
 80010f0:	e0a9      	b.n	8001246 <HDL_DHT20_run+0x1ba>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 80010f2:	4859      	ldr	r0, [pc, #356]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80010f4:	f004 fd4c 	bl	8005b90 <DHT20_ReadStatus>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f003 0318 	and.w	r3, r3, #24
 80010fe:	2b18      	cmp	r3, #24
 8001100:	d00a      	beq.n	8001118 <HDL_DHT20_run+0x8c>
			DHT20_ResetSensor(&dht20);
 8001102:	4855      	ldr	r0, [pc, #340]	; (8001258 <HDL_DHT20_run+0x1cc>)
 8001104:	f004 fd8d 	bl	8005c22 <DHT20_ResetSensor>
		 	HAL_Delay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f000 fc1c 	bl	8001948 <HAL_Delay>
			state = CHECK_CONNECTION;
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
		}
		else {
			HAL_Delay(10);
			state = REQUEST_DATA;
		}
		break;
 8001116:	e096      	b.n	8001246 <HDL_DHT20_run+0x1ba>
			HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f000 fc15 	bl	8001948 <HAL_Delay>
			state = REQUEST_DATA;
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001120:	2203      	movs	r2, #3
 8001122:	701a      	strb	r2, [r3, #0]
		break;
 8001124:	e08f      	b.n	8001246 <HDL_DHT20_run+0x1ba>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 8001126:	f000 fc05 	bl	8001934 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HDL_DHT20_run+0x1cc>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001136:	d311      	bcc.n	800115c <HDL_DHT20_run+0xd0>
			active = DHT20_RequestData(&dht20);
 8001138:	4847      	ldr	r0, [pc, #284]	; (8001258 <HDL_DHT20_run+0x1cc>)
 800113a:	f004 fc55 	bl	80059e8 <DHT20_RequestData>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <HDL_DHT20_run+0x1d0>)
 8001144:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <HDL_DHT20_run+0x1d0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d178      	bne.n	8001240 <HDL_DHT20_run+0x1b4>
				HAL_Delay(80);
 800114e:	2050      	movs	r0, #80	; 0x50
 8001150:	f000 fbfa 	bl	8001948 <HAL_Delay>
				state = READ_DATA;
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 800115a:	e071      	b.n	8001240 <HDL_DHT20_run+0x1b4>
			active = DHT20_ERROR_LASTREAD;
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <HDL_DHT20_run+0x1d0>)
 800115e:	2206      	movs	r2, #6
 8001160:	701a      	strb	r2, [r3, #0]
		break;
 8001162:	e06d      	b.n	8001240 <HDL_DHT20_run+0x1b4>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 8001164:	f000 fbe6 	bl	8001934 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HDL_DHT20_run+0x1cc>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001174:	d212      	bcs.n	800119c <HDL_DHT20_run+0x110>
			active = DHT20_ReadData(&dht20);
 8001176:	4838      	ldr	r0, [pc, #224]	; (8001258 <HDL_DHT20_run+0x1cc>)
 8001178:	f004 fc60 	bl	8005a3c <DHT20_ReadData>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <HDL_DHT20_run+0x1d0>)
 8001182:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HDL_DHT20_run+0x1d0>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HDL_DHT20_run+0x108>
				state = CONVERT_DATA;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HDL_DHT20_run+0x1c4>)
 800118e:	2205      	movs	r2, #5
 8001190:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 8001192:	e058      	b.n	8001246 <HDL_DHT20_run+0x1ba>
				state = REQUEST_DATA;
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001196:	2203      	movs	r2, #3
 8001198:	701a      	strb	r2, [r3, #0]
		break;
 800119a:	e054      	b.n	8001246 <HDL_DHT20_run+0x1ba>
			active = DHT20_ERROR_READ_TIMEOUT;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HDL_DHT20_run+0x1d0>)
 800119e:	2205      	movs	r2, #5
 80011a0:	701a      	strb	r2, [r3, #0]
		break;
 80011a2:	e050      	b.n	8001246 <HDL_DHT20_run+0x1ba>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80011a6:	f004 fc87 	bl	8005ab8 <DHT20_Convert>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HDL_DHT20_run+0x1d0>)
 80011b0:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HDL_DHT20_run+0x1d0>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d144      	bne.n	8001244 <HDL_DHT20_run+0x1b8>
			state = DONE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HDL_DHT20_run+0x1c4>)
 80011bc:	2206      	movs	r2, #6
 80011be:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011c0:	e040      	b.n	8001244 <HDL_DHT20_run+0x1b8>
	{
	    char temp_str[6];      // Chuỗi để lưu giá trị nhiệt độ
	    char humidity_str[6];  // Chuỗi để lưu giá trị độ ẩm

	    // Chuyển đổi giá trị float thành chuỗi
	    float_to_str(dht20.temperature, temp_str, 2);
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	2202      	movs	r2, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f84d 	bl	800126c <float_to_str>
	    float_to_str(dht20.humidity, humidity_str, 2);
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HDL_DHT20_run+0x1cc>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4639      	mov	r1, r7
 80011d8:	2202      	movs	r2, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f846 	bl	800126c <float_to_str>
	    // Hiển thị giá trị lên màn hình LCD
	    lcd_goto_XY(1, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2001      	movs	r0, #1
 80011e4:	f004 fe4b 	bl	8005e7e <lcd_goto_XY>
        lcd_send_string("HUM:");
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <HDL_DHT20_run+0x1d4>)
 80011ea:	f004 fe33 	bl	8005e54 <lcd_send_string>
	    lcd_goto_XY(1, 4);
 80011ee:	2104      	movs	r1, #4
 80011f0:	2001      	movs	r0, #1
 80011f2:	f004 fe44 	bl	8005e7e <lcd_goto_XY>
	    lcd_send_string(humidity_str);
 80011f6:	463b      	mov	r3, r7
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fe2b 	bl	8005e54 <lcd_send_string>

	    HAL_Delay(50);
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f000 fba2 	bl	8001948 <HAL_Delay>

	    lcd_goto_XY(2, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2002      	movs	r0, #2
 8001208:	f004 fe39 	bl	8005e7e <lcd_goto_XY>
	    lcd_send_string("TEMP:");
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <HDL_DHT20_run+0x1d8>)
 800120e:	f004 fe21 	bl	8005e54 <lcd_send_string>
	    lcd_goto_XY(2, 5);
 8001212:	2105      	movs	r1, #5
 8001214:	2002      	movs	r0, #2
 8001216:	f004 fe32 	bl	8005e7e <lcd_goto_XY>
	    lcd_send_string(temp_str);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fe18 	bl	8005e54 <lcd_send_string>

		HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f000 fb8e 	bl	8001948 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 800122c:	2102      	movs	r1, #2
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <HDL_DHT20_run+0x1dc>)
 8001230:	f000 fede 	bl	8001ff0 <HAL_GPIO_TogglePin>
		state = CHECK_READY;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HDL_DHT20_run+0x1c4>)
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
		break;
 800123a:	e004      	b.n	8001246 <HDL_DHT20_run+0x1ba>
	}
	default :
		break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <HDL_DHT20_run+0x1ba>
		break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <HDL_DHT20_run+0x1ba>
		break;
 8001244:	bf00      	nop
	}

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000f0 	.word	0x200000f0
 8001254:	2000009c 	.word	0x2000009c
 8001258:	200000f4 	.word	0x200000f4
 800125c:	200000f1 	.word	0x200000f1
 8001260:	08007770 	.word	0x08007770
 8001264:	08007778 	.word	0x08007778
 8001268:	40010800 	.word	0x40010800

0800126c <float_to_str>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void float_to_str(float num, char *str, int decimal) {
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
    int int_part = (int)num;
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fed1 	bl	8001020 <__aeabi_f2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	61fb      	str	r3, [r7, #28]
    float fraction = num - (float)int_part;
 8001282:	69f8      	ldr	r0, [r7, #28]
 8001284:	f7ff fcb2 	bl	8000bec <__aeabi_i2f>
 8001288:	4603      	mov	r3, r0
 800128a:	4619      	mov	r1, r3
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff fbf7 	bl	8000a80 <__aeabi_fsub>
 8001292:	4603      	mov	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]

    // Xử lý số âm
    if (num < 0) {
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff fe98 	bl	8000fd0 <__aeabi_fcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <float_to_str+0x52>
        int_part = -int_part;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	425b      	negs	r3, r3
 80012aa:	61fb      	str	r3, [r7, #28]
        fraction = -fraction;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012b2:	61bb      	str	r3, [r7, #24]
        *str++ = '-';
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	222d      	movs	r2, #45	; 0x2d
 80012bc:	701a      	strb	r2, [r3, #0]
    }

    // Chuyển đổi phần nguyên
    sprintf(str, "%d.", int_part);
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4921      	ldr	r1, [pc, #132]	; (8001348 <float_to_str+0xdc>)
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f004 fe7e 	bl	8005fc4 <siprintf>
    // Tìm vị trí dấu chấm
    while (*str != '.' && *str != '\0') str++;
 80012c8:	e002      	b.n	80012d0 <float_to_str+0x64>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b2e      	cmp	r3, #46	; 0x2e
 80012d6:	d003      	beq.n	80012e0 <float_to_str+0x74>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f4      	bne.n	80012ca <float_to_str+0x5e>
    str++; // B�? qua dấu chấm
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]

    // Chuyển đổi phần thập phân
    int frac_part = (int)(fraction * pow(10, decimal) + 0.5); // Làm tròn
 80012e6:	69b8      	ldr	r0, [r7, #24]
 80012e8:	f7ff f896 	bl	8000418 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff f87f 	bl	80003f4 <__aeabi_i2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	f04f 0000 	mov.w	r0, #0
 80012fe:	4913      	ldr	r1, [pc, #76]	; (800134c <float_to_str+0xe0>)
 8001300:	f005 fa9a 	bl	8006838 <pow>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7ff f8dc 	bl	80004c8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <float_to_str+0xe4>)
 800131e:	f7fe ff1d 	bl	800015c <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb7d 	bl	8000a28 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	617b      	str	r3, [r7, #20]
    sprintf(str, "%0*d", decimal, frac_part);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4907      	ldr	r1, [pc, #28]	; (8001354 <float_to_str+0xe8>)
 8001338:	68b8      	ldr	r0, [r7, #8]
 800133a:	f004 fe43 	bl	8005fc4 <siprintf>
}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	bf00      	nop
 8001348:	08007780 	.word	0x08007780
 800134c:	40240000 	.word	0x40240000
 8001350:	3fe00000 	.word	0x3fe00000
 8001354:	08007784 	.word	0x08007784

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f000 fa92 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001360:	f000 f811 	bl	8001386 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001364:	f000 f8a4 	bl	80014b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001368:	f000 f878 	bl	800145c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800136c:	f000 f848 	bl	8001400 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//extern status_active active;
  HDL_DHT20_init();
 8001370:	f7ff fe7c 	bl	800106c <HDL_DHT20_init>
  HAL_Delay(1000);
 8001374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001378:	f000 fae6 	bl	8001948 <HAL_Delay>
  lcd_init();
 800137c:	f004 fd3c 	bl	8005df8 <lcd_init>
	/*
	 if(active != DHT20_OK){
		 Error_Handler();
	 }
	 */
	 HDL_DHT20_run();
 8001380:	f7ff fe84 	bl	800108c <HDL_DHT20_run>
 8001384:	e7fc      	b.n	8001380 <main+0x28>

08001386 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b090      	sub	sp, #64	; 0x40
 800138a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	2228      	movs	r2, #40	; 0x28
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fe0d 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2310      	movs	r3, #16
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fdeb 	bl	8004f98 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013c8:	f000 f8e0 	bl	800158c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f856 	bl	8005498 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80013f2:	f000 f8cb 	bl	800158c <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3740      	adds	r7, #64	; 0x40
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f000 fe13 	bl	8002068 <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f8a0 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000009c 	.word	0x2000009c
 8001454:	40005400 	.word	0x40005400
 8001458:	000186a0 	.word	0x000186a0

0800145c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_USART2_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001494:	f004 f98e 	bl	80057b4 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f875 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000011c 	.word	0x2000011c
 80014ac:	40004400 	.word	0x40004400

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_GPIO_Init+0xcc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a2c      	ldr	r2, [pc, #176]	; (800157c <MX_GPIO_Init+0xcc>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_GPIO_Init+0xcc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_GPIO_Init+0xcc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <MX_GPIO_Init+0xcc>)
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_GPIO_Init+0xcc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_GPIO_Init+0xcc>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <MX_GPIO_Init+0xcc>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_GPIO_Init+0xcc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_GPIO_Init+0xcc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <MX_GPIO_Init+0xcc>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_GPIO_Init+0xcc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2122      	movs	r1, #34	; 0x22
 8001528:	4815      	ldr	r0, [pc, #84]	; (8001580 <MX_GPIO_Init+0xd0>)
 800152a:	f000 fd49 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_GPIO_Init+0xd4>)
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_GPIO_Init+0xd8>)
 8001544:	f000 fbb8 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD2_Pin;
 8001548:	2322      	movs	r3, #34	; 0x22
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <MX_GPIO_Init+0xd0>)
 8001560:	f000 fbaa 	bl	8001cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2028      	movs	r0, #40	; 0x28
 800156a:	f000 fae8 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156e:	2028      	movs	r0, #40	; 0x28
 8001570:	f000 fb01 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40010800 	.word	0x40010800
 8001584:	10110000 	.word	0x10110000
 8001588:	40011000 	.word	0x40011000

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	e7fe      	b.n	8001594 <Error_Handler+0x8>
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <HAL_MspInit+0x5c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_MspInit+0x5c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_MspInit+0x5c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_MspInit+0x5c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_MspInit+0x60>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_MspInit+0x60>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <HAL_I2C_MspInit+0xb0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d142      	bne.n	80016a2 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001634:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163a:	2312      	movs	r3, #18
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <HAL_I2C_MspInit+0xb8>)
 800164a:	f000 fb35 	bl	8001cb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_I2C_MspInit+0xbc>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_I2C_MspInit+0xbc>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 8001670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_I2C_MspInit+0xb4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201f      	movs	r0, #31
 8001688:	f000 fa59 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800168c:	201f      	movs	r0, #31
 800168e:	f000 fa72 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2020      	movs	r0, #32
 8001698:	f000 fa51 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800169c:	2020      	movs	r0, #32
 800169e:	f000 fa6a 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40010000 	.word	0x40010000

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_UART_MspInit+0x70>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d123      	bne.n	8001724 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_UART_MspInit+0x74>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_UART_MspInit+0x74>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_MspInit+0x74>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_UART_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_UART_MspInit+0x74>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_UART_MspInit+0x74>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800170c:	230c      	movs	r3, #12
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_UART_MspInit+0x78>)
 8001720:	f000 faca 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40004400 	.word	0x40004400
 8001730:	40021000 	.word	0x40021000
 8001734:	40010800 	.word	0x40010800

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f8c7 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <I2C1_EV_IRQHandler+0x10>)
 800178e:	f001 fbaa 	bl	8002ee6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000009c 	.word	0x2000009c

0800179c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C1_ER_IRQHandler+0x10>)
 80017a2:	f001 fd11 	bl	80031c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000009c 	.word	0x2000009c

080017b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b8:	f000 fc34 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f004 fbb6 	bl	8005f60 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20005000 	.word	0x20005000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000090 	.word	0x20000090
 8001828:	20000180 	.word	0x20000180

0800182c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001838:	f7ff fff8 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800183e:	490c      	ldr	r1, [pc, #48]	; (8001870 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001854:	4c09      	ldr	r4, [pc, #36]	; (800187c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f004 fb83 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001866:	f7ff fd77 	bl	8001358 <main>
  bx lr
 800186a:	4770      	bx	lr
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001874:	08007840 	.word	0x08007840
  ldr r2, =_sbss
 8001878:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800187c:	20000180 	.word	0x20000180

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f947 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fe7a 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f95f 	bl	8001b92 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f927 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x1c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x20>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x20>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000008 	.word	0x20000008
 8001930:	20000164 	.word	0x20000164

08001934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000164 	.word	0x20000164

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fff0 	bl	8001934 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffe0 	bl	8001934 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff90 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff2d 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff42 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff35 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d005      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e051      	b.n	8001c74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 020e 	bic.w	r2, r2, #14
 8001bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Abort_IT+0xd4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d029      	beq.n	8001c4e <HAL_DMA_Abort_IT+0xa2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_DMA_Abort_IT+0xd8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d022      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x9e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_DMA_Abort_IT+0xdc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d01a      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x98>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_DMA_Abort_IT+0xe0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x92>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_DMA_Abort_IT+0xe4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00a      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x8c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_DMA_Abort_IT+0xe8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d102      	bne.n	8001c32 <HAL_DMA_Abort_IT+0x86>
 8001c2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c30:	e00e      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c36:	e00b      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c3c:	e008      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	e005      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c48:	e002      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	e000      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_DMA_Abort_IT+0xec>)
 8001c52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
    } 
  }
  return status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40020008 	.word	0x40020008
 8001c84:	4002001c 	.word	0x4002001c
 8001c88:	40020030 	.word	0x40020030
 8001c8c:	40020044 	.word	0x40020044
 8001c90:	40020058 	.word	0x40020058
 8001c94:	4002006c 	.word	0x4002006c
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001caa:	b2db      	uxtb	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e169      	b.n	8001fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8158 	bne.w	8001f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a9a      	ldr	r2, [pc, #616]	; (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a98      	ldr	r2, [pc, #608]	; (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d875      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a98      	ldr	r2, [pc, #608]	; (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d058      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d00:	4a96      	ldr	r2, [pc, #600]	; (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d86f      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d06:	4a96      	ldr	r2, [pc, #600]	; (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d052      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a94      	ldr	r2, [pc, #592]	; (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d869      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d12:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04c      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d18:	4a92      	ldr	r2, [pc, #584]	; (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d863      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a92      	ldr	r2, [pc, #584]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d046      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a90      	ldr	r2, [pc, #576]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d85d      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d82a      	bhi.n	8001d84 <HAL_GPIO_Init+0xcc>
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d859      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <HAL_GPIO_Init+0x80>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001d8d 	.word	0x08001d8d
 8001d40:	08001d9f 	.word	0x08001d9f
 8001d44:	08001de1 	.word	0x08001de1
 8001d48:	08001de7 	.word	0x08001de7
 8001d4c:	08001de7 	.word	0x08001de7
 8001d50:	08001de7 	.word	0x08001de7
 8001d54:	08001de7 	.word	0x08001de7
 8001d58:	08001de7 	.word	0x08001de7
 8001d5c:	08001de7 	.word	0x08001de7
 8001d60:	08001de7 	.word	0x08001de7
 8001d64:	08001de7 	.word	0x08001de7
 8001d68:	08001de7 	.word	0x08001de7
 8001d6c:	08001de7 	.word	0x08001de7
 8001d70:	08001de7 	.word	0x08001de7
 8001d74:	08001de7 	.word	0x08001de7
 8001d78:	08001de7 	.word	0x08001de7
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001da9 	.word	0x08001da9
 8001d84:	4a79      	ldr	r2, [pc, #484]	; (8001f6c <HAL_GPIO_Init+0x2b4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d8a:	e02c      	b.n	8001de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e029      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e024      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	3308      	adds	r3, #8
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e01f      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	330c      	adds	r3, #12
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e01a      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e013      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	611a      	str	r2, [r3, #16]
          break;
 8001dd2:	e009      	b.n	8001de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	615a      	str	r2, [r3, #20]
          break;
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          break;
 8001de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d801      	bhi.n	8001df2 <HAL_GPIO_Init+0x13a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_Init+0x13e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d802      	bhi.n	8001e04 <HAL_GPIO_Init+0x14c>
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x152>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3b08      	subs	r3, #8
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	210f      	movs	r1, #15
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80b1 	beq.w	8001f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e50:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a40      	ldr	r2, [pc, #256]	; (8001f78 <HAL_GPIO_Init+0x2c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1ec>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3f      	ldr	r2, [pc, #252]	; (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1e0>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb6:	492f      	ldr	r1, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	492c      	ldr	r1, [pc, #176]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4928      	ldr	r1, [pc, #160]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4922      	ldr	r1, [pc, #136]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60cb      	str	r3, [r1, #12]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4918      	ldr	r1, [pc, #96]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4914      	ldr	r1, [pc, #80]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d021      	beq.n	8001f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e021      	b.n	8001f9a <HAL_GPIO_Init+0x2e2>
 8001f56:	bf00      	nop
 8001f58:	10320000 	.word	0x10320000
 8001f5c:	10310000 	.word	0x10310000
 8001f60:	10220000 	.word	0x10220000
 8001f64:	10210000 	.word	0x10210000
 8001f68:	10120000 	.word	0x10120000
 8001f6c:	10110000 	.word	0x10110000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40010800 	.word	0x40010800
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40011400 	.word	0x40011400
 8001f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4909      	ldr	r1, [pc, #36]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f ae8e 	bne.w	8001ccc <HAL_GPIO_Init+0x14>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	372c      	adds	r7, #44	; 0x2c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43d9      	mvns	r1, r3
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	400b      	ands	r3, r1
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
	...

08002024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f806 	bl	8002054 <HAL_GPIO_EXTI_Callback>
  }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12b      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fab4 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020cc:	f003 fb2c 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a81      	ldr	r2, [pc, #516]	; (80022dc <HAL_I2C_Init+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d807      	bhi.n	80020ec <HAL_I2C_Init+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_I2C_Init+0x278>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e006      	b.n	80020fa <HAL_I2C_Init+0x92>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	; (80022e4 <HAL_I2C_Init+0x27c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e7      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a78      	ldr	r2, [pc, #480]	; (80022e8 <HAL_I2C_Init+0x280>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_I2C_Init+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <HAL_I2C_Init+0xd4>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_I2C_Init+0xe8>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_I2C_Init+0x284>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	495c      	ldr	r1, [pc, #368]	; (80022dc <HAL_I2C_Init+0x274>)
 800216c:	428b      	cmp	r3, r1
 800216e:	d819      	bhi.n	80021a4 <HAL_I2C_Init+0x13c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e59      	subs	r1, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb1 f3f3 	udiv	r3, r1, r3
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002184:	400b      	ands	r3, r1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_I2C_Init+0x138>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e59      	subs	r1, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	e051      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x168>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x18e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x196>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d103      	bne.n	800230e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	4613      	mov	r3, r2
 800232a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fb02 	bl	8001934 <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 80e0 	bne.w	8002500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2319      	movs	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	4970      	ldr	r1, [pc, #448]	; (800250c <HAL_I2C_Master_Transmit+0x1f4>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f002 fba2 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e0d3      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x50>
 8002364:	2302      	movs	r3, #2
 8002366:	e0cc      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_I2C_Master_Transmit+0x1f8>)
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f002 f964 	bl	80046a4 <I2C_MasterRequestWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08d      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023fc:	e066      	b.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f002 fc60 	bl	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f002 fc57 	bl	8004d58 <I2C_WaitOnBTFFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d107      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e01a      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d194      	bne.n	80023fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000

08002514 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
 8002524:	4613      	mov	r3, r2
 8002526:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff fa02 	bl	8001934 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	f040 824b 	bne.w	80029d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	497f      	ldr	r1, [pc, #508]	; (8002748 <HAL_I2C_Master_Receive+0x234>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f002 faa2 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	e23e      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_I2C_Master_Receive+0x54>
 8002564:	2302      	movs	r3, #2
 8002566:	e237      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d007      	beq.n	800258e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2222      	movs	r2, #34	; 0x22
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2210      	movs	r2, #16
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	893a      	ldrh	r2, [r7, #8]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a5f      	ldr	r2, [pc, #380]	; (800274c <HAL_I2C_Master_Receive+0x238>)
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025d0:	8979      	ldrh	r1, [r7, #10]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f002 f8e6 	bl	80047a8 <I2C_MasterRequestRead>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1f8      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d113      	bne.n	8002616 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e1cc      	b.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b01      	cmp	r3, #1
 800261c:	d11e      	bne.n	800265c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800262e:	b672      	cpsid	i
}
 8002630:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002658:	b662      	cpsie	i
}
 800265a:	e035      	b.n	80026c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b02      	cmp	r3, #2
 8002662:	d11e      	bne.n	80026a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800269e:	b662      	cpsie	i
}
 80026a0:	e012      	b.n	80026c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026c8:	e172      	b.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	f200 811f 	bhi.w	8002912 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d123      	bne.n	8002724 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f002 fbb3 	bl	8004e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e173      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002722:	e145      	b.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b02      	cmp	r3, #2
 800272a:	d152      	bne.n	80027d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	4906      	ldr	r1, [pc, #24]	; (8002750 <HAL_I2C_Master_Receive+0x23c>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f002 f9ac 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e148      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
 8002746:	bf00      	nop
 8002748:	00100002 	.word	0x00100002
 800274c:	ffff0000 	.word	0xffff0000
 8002750:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800279a:	b662      	cpsie	i
}
 800279c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d0:	e0ee      	b.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	2200      	movs	r2, #0
 80027da:	4981      	ldr	r1, [pc, #516]	; (80029e0 <HAL_I2C_Master_Receive+0x4cc>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f002 f959 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0f5      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027fc:	b672      	cpsid	i
}
 80027fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002832:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_I2C_Master_Receive+0x4d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	08db      	lsrs	r3, r3, #3
 8002838:	4a6b      	ldr	r2, [pc, #428]	; (80029e8 <HAL_I2C_Master_Receive+0x4d4>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0a1a      	lsrs	r2, r3, #8
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00da      	lsls	r2, r3, #3
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	3b01      	subs	r3, #1
 8002850:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d118      	bne.n	800288a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800287a:	b662      	cpsie	i
}
 800287c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0a6      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d1d9      	bne.n	800284c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028da:	b662      	cpsie	i
}
 80028dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002910:	e04e      	b.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f002 fa98 	bl	8004e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e058      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d124      	bne.n	80029b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b03      	cmp	r3, #3
 800296c:	d107      	bne.n	800297e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f ae88 	bne.w	80026ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010004 	.word	0x00010004
 80029e4:	20000000 	.word	0x20000000
 80029e8:	14f8b589 	.word	0x14f8b589

080029ec <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	817b      	strh	r3, [r7, #10]
 80029fc:	4613      	mov	r3, r2
 80029fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	f040 8089 	bne.w	8002b24 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_I2C_Master_Receive_IT+0x144>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	4a46      	ldr	r2, [pc, #280]	; (8002b34 <HAL_I2C_Master_Receive_IT+0x148>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a1a      	lsrs	r2, r3, #8
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d112      	bne.n	8002a5e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e063      	b.n	8002b26 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d0df      	beq.n	8002a2c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Master_Receive_IT+0x8e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e055      	b.n	8002b26 <HAL_I2C_Master_Receive_IT+0x13a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d007      	beq.n	8002aa0 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2222      	movs	r2, #34	; 0x22
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2210      	movs	r2, #16
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	893a      	ldrh	r2, [r7, #8]
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ae2:	897a      	ldrh	r2, [r7, #10]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002afe:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000000 	.word	0x20000000
 8002b34:	14f8b589 	.word	0x14f8b589
 8002b38:	ffff0000 	.word	0xffff0000

08002b3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7fe fef2 	bl	8001934 <HAL_GetTick>
 8002b50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 8111 	bne.w	8002d86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4988      	ldr	r1, [pc, #544]	; (8002d90 <HAL_I2C_IsDeviceReady+0x254>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f001 ff90 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e104      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_I2C_IsDeviceReady+0x50>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0fd      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2224      	movs	r2, #36	; 0x24
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_I2C_IsDeviceReady+0x258>)
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f001 ff4e 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0c:	d103      	bne.n	8002c16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0b6      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fe83 	bl	8001934 <HAL_GetTick>
 8002c2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c5e:	e025      	b.n	8002cac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fe68 	bl	8001934 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <HAL_I2C_IsDeviceReady+0x13a>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	22a0      	movs	r2, #160	; 0xa0
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_I2C_IsDeviceReady+0x188>
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_I2C_IsDeviceReady+0x188>
 8002cbe:	7dbb      	ldrb	r3, [r7, #22]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0cd      	beq.n	8002c60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d129      	bne.n	8002d2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2319      	movs	r3, #25
 8002d06:	2201      	movs	r2, #1
 8002d08:	4921      	ldr	r1, [pc, #132]	; (8002d90 <HAL_I2C_IsDeviceReady+0x254>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f001 fec2 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e036      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e02c      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	490f      	ldr	r1, [pc, #60]	; (8002d90 <HAL_I2C_IsDeviceReady+0x254>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f001 fe9e 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e012      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f4ff af32 	bcc.w	8002bd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	00100002 	.word	0x00100002
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002db4:	2b28      	cmp	r3, #40	; 0x28
 8002db6:	d15b      	bne.n	8002e70 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e054      	b.n	8002e72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e04d      	b.n	8002e72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d007      	beq.n	8002dfc <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	222a      	movs	r2, #42	; 0x2a
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e6a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d124      	bne.n	8002eda <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2228      	movs	r2, #40	; 0x28
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ed4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d003      	beq.n	8002f1e <HAL_I2C_EV_IRQHandler+0x38>
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	f040 80c1 	bne.w	80030a0 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f3e:	d003      	beq.n	8002f48 <HAL_I2C_EV_IRQHandler+0x62>
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f46:	d101      	bne.n	8002f4c <HAL_I2C_EV_IRQHandler+0x66>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_EV_IRQHandler+0x68>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f000 8132 	beq.w	80031b8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <HAL_I2C_EV_IRQHandler+0x92>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	0a5b      	lsrs	r3, r3, #9
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f001 fff9 	bl	8004f62 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fd71 	bl	8003a58 <I2C_Master_SB>
 8002f76:	e092      	b.n	800309e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0a5b      	lsrs	r3, r3, #9
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fde6 	bl	8003b62 <I2C_Master_ADD10>
 8002f96:	e082      	b.n	800309e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0xd2>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	0a5b      	lsrs	r3, r3, #9
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fdff 	bl	8003bb4 <I2C_Master_ADDR>
 8002fb6:	e072      	b.n	800309e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d03b      	beq.n	800303c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd2:	f000 80f3 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	09db      	lsrs	r3, r3, #7
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00f      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	0a9b      	lsrs	r3, r3, #10
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f9c9 	bl	8003392 <I2C_MasterTransmit_TXE>
 8003000:	e04d      	b.n	800309e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80d6 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	0a5b      	lsrs	r3, r3, #9
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80cf 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	2b21      	cmp	r3, #33	; 0x21
 8003022:	d103      	bne.n	800302c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa50 	bl	80034ca <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302a:	e0c7      	b.n	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	f040 80c4 	bne.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fabe 	bl	80035b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	e0bf      	b.n	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	f000 80b7 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0x194>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	0a9b      	lsrs	r3, r3, #10
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0x194>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fb37 	bl	80036e6 <I2C_MasterReceive_RXNE>
 8003078:	e011      	b.n	800309e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 809a 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	0a5b      	lsrs	r3, r3, #9
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8093 	beq.w	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fbed 	bl	8003876 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309c:	e08e      	b.n	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
 800309e:	e08d      	b.n	80031bc <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	e007      	b.n	80030c2 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x20e>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 ffb8 	bl	8004062 <I2C_Slave_ADDR>
 80030f2:	e066      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x22e>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	0a5b      	lsrs	r3, r3, #9
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fff3 	bl	80040f8 <I2C_Slave_STOPF>
 8003112:	e056      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	2b21      	cmp	r3, #33	; 0x21
 8003118:	d002      	beq.n	8003120 <HAL_I2C_EV_IRQHandler+0x23a>
 800311a:	7bbb      	ldrb	r3, [r7, #14]
 800311c:	2b29      	cmp	r3, #41	; 0x29
 800311e:	d125      	bne.n	800316c <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	09db      	lsrs	r3, r3, #7
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x266>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x266>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fed0 	bl	8003eea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800314a:	e039      	b.n	80031c0 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d033      	beq.n	80031c0 <HAL_I2C_EV_IRQHandler+0x2da>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	0a5b      	lsrs	r3, r3, #9
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02d      	beq.n	80031c0 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fefd 	bl	8003f64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800316a:	e029      	b.n	80031c0 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00f      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	0a9b      	lsrs	r3, r3, #10
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 ff07 	bl	8003fa4 <I2C_SlaveReceive_RXNE>
 8003196:	e014      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	0a5b      	lsrs	r3, r3, #9
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 ff35 	bl	8004020 <I2C_SlaveReceive_BTF>
 80031b6:	e004      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ea:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d016      	beq.n	8003226 <HAL_I2C_ER_IRQHandler+0x5e>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003214:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	0a5b      	lsrs	r3, r3, #9
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <HAL_I2C_ER_IRQHandler+0x88>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800324e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03f      	beq.n	80032dc <HAL_I2C_ER_IRQHandler+0x114>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d039      	beq.n	80032dc <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003268:	7efb      	ldrb	r3, [r7, #27]
 800326a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003282:	7ebb      	ldrb	r3, [r7, #26]
 8003284:	2b20      	cmp	r3, #32
 8003286:	d112      	bne.n	80032ae <HAL_I2C_ER_IRQHandler+0xe6>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_I2C_ER_IRQHandler+0xe6>
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b21      	cmp	r3, #33	; 0x21
 8003292:	d008      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b29      	cmp	r3, #41	; 0x29
 8003298:	d005      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0xde>
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b28      	cmp	r3, #40	; 0x28
 800329e:	d106      	bne.n	80032ae <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b21      	cmp	r3, #33	; 0x21
 80032a4:	d103      	bne.n	80032ae <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f001 f856 	bl	8004358 <I2C_Slave_AF>
 80032ac:	e016      	b.n	80032dc <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032c0:	7efb      	ldrb	r3, [r7, #27]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d002      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x104>
 80032c6:	7efb      	ldrb	r3, [r7, #27]
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	0adb      	lsrs	r3, r3, #11
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <HAL_I2C_ER_IRQHandler+0x13e>
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003304:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f001 f891 	bl	8004440 <I2C_ITError>
  }
}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d150      	bne.n	800345a <I2C_MasterTransmit_TXE+0xc8>
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b21      	cmp	r3, #33	; 0x21
 80033bc:	d14d      	bne.n	800345a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d01d      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d01a      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d0:	d016      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2211      	movs	r2, #17
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff94 	bl	8003326 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fe:	e060      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff8a 	bl	800335c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003448:	e03b      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff67 	bl	8003326 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003458:	e033      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d005      	beq.n	800346c <I2C_MasterTransmit_TXE+0xda>
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d12d      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b22      	cmp	r3, #34	; 0x22
 800346a:	d12a      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003486:	e01c      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d103      	bne.n	800349c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f88e 	bl	80035b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800349a:	e012      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034c0:	e7ff      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b21      	cmp	r3, #33	; 0x21
 80034e2:	d164      	bne.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003512:	e04c      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b08      	cmp	r3, #8
 8003518:	d01d      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b20      	cmp	r3, #32
 800351e:	d01a      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003526:	d016      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003536:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2211      	movs	r2, #17
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fee9 	bl	8003326 <HAL_I2C_MasterTxCpltCallback>
}
 8003554:	e02b      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003564:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d107      	bne.n	80035a0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fedf 	bl	800335c <HAL_I2C_MemTxCpltCallback>
}
 800359e:	e006      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff febc 	bl	8003326 <HAL_I2C_MasterTxCpltCallback>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10b      	bne.n	80035ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80035ec:	e077      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	121b      	asrs	r3, r3, #8
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003608:	e069      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003628:	e059      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	2b02      	cmp	r3, #2
 8003630:	d152      	bne.n	80036d8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b22      	cmp	r3, #34	; 0x22
 8003636:	d10d      	bne.n	8003654 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003646:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003652:	e044      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b21      	cmp	r3, #33	; 0x21
 8003662:	d112      	bne.n	800368a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003688:	e029      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d124      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d121      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe43 	bl	800335c <HAL_I2C_MemTxCpltCallback>
}
 80036d6:	e002      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fe fe09 	bl	80022f0 <I2C_Flush_DR>
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b22      	cmp	r3, #34	; 0x22
 80036f8:	f040 80b9 	bne.w	800386e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d921      	bls.n	8003754 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b03      	cmp	r3, #3
 800373e:	f040 8096 	bne.w	800386e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003752:	e08c      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b02      	cmp	r3, #2
 800375a:	d07f      	beq.n	800385c <I2C_MasterReceive_RXNE+0x176>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d002      	beq.n	8003768 <I2C_MasterReceive_RXNE+0x82>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d179      	bne.n	800385c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fb3d 	bl	8004de8 <I2C_WaitOnSTOPRequestThroughIT>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14c      	bne.n	800380e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003792:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d10a      	bne.n	80037e4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fdc6 	bl	800336e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037e2:	e044      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d002      	beq.n	80037f8 <I2C_MasterReceive_RXNE+0x112>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d103      	bne.n	8003800 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
 80037fe:	e002      	b.n	8003806 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2212      	movs	r2, #18
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fd96 	bl	8003338 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800380c:	e02f      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f002 fb78 	bl	8005f4a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800385a:	e008      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	605a      	str	r2, [r3, #4]
}
 800386c:	e7ff      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d11b      	bne.n	80038c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038c4:	e0c4      	b.n	8003a50 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d129      	bne.n	8003924 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00a      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d007      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003922:	e095      	b.n	8003a50 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d17d      	bne.n	8003a2a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d002      	beq.n	800393a <I2C_MasterReceive_BTF+0xc4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b10      	cmp	r3, #16
 8003938:	d108      	bne.n	800394c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e016      	b.n	800397a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d002      	beq.n	8003958 <I2C_MasterReceive_BTF+0xe2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d108      	bne.n	800396a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e007      	b.n	800397a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003978:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d10a      	bne.n	8003a00 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fcb8 	bl	800336e <HAL_I2C_MemRxCpltCallback>
}
 80039fe:	e027      	b.n	8003a50 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d002      	beq.n	8003a14 <I2C_MasterReceive_BTF+0x19e>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d103      	bne.n	8003a1c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1a:	e002      	b.n	8003a22 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2212      	movs	r2, #18
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fc88 	bl	8003338 <HAL_I2C_MasterRxCpltCallback>
}
 8003a28:	e012      	b.n	8003a50 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d117      	bne.n	8003a9c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a84:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a86:	e067      	b.n	8003b58 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
}
 8003a9a:	e05d      	b.n	8003b58 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa4:	d133      	bne.n	8003b0e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b21      	cmp	r3, #33	; 0x21
 8003ab0:	d109      	bne.n	8003ac6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac2:	611a      	str	r2, [r3, #16]
 8003ac4:	e008      	b.n	8003ad8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <I2C_Master_SB+0x92>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d032      	beq.n	8003b58 <I2C_Master_SB+0x100>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02d      	beq.n	8003b58 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
}
 8003b0c:	e024      	b.n	8003b58 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10e      	bne.n	8003b34 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	11db      	asrs	r3, r3, #7
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 0306 	and.w	r3, r3, #6
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f063 030f 	orn	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	611a      	str	r2, [r3, #16]
}
 8003b32:	e011      	b.n	8003b58 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10d      	bne.n	8003b58 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	11db      	asrs	r3, r3, #7
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0306 	and.w	r3, r3, #6
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f063 030e 	orn	r3, r3, #14
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <I2C_Master_ADD10+0x26>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <I2C_Master_ADD10+0x48>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba8:	605a      	str	r2, [r3, #4]
  }
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b091      	sub	sp, #68	; 0x44
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	f040 8174 	bne.w	8003ec8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10f      	bne.n	8003c08 <I2C_Master_ADDR+0x54>
 8003be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d10b      	bne.n	8003c08 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	e16b      	b.n	8003ee0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <I2C_Master_ADDR+0x98>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c18:	d118      	bne.n	8003c4c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	651a      	str	r2, [r3, #80]	; 0x50
 8003c4a:	e149      	b.n	8003ee0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e120      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	f040 808a 	bne.w	8003d9e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c90:	d137      	bne.n	8003d02 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb0:	d113      	bne.n	8003cda <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	e0f2      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e0de      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d02e      	beq.n	8003d66 <I2C_Master_ADDR+0x1b2>
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d02b      	beq.n	8003d66 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d102      	bne.n	8003d1a <I2C_Master_ADDR+0x166>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d125      	bne.n	8003d66 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00e      	beq.n	8003d3e <I2C_Master_ADDR+0x18a>
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d00b      	beq.n	8003d3e <I2C_Master_ADDR+0x18a>
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d008      	beq.n	8003d3e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e007      	b.n	8003d4e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	e0ac      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e090      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d158      	bne.n	8003e5a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d021      	beq.n	8003df2 <I2C_Master_ADDR+0x23e>
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d01e      	beq.n	8003df2 <I2C_Master_ADDR+0x23e>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d01b      	beq.n	8003df2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e012      	b.n	8003e18 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e26:	d14b      	bne.n	8003ec0 <I2C_Master_ADDR+0x30c>
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e2e:	d00b      	beq.n	8003e48 <I2C_Master_ADDR+0x294>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d008      	beq.n	8003e48 <I2C_Master_ADDR+0x294>
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d005      	beq.n	8003e48 <I2C_Master_ADDR+0x294>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d002      	beq.n	8003e48 <I2C_Master_ADDR+0x294>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d13b      	bne.n	8003ec0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	e032      	b.n	8003ec0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e78:	d117      	bne.n	8003eaa <I2C_Master_ADDR+0x2f6>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e80:	d00b      	beq.n	8003e9a <I2C_Master_ADDR+0x2e6>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d008      	beq.n	8003e9a <I2C_Master_ADDR+0x2e6>
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d005      	beq.n	8003e9a <I2C_Master_ADDR+0x2e6>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d002      	beq.n	8003e9a <I2C_Master_ADDR+0x2e6>
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d107      	bne.n	8003eaa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ea8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ec6:	e00b      	b.n	8003ee0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
}
 8003ede:	e7ff      	b.n	8003ee0 <I2C_Master_ADDR+0x32c>
 8003ee0:	bf00      	nop
 8003ee2:	3744      	adds	r7, #68	; 0x44
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02b      	beq.n	8003f5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d114      	bne.n	8003f5c <I2C_SlaveTransmit_TXE+0x72>
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b29      	cmp	r3, #41	; 0x29
 8003f36:	d111      	bne.n	8003f5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2221      	movs	r2, #33	; 0x21
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2228      	movs	r2, #40	; 0x28
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff f9f7 	bl	800334a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02c      	beq.n	8004018 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d114      	bne.n	8004018 <I2C_SlaveReceive_RXNE+0x74>
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff2:	d111      	bne.n	8004018 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2222      	movs	r2, #34	; 0x22
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2228      	movs	r2, #40	; 0x28
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 ff90 	bl	8005f38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d012      	beq.n	8004058 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800407c:	2b28      	cmp	r3, #40	; 0x28
 800407e:	d127      	bne.n	80040d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	09db      	lsrs	r3, r3, #7
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	81bb      	strh	r3, [r7, #12]
 80040b2:	e002      	b.n	80040ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040c2:	89ba      	ldrh	r2, [r7, #12]
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f001 ff1b 	bl	8005f04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040ce:	e00e      	b.n	80040ee <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004116:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	d172      	bne.n	800423c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b22      	cmp	r3, #34	; 0x22
 800415a:	d002      	beq.n	8004162 <I2C_Slave_STOPF+0x6a>
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b2a      	cmp	r3, #42	; 0x2a
 8004160:	d135      	bne.n	80041ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004194:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd fd7e 	bl	8001c9c <HAL_DMA_GetState>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d049      	beq.n	800423a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4a69      	ldr	r2, [pc, #420]	; (8004350 <I2C_Slave_STOPF+0x258>)
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fcfa 	bl	8001bac <HAL_DMA_Abort_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d03d      	beq.n	800423a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041c8:	4610      	mov	r0, r2
 80041ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041cc:	e035      	b.n	800423a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0204 	orr.w	r2, r3, #4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fd48 	bl	8001c9c <HAL_DMA_GetState>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d014      	beq.n	800423c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	4a4e      	ldr	r2, [pc, #312]	; (8004350 <I2C_Slave_STOPF+0x258>)
 8004218:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fcc4 	bl	8001bac <HAL_DMA_Abort_IT>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004234:	4610      	mov	r0, r2
 8004236:	4798      	blx	r3
 8004238:	e000      	b.n	800423c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800423a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03e      	beq.n	80042c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d112      	bne.n	800427a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d112      	bne.n	80042ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0204 	orr.w	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8b7 	bl	8004440 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042d2:	e039      	b.n	8004348 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b2a      	cmp	r3, #42	; 0x2a
 80042d8:	d109      	bne.n	80042ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2228      	movs	r2, #40	; 0x28
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 fe25 	bl	8005f38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b28      	cmp	r3, #40	; 0x28
 80042f8:	d111      	bne.n	800431e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <I2C_Slave_STOPF+0x25c>)
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 fde8 	bl	8005eec <HAL_I2C_ListenCpltCallback>
}
 800431c:	e014      	b.n	8004348 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	2b22      	cmp	r3, #34	; 0x22
 8004324:	d002      	beq.n	800432c <I2C_Slave_STOPF+0x234>
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b22      	cmp	r3, #34	; 0x22
 800432a:	d10d      	bne.n	8004348 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fdf8 	bl	8005f38 <HAL_I2C_SlaveRxCpltCallback>
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	08004945 	.word	0x08004945
 8004354:	ffff0000 	.word	0xffff0000

08004358 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004366:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d002      	beq.n	800437a <I2C_Slave_AF+0x22>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b20      	cmp	r3, #32
 8004378:	d129      	bne.n	80043ce <I2C_Slave_AF+0x76>
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b28      	cmp	r3, #40	; 0x28
 800437e:	d126      	bne.n	80043ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a2e      	ldr	r2, [pc, #184]	; (800443c <I2C_Slave_AF+0xe4>)
 8004384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004394:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fd90 	bl	8005eec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043cc:	e031      	b.n	8004432 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b21      	cmp	r3, #33	; 0x21
 80043d2:	d129      	bne.n	8004428 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a19      	ldr	r2, [pc, #100]	; (800443c <I2C_Slave_AF+0xe4>)
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2221      	movs	r2, #33	; 0x21
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004408:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd ff68 	bl	80022f0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fe ff92 	bl	800334a <HAL_I2C_SlaveTxCpltCallback>
}
 8004426:	e004      	b.n	8004432 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004430:	615a      	str	r2, [r3, #20]
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	ffff0000 	.word	0xffff0000

08004440 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004456:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	2b10      	cmp	r3, #16
 800445c:	d002      	beq.n	8004464 <I2C_ITError+0x24>
 800445e:	7bbb      	ldrb	r3, [r7, #14]
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d10a      	bne.n	800447a <I2C_ITError+0x3a>
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b22      	cmp	r3, #34	; 0x22
 8004468:	d107      	bne.n	800447a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004480:	2b28      	cmp	r3, #40	; 0x28
 8004482:	d107      	bne.n	8004494 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2228      	movs	r2, #40	; 0x28
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004492:	e015      	b.n	80044c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a2:	d00a      	beq.n	80044ba <I2C_ITError+0x7a>
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b60      	cmp	r3, #96	; 0x60
 80044a8:	d007      	beq.n	80044ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ce:	d162      	bne.n	8004596 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d020      	beq.n	8004530 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	4a6a      	ldr	r2, [pc, #424]	; (800469c <I2C_ITError+0x25c>)
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fd fb56 	bl	8001bac <HAL_DMA_Abort_IT>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8089 	beq.w	800461a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800452a:	4610      	mov	r0, r2
 800452c:	4798      	blx	r3
 800452e:	e074      	b.n	800461a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	4a59      	ldr	r2, [pc, #356]	; (800469c <I2C_ITError+0x25c>)
 8004536:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fb35 	bl	8001bac <HAL_DMA_Abort_IT>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d068      	beq.n	800461a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d10b      	bne.n	800456e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004590:	4610      	mov	r0, r2
 8004592:	4798      	blx	r3
 8004594:	e041      	b.n	800461a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b60      	cmp	r3, #96	; 0x60
 80045a0:	d125      	bne.n	80045ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d10b      	bne.n	80045d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fe feca 	bl	8003380 <HAL_I2C_AbortCpltCallback>
 80045ec:	e015      	b.n	800461a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d10b      	bne.n	8004614 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 fc98 	bl	8005f4a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10e      	bne.n	8004648 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d113      	bne.n	8004694 <I2C_ITError+0x254>
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b28      	cmp	r3, #40	; 0x28
 8004670:	d110      	bne.n	8004694 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <I2C_ITError+0x260>)
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f001 fc2c 	bl	8005eec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	08004945 	.word	0x08004945
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	460b      	mov	r3, r1
 80046b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d006      	beq.n	80046ce <I2C_MasterRequestWrite+0x2a>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d003      	beq.n	80046ce <I2C_MasterRequestWrite+0x2a>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046cc:	d108      	bne.n	80046e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e00b      	b.n	80046f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b12      	cmp	r3, #18
 80046e6:	d107      	bne.n	80046f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f9c5 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	d103      	bne.n	8004728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e035      	b.n	8004798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d108      	bne.n	8004748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004736:	897b      	ldrh	r3, [r7, #10]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	e01b      	b.n	8004780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004748:	897b      	ldrh	r3, [r7, #10]
 800474a:	11db      	asrs	r3, r3, #7
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0306 	and.w	r3, r3, #6
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f063 030f 	orn	r3, r3, #15
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	490e      	ldr	r1, [pc, #56]	; (80047a0 <I2C_MasterRequestWrite+0xfc>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa0e 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e010      	b.n	8004798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4907      	ldr	r1, [pc, #28]	; (80047a4 <I2C_MasterRequestWrite+0x100>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f9fe 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	00010008 	.word	0x00010008
 80047a4:	00010002 	.word	0x00010002

080047a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d006      	beq.n	80047e2 <I2C_MasterRequestRead+0x3a>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d003      	beq.n	80047e2 <I2C_MasterRequestRead+0x3a>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e0:	d108      	bne.n	80047f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e00b      	b.n	800480c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	2b11      	cmp	r3, #17
 80047fa:	d107      	bne.n	800480c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800480a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f93b 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004832:	d103      	bne.n	800483c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e079      	b.n	8004934 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004848:	d108      	bne.n	800485c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]
 800485a:	e05f      	b.n	800491c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800485c:	897b      	ldrh	r3, [r7, #10]
 800485e:	11db      	asrs	r3, r3, #7
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f063 030f 	orn	r3, r3, #15
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4930      	ldr	r1, [pc, #192]	; (800493c <I2C_MasterRequestRead+0x194>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f984 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e054      	b.n	8004934 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4929      	ldr	r1, [pc, #164]	; (8004940 <I2C_MasterRequestRead+0x198>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f974 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e044      	b.n	8004934 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8d9 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f6:	d103      	bne.n	8004900 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e017      	b.n	8004934 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030e 	orn	r3, r3, #14
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4907      	ldr	r1, [pc, #28]	; (8004940 <I2C_MasterRequestRead+0x198>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f930 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	00010008 	.word	0x00010008
 8004940:	00010002 	.word	0x00010002

08004944 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800495e:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <I2C_DMAAbort+0x148>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	08db      	lsrs	r3, r3, #3
 8004964:	4a4a      	ldr	r2, [pc, #296]	; (8004a90 <I2C_DMAAbort+0x14c>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0a1a      	lsrs	r2, r3, #8
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	00da      	lsls	r2, r3, #3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800498a:	e00a      	b.n	80049a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d0ea      	beq.n	8004978 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	2200      	movs	r2, #0
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2200      	movs	r2, #0
 80049e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b60      	cmp	r3, #96	; 0x60
 8004a12:	d10e      	bne.n	8004a32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a2a:	6978      	ldr	r0, [r7, #20]
 8004a2c:	f7fe fca8 	bl	8003380 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a30:	e027      	b.n	8004a82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a38:	2b28      	cmp	r3, #40	; 0x28
 8004a3a:	d117      	bne.n	8004a6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2228      	movs	r2, #40	; 0x28
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a6a:	e007      	b.n	8004a7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f001 fa64 	bl	8005f4a <HAL_I2C_ErrorCallback>
}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	14f8b589 	.word	0x14f8b589

08004a94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	e048      	b.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d044      	beq.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc ff41 	bl	8001934 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d139      	bne.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10d      	bne.n	8004aea <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	e00c      	b.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d116      	bne.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e023      	b.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10d      	bne.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	43da      	mvns	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	e00c      	b.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	43da      	mvns	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d093      	beq.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b96:	e071      	b.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d123      	bne.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f043 0204 	orr.w	r2, r3, #4
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e067      	b.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d041      	beq.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fc fe9c 	bl	8001934 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d136      	bne.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10c      	bne.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e00b      	b.n	8004c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e021      	b.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10c      	bne.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e00b      	b.n	8004cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af6d 	bne.w	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd4:	e034      	b.n	8004d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f915 	bl	8004f06 <I2C_IsAcknowledgeFailed>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e034      	b.n	8004d50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d028      	beq.n	8004d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fc fe21 	bl	8001934 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11d      	bne.n	8004d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d016      	beq.n	8004d40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e007      	b.n	8004d50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d1c3      	bne.n	8004cd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d64:	e034      	b.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8cd 	bl	8004f06 <I2C_IsAcknowledgeFailed>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e034      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d028      	beq.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fc fdd9 	bl	8001934 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d11d      	bne.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d016      	beq.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e007      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d1c3      	bne.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004df4:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	0a1a      	lsrs	r2, r3, #8
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d107      	bne.n	8004e26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f043 0220 	orr.w	r2, r3, #32
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e008      	b.n	8004e38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e34:	d0e9      	beq.n	8004e0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000000 	.word	0x20000000
 8004e48:	14f8b589 	.word	0x14f8b589

08004e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e58:	e049      	b.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d119      	bne.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e030      	b.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7fc fd4a 	bl	8001934 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11d      	bne.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d016      	beq.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e007      	b.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d1ae      	bne.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1c:	d11b      	bne.n	8004f56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0204 	orr.w	r2, r3, #4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f72:	d103      	bne.n	8004f7c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f7a:	e007      	b.n	8004f8c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f84:	d102      	bne.n	8004f8c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e26c      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8087 	beq.w	80050c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb8:	4b92      	ldr	r3, [pc, #584]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d112      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
 8004fd0:	4b8c      	ldr	r3, [pc, #560]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fde:	4b89      	ldr	r3, [pc, #548]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x12c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d168      	bne.n	80050c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e246      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x76>
 8005000:	4b80      	ldr	r3, [pc, #512]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7f      	ldr	r2, [pc, #508]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e02e      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7a      	ldr	r2, [pc, #488]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a77      	ldr	r2, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e01d      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0xbc>
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a71      	ldr	r2, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6e      	ldr	r2, [pc, #440]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005054:	4b6b      	ldr	r3, [pc, #428]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6a      	ldr	r2, [pc, #424]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b68      	ldr	r3, [pc, #416]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a67      	ldr	r2, [pc, #412]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc fc5e 	bl	8001934 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7fc fc5a 	bl	8001934 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1fa      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xe4>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fc fc4a 	bl	8001934 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fc fc46 	bl	8001934 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1e6      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x10c>
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d063      	beq.n	800519a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d2:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050de:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11c      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e1ba      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4939      	ldr	r1, [pc, #228]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	e03a      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_RCC_OscConfig+0x270>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fc fbff 	bl	8001934 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513a:	f7fc fbfb 	bl	8001934 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e19b      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4927      	ldr	r1, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	e015      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_RCC_OscConfig+0x270>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fc fbde 	bl	8001934 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517c:	f7fc fbda 	bl	8001934 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e17a      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d03a      	beq.n	800521c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d019      	beq.n	80051e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <HAL_RCC_OscConfig+0x274>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fc fbbe 	bl	8001934 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fc fbba 	bl	8001934 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e15a      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051da:	2001      	movs	r0, #1
 80051dc:	f000 facc 	bl	8005778 <RCC_Delay>
 80051e0:	e01c      	b.n	800521c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_RCC_OscConfig+0x274>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fc fba4 	bl	8001934 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ee:	e00f      	b.n	8005210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fc fba0 	bl	8001934 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d908      	bls.n	8005210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e140      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	42420000 	.word	0x42420000
 800520c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b9e      	ldr	r3, [pc, #632]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e9      	bne.n	80051f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a6 	beq.w	8005376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b97      	ldr	r3, [pc, #604]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	4b94      	ldr	r3, [pc, #592]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4a93      	ldr	r2, [pc, #588]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	61d3      	str	r3, [r2, #28]
 8005246:	4b91      	ldr	r3, [pc, #580]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b8e      	ldr	r3, [pc, #568]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d118      	bne.n	8005294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b8b      	ldr	r3, [pc, #556]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a8a      	ldr	r2, [pc, #552]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fc fb61 	bl	8001934 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fc fb5d 	bl	8001934 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b64      	cmp	r3, #100	; 0x64
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e0fd      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	4b81      	ldr	r3, [pc, #516]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x312>
 800529c:	4b7b      	ldr	r3, [pc, #492]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a7a      	ldr	r2, [pc, #488]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	e02d      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x334>
 80052b2:	4b76      	ldr	r3, [pc, #472]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a75      	ldr	r2, [pc, #468]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b73      	ldr	r3, [pc, #460]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a72      	ldr	r2, [pc, #456]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	e01c      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d10c      	bne.n	80052ee <HAL_RCC_OscConfig+0x356>
 80052d4:	4b6d      	ldr	r3, [pc, #436]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a6c      	ldr	r2, [pc, #432]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4a69      	ldr	r2, [pc, #420]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6213      	str	r3, [r2, #32]
 80052ec:	e00b      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052ee:	4b67      	ldr	r3, [pc, #412]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4a66      	ldr	r2, [pc, #408]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	6213      	str	r3, [r2, #32]
 80052fa:	4b64      	ldr	r3, [pc, #400]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a63      	ldr	r2, [pc, #396]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fc fb11 	bl	8001934 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fc fb0d 	bl	8001934 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0ab      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	4b57      	ldr	r3, [pc, #348]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ee      	beq.n	8005316 <HAL_RCC_OscConfig+0x37e>
 8005338:	e014      	b.n	8005364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fc fafb 	bl	8001934 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fc faf7 	bl	8001934 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e095      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ee      	bne.n	8005342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4b48      	ldr	r3, [pc, #288]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4a47      	ldr	r2, [pc, #284]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8081 	beq.w	8005482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005380:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d061      	beq.n	8005450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d146      	bne.n	8005422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005394:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fc facb 	bl	8001934 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fc fac7 	bl	8001934 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e067      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053ca:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	492d      	ldr	r1, [pc, #180]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a19      	ldr	r1, [r3, #32]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	430b      	orrs	r3, r1
 80053ee:	4927      	ldr	r1, [pc, #156]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b27      	ldr	r3, [pc, #156]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fc fa9b 	bl	8001934 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005402:	f7fc fa97 	bl	8001934 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e037      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x46a>
 8005420:	e02f      	b.n	8005482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fc fa84 	bl	8001934 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fc fa80 	bl	8001934 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e020      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x498>
 800544e:	e018      	b.n	8005482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e013      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	429a      	cmp	r2, r3
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
 8005494:	42420060 	.word	0x42420060

08005498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0d0      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ac:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d910      	bls.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b67      	ldr	r3, [pc, #412]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	4965      	ldr	r1, [pc, #404]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b63      	ldr	r3, [pc, #396]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0b8      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f4:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a52      	ldr	r2, [pc, #328]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b50      	ldr	r3, [pc, #320]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	494d      	ldr	r1, [pc, #308]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d040      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d107      	bne.n	800554e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e07f      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e073      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005566:	4b3d      	ldr	r3, [pc, #244]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e06b      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4936      	ldr	r1, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005588:	f7fc f9d4 	bl	8001934 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fc f9d0 	bl	8001934 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e053      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b8:	4b27      	ldr	r3, [pc, #156]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d210      	bcs.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e032      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4916      	ldr	r1, [pc, #88]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	490e      	ldr	r1, [pc, #56]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005626:	f000 f821 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800562a:	4602      	mov	r2, r0
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	490a      	ldr	r1, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	5ccb      	ldrb	r3, [r1, r3]
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1cc>)
 8005640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_RCC_ClockConfig+0x1d0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fc f932 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40022000 	.word	0x40022000
 800565c:	40021000 	.word	0x40021000
 8005660:	08007794 	.word	0x08007794
 8005664:	20000000 	.word	0x20000000
 8005668:	20000004 	.word	0x20000004

0800566c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_GetSysClockFreq+0x94>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b04      	cmp	r3, #4
 8005694:	d002      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x30>
 8005696:	2b08      	cmp	r3, #8
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x36>
 800569a:	e027      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 800569e:	613b      	str	r3, [r7, #16]
      break;
 80056a0:	e027      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0c9b      	lsrs	r3, r3, #18
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_GetSysClockFreq+0x94>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	0c5b      	lsrs	r3, r3, #17
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	4a11      	ldr	r2, [pc, #68]	; (800570c <HAL_RCC_GetSysClockFreq+0xa0>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ce:	fb02 f203 	mul.w	r2, r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e004      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	613b      	str	r3, [r7, #16]
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ee:	613b      	str	r3, [r7, #16]
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	693b      	ldr	r3, [r7, #16]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000
 8005704:	007a1200 	.word	0x007a1200
 8005708:	080077ac 	.word	0x080077ac
 800570c:	080077bc 	.word	0x080077bc
 8005710:	003d0900 	.word	0x003d0900

08005714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <HAL_RCC_GetHCLKFreq+0x10>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	20000000 	.word	0x20000000

08005728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800572c:	f7ff fff2 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK1Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	080077a4 	.word	0x080077a4

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005754:	f7ff ffde 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4903      	ldr	r1, [pc, #12]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	080077a4 	.word	0x080077a4

08005778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <RCC_Delay+0x34>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <RCC_Delay+0x38>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	0a5b      	lsrs	r3, r3, #9
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005794:	bf00      	nop
  }
  while (Delay --);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f9      	bne.n	8005794 <RCC_Delay+0x1c>
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	20000000 	.word	0x20000000
 80057b0:	10624dd3 	.word	0x10624dd3

080057b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e042      	b.n	800584c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fb ff6e 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2224      	movs	r2, #36	; 0x24
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f82b 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800580c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800581c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800582c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800588e:	f023 030c 	bic.w	r3, r3, #12
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	430b      	orrs	r3, r1
 800589a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <UART_SetConfig+0x114>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7ff ff48 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	e002      	b.n	80058ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7ff ff30 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 80058c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009a      	lsls	r2, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <UART_SetConfig+0x118>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	0119      	lsls	r1, r3, #4
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009a      	lsls	r2, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <UART_SetConfig+0x118>)
 8005902:	fba3 0302 	umull	r0, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	2064      	movs	r0, #100	; 0x64
 800590a:	fb00 f303 	mul.w	r3, r0, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	3332      	adds	r3, #50	; 0x32
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <UART_SetConfig+0x118>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005920:	4419      	add	r1, r3
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009a      	lsls	r2, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <UART_SetConfig+0x118>)
 800593a:	fba3 0302 	umull	r0, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2064      	movs	r0, #100	; 0x64
 8005942:	fb00 f303 	mul.w	r3, r0, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	3332      	adds	r3, #50	; 0x32
 800594c:	4a07      	ldr	r2, [pc, #28]	; (800596c <UART_SetConfig+0x118>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	440a      	add	r2, r1
 800595e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40013800 	.word	0x40013800
 800596c:	51eb851f 	.word	0x51eb851f

08005970 <DHT20_Init>:
#include <dht20.h>


#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	61da      	str	r2, [r3, #28]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <DHT20_IsConnected>:

uint8_t DHT20_Begin(DHT20_t *dht20) {
    return DHT20_IsConnected(dht20);
}

uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_IsDeviceReady(dht20->hi2c, Slave_address_dht20 << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295
 80059cc:	2201      	movs	r2, #1
 80059ce:	2170      	movs	r1, #112	; 0x70
 80059d0:	f7fd f8b4 	bl	8002b3c <HAL_I2C_IsDeviceReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <DHT20_IsConnected+0x22>
        return 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <DHT20_IsConnected+0x24>
    }
    return 0;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 80059f0:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <DHT20_RequestData+0x50>)
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	4611      	mov	r1, r2
 80059fa:	8019      	strh	r1, [r3, #0]
 80059fc:	3302      	adds	r3, #2
 80059fe:	0c12      	lsrs	r2, r2, #16
 8005a00:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	f107 020c 	add.w	r2, r7, #12
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2303      	movs	r3, #3
 8005a12:	2170      	movs	r1, #112	; 0x70
 8005a14:	f7fc fc80 	bl	8002318 <HAL_I2C_Master_Transmit>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e005      	b.n	8005a2e <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 8005a22:	f7fb ff87 	bl	8001934 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	0800778c 	.word	0x0800778c

08005a3c <DHT20_ReadData>:

uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 8005a44:	2307      	movs	r3, #7
 8005a46:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0220 	add.w	r2, r3, #32
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5a:	9100      	str	r1, [sp, #0]
 8005a5c:	2170      	movs	r1, #112	; 0x70
 8005a5e:	f7fc fd59 	bl	8002514 <HAL_I2C_Master_Receive>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e020      	b.n	8005aae <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e00c      	b.n	8005a90 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3320      	adds	r3, #32
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <DHT20_ReadData+0x4e>
            allZero = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]
            break;
 8005a88:	e006      	b.n	8005a98 <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	dbee      	blt.n	8005a76 <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <DHT20_ReadData+0x66>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	e005      	b.n	8005aae <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 8005aa2:	f7fb ff47 	bl	8001934 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <DHT20_Convert>:

uint8_t DHT20_Convert(DHT20_t *dht20) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = ((((dht20->bytes[1] <<8) + dht20->bytes[2])<< 8)+ dht20->bytes[3])>>4;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8005ad8:	4413      	add	r3, r2
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8005ae2:	4413      	add	r3, r2
 8005ae4:	111b      	asrs	r3, r3, #4
 8005ae6:	617b      	str	r3, [r7, #20]
    dht20->humidity = (float )rawHumidity * 100/1048576; // Chuyển đổi theo công thức datasheet
 8005ae8:	6978      	ldr	r0, [r7, #20]
 8005aea:	f7fb f87b 	bl	8000be4 <__aeabi_ui2f>
 8005aee:	4603      	mov	r3, r0
 8005af0:	4924      	ldr	r1, [pc, #144]	; (8005b84 <DHT20_Convert+0xcc>)
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fb f8ce 	bl	8000c94 <__aeabi_fmul>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fb f97c 	bl	8000dfc <__aeabi_fdiv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((((dht20->bytes[3]& 0x0F) << 8 ) + dht20->bytes[4])<<8) +  dht20->bytes[5];
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005b1e:	4413      	add	r3, r2
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005b28:	4413      	add	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    dht20->temperature = (float)rawTemperature * 200/1048576-50; // Chuyển đổi theo công thức datasheet
 8005b2c:	6938      	ldr	r0, [r7, #16]
 8005b2e:	f7fb f859 	bl	8000be4 <__aeabi_ui2f>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4914      	ldr	r1, [pc, #80]	; (8005b88 <DHT20_Convert+0xd0>)
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fb f8ac 	bl	8000c94 <__aeabi_fmul>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb f95a 	bl	8000dfc <__aeabi_fdiv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4910      	ldr	r1, [pc, #64]	; (8005b8c <DHT20_Convert+0xd4>)
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fa ff97 	bl	8000a80 <__aeabi_fsub>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3320      	adds	r3, #32
 8005b5e:	2106      	movs	r1, #6
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f82b 	bl	8005bbc <DHT20_CRC8>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005b70:	7bfa      	ldrb	r2, [r7, #15]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d001      	beq.n	8005b7a <DHT20_Convert+0xc2>
        return DHT20_ERROR_CHECKSUM;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <DHT20_Convert+0xc4>
    }

    return DHT20_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	42c80000 	.word	0x42c80000
 8005b88:	43480000 	.word	0x43480000
 8005b8c:	42480000 	.word	0x42480000

08005b90 <DHT20_ReadStatus>:

float DHT20_GetTemperature(DHT20_t *dht20) {
    return dht20->temperature + dht20->tempOffset;
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]
    //HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
    I2C_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	f107 020f 	add.w	r2, r7, #15
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	2170      	movs	r1, #112	; 0x70
 8005ba8:	f000 f98b 	bl	8005ec2 <I2C_Receive>
    HAL_Delay(1);
 8005bac:	2001      	movs	r0, #1
 8005bae:	f7fb fecb 	bl	8001948 <HAL_Delay>
    return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8005bc8:	23ff      	movs	r3, #255	; 0xff
 8005bca:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 8005bcc:	e01e      	b.n	8005c0c <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	4053      	eors	r3, r2
 8005bda:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73bb      	strb	r3, [r7, #14]
 8005be0:	e011      	b.n	8005c06 <DHT20_CRC8+0x4a>
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da07      	bge.n	8005bfa <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e002      	b.n	8005c00 <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	3301      	adds	r3, #1
 8005c04:	73bb      	strb	r3, [r7, #14]
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b07      	cmp	r3, #7
 8005c0a:	d9ea      	bls.n	8005be2 <DHT20_CRC8+0x26>
    while (len--) {
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	70fa      	strb	r2, [r7, #3]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1db      	bne.n	8005bce <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffae 	bl	8005b90 <DHT20_ReadStatus>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f003 0318 	and.w	r3, r3, #24
 8005c3a:	2b18      	cmp	r3, #24
 8005c3c:	d023      	beq.n	8005c86 <DHT20_ResetSensor+0x64>
    count++;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	3301      	adds	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 8005c44:	211b      	movs	r1, #27
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f822 	bl	8005c90 <DHT20_ResetRegister>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <DHT20_ResetSensor+0x36>
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	3301      	adds	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 8005c58:	211c      	movs	r1, #28
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f818 	bl	8005c90 <DHT20_ResetRegister>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <DHT20_ResetSensor+0x4a>
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8005c6c:	211e      	movs	r1, #30
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f80e 	bl	8005c90 <DHT20_ResetRegister>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <DHT20_ResetSensor+0x5e>
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8005c80:	200a      	movs	r0, #10
 8005c82:	f7fb fe61 	bl	8001948 <HAL_Delay>
}

return count;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <DHT20_ResetRegister+0xa4>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	81bb      	strh	r3, [r7, #12]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	1cfa      	adds	r2, r7, #3
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2170      	movs	r1, #112	; 0x70
 8005cb6:	f7fc fb2f 	bl	8002318 <HAL_I2C_Master_Transmit>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <DHT20_ResetRegister+0x34>
    return 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e032      	b.n	8005d2a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8005cc4:	2005      	movs	r0, #5
 8005cc6:	f7fb fe3f 	bl	8001948 <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f107 020c 	add.w	r2, r7, #12
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2303      	movs	r3, #3
 8005cda:	2170      	movs	r1, #112	; 0x70
 8005cdc:	f7fc fc1a 	bl	8002514 <HAL_I2C_Master_Receive>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <DHT20_ResetRegister+0x5a>
    return 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e01f      	b.n	8005d2a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8005cea:	200a      	movs	r0, #10
 8005cec:	f7fb fe2c 	bl	8001948 <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	723b      	strb	r3, [r7, #8]
 8005cfa:	7b7b      	ldrb	r3, [r7, #13]
 8005cfc:	727b      	strb	r3, [r7, #9]
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	2303      	movs	r3, #3
 8005d12:	2170      	movs	r1, #112	; 0x70
 8005d14:	f7fc fb00 	bl	8002318 <HAL_I2C_Master_Transmit>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <DHT20_ResetRegister+0x92>
    return 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e003      	b.n	8005d2a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8005d22:	2005      	movs	r0, #5
 8005d24:	f7fb fe10 	bl	8001948 <HAL_Delay>

return 1;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08007790 	.word	0x08007790

08005d38 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	4603      	mov	r3, r0
 8005d40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	f023 030f 	bic.w	r3, r3, #15
 8005d48:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	f043 030c 	orr.w	r3, r3, #12
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	f043 0308 	orr.w	r3, r3, #8
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	f043 030c 	orr.w	r3, r3, #12
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	f043 0308 	orr.w	r3, r3, #8
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005d78:	f107 0208 	add.w	r2, r7, #8
 8005d7c:	2364      	movs	r3, #100	; 0x64
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2304      	movs	r3, #4
 8005d82:	2142      	movs	r1, #66	; 0x42
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <lcd_send_cmd+0x5c>)
 8005d86:	f7fc fac7 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000009c 	.word	0x2000009c

08005d98 <lcd_send_data>:

void lcd_send_data (char data)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	f023 030f 	bic.w	r3, r3, #15
 8005da8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	f043 030d 	orr.w	r3, r3, #13
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	f043 0309 	orr.w	r3, r3, #9
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	f043 030d 	orr.w	r3, r3, #13
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	f043 0309 	orr.w	r3, r3, #9
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	2364      	movs	r3, #100	; 0x64
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2304      	movs	r3, #4
 8005de2:	2142      	movs	r1, #66	; 0x42
 8005de4:	4803      	ldr	r0, [pc, #12]	; (8005df4 <lcd_send_data+0x5c>)
 8005de6:	f7fc fa97 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	2000009c 	.word	0x2000009c

08005df8 <lcd_init>:

void lcd_init (void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8005dfc:	2033      	movs	r0, #51	; 0x33
 8005dfe:	f7ff ff9b 	bl	8005d38 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8005e02:	2032      	movs	r0, #50	; 0x32
 8005e04:	f7ff ff98 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e08:	2032      	movs	r0, #50	; 0x32
 8005e0a:	f7fb fd9d 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8005e0e:	2028      	movs	r0, #40	; 0x28
 8005e10:	f7ff ff92 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e14:	2032      	movs	r0, #50	; 0x32
 8005e16:	f7fb fd97 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f7ff ff8c 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e20:	2032      	movs	r0, #50	; 0x32
 8005e22:	f7fb fd91 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8005e26:	2006      	movs	r0, #6
 8005e28:	f7ff ff86 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e2c:	2032      	movs	r0, #50	; 0x32
 8005e2e:	f7fb fd8b 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8005e32:	200c      	movs	r0, #12
 8005e34:	f7ff ff80 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e38:	2032      	movs	r0, #50	; 0x32
 8005e3a:	f7fb fd85 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8005e3e:	2002      	movs	r0, #2
 8005e40:	f7ff ff7a 	bl	8005d38 <lcd_send_cmd>
	HAL_Delay(50);
 8005e44:	2032      	movs	r0, #50	; 0x32
 8005e46:	f7fb fd7f 	bl	8001948 <HAL_Delay>
	lcd_send_cmd (0x80);
 8005e4a:	2080      	movs	r0, #128	; 0x80
 8005e4c:	f7ff ff74 	bl	8005d38 <lcd_send_cmd>
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8005e5c:	e006      	b.n	8005e6c <lcd_send_string+0x18>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ff96 	bl	8005d98 <lcd_send_data>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f4      	bne.n	8005e5e <lcd_send_string+0xa>
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d108      	bne.n	8005ea0 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	337f      	adds	r3, #127	; 0x7f
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	e008      	b.n	8005eb2 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	3340      	adds	r3, #64	; 0x40
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff3f 	bl	8005d38 <lcd_send_cmd>
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2C_Receive>:
 */
#include "i2c_master.h"
HAL_StatusTypeDef I2C_Transmit(I2C_HandleTypeDef* hi2c, uint16_t Slave_adress, uint8_t* pData_transmit,uint16_t size){
	return HAL_I2C_Master_Transmit_IT(hi2c, Slave_adress, pData_transmit, size);
}
HAL_StatusTypeDef I2C_Receive(I2C_HandleTypeDef* hi2c,  uint16_t Slave_adress, uint8_t* pData_recive, uint16_t size){
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	460b      	mov	r3, r1
 8005ed0:	817b      	strh	r3, [r7, #10]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Master_Receive_IT(hi2c, Slave_adress, pData_recive, size);
 8005ed6:	893b      	ldrh	r3, [r7, #8]
 8005ed8:	8979      	ldrh	r1, [r7, #10]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7fc fd85 	bl	80029ec <HAL_I2C_Master_Receive_IT>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_I2C_ListenCpltCallback>:

	#include "i2c_slave.h"

	#define RxSize 6
	uint8_t Rxdata[RxSize];
	void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fc ffc1 	bl	8002e7c <HAL_I2C_EnableListen_IT>
	}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_I2C_AddrCallback>:
	void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
 8005f10:	4613      	mov	r3, r2
 8005f12:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT){
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d106      	bne.n	8005f28 <HAL_I2C_AddrCallback+0x24>
			HAL_I2C_Slave_Seq_Receive_IT( hi2c, Rxdata, RxSize,I2C_FIRST_AND_LAST_FRAME);
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	4905      	ldr	r1, [pc, #20]	; (8005f34 <HAL_I2C_AddrCallback+0x30>)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fc ff39 	bl	8002d98 <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else{
			Error_Handler();
		}
	}
 8005f26:	e001      	b.n	8005f2c <HAL_I2C_AddrCallback+0x28>
			Error_Handler();
 8005f28:	f7fb fb30 	bl	800158c <Error_Handler>
	}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000168 	.word	0x20000168

08005f38 <HAL_I2C_SlaveRxCpltCallback>:
	void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

	}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <HAL_I2C_ErrorCallback>:
	void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc ff92 	bl	8002e7c <HAL_I2C_EnableListen_IT>
	}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	2000000c 	.word	0x2000000c

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	2600      	movs	r6, #0
 8005f70:	4d0c      	ldr	r5, [pc, #48]	; (8005fa4 <__libc_init_array+0x38>)
 8005f72:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	f001 fbea 	bl	8007754 <_init>
 8005f80:	2600      	movs	r6, #0
 8005f82:	4d0a      	ldr	r5, [pc, #40]	; (8005fac <__libc_init_array+0x40>)
 8005f84:	4c0a      	ldr	r4, [pc, #40]	; (8005fb0 <__libc_init_array+0x44>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08007838 	.word	0x08007838
 8005fa8:	08007838 	.word	0x08007838
 8005fac:	08007838 	.word	0x08007838
 8005fb0:	0800783c 	.word	0x0800783c

08005fb4 <memset>:
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4402      	add	r2, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <siprintf>:
 8005fc4:	b40e      	push	{r1, r2, r3}
 8005fc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fca:	b500      	push	{lr}
 8005fcc:	b09c      	sub	sp, #112	; 0x70
 8005fce:	ab1d      	add	r3, sp, #116	; 0x74
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	9006      	str	r0, [sp, #24]
 8005fd4:	9107      	str	r1, [sp, #28]
 8005fd6:	9104      	str	r1, [sp, #16]
 8005fd8:	4808      	ldr	r0, [pc, #32]	; (8005ffc <siprintf+0x38>)
 8005fda:	4909      	ldr	r1, [pc, #36]	; (8006000 <siprintf+0x3c>)
 8005fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe0:	9105      	str	r1, [sp, #20]
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	a902      	add	r1, sp, #8
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	f000 f868 	bl	80060bc <_svfiprintf_r>
 8005fec:	2200      	movs	r2, #0
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	b01c      	add	sp, #112	; 0x70
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	2000000c 	.word	0x2000000c
 8006000:	ffff0208 	.word	0xffff0208

08006004 <__ssputs_r>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	688e      	ldr	r6, [r1, #8]
 800600a:	4682      	mov	sl, r0
 800600c:	429e      	cmp	r6, r3
 800600e:	460c      	mov	r4, r1
 8006010:	4690      	mov	r8, r2
 8006012:	461f      	mov	r7, r3
 8006014:	d838      	bhi.n	8006088 <__ssputs_r+0x84>
 8006016:	898a      	ldrh	r2, [r1, #12]
 8006018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800601c:	d032      	beq.n	8006084 <__ssputs_r+0x80>
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	6909      	ldr	r1, [r1, #16]
 8006022:	3301      	adds	r3, #1
 8006024:	eba5 0901 	sub.w	r9, r5, r1
 8006028:	6965      	ldr	r5, [r4, #20]
 800602a:	444b      	add	r3, r9
 800602c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006034:	106d      	asrs	r5, r5, #1
 8006036:	429d      	cmp	r5, r3
 8006038:	bf38      	it	cc
 800603a:	461d      	movcc	r5, r3
 800603c:	0553      	lsls	r3, r2, #21
 800603e:	d531      	bpl.n	80060a4 <__ssputs_r+0xa0>
 8006040:	4629      	mov	r1, r5
 8006042:	f000 fb53 	bl	80066ec <_malloc_r>
 8006046:	4606      	mov	r6, r0
 8006048:	b950      	cbnz	r0, 8006060 <__ssputs_r+0x5c>
 800604a:	230c      	movs	r3, #12
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	f8ca 3000 	str.w	r3, [sl]
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	464a      	mov	r2, r9
 8006062:	6921      	ldr	r1, [r4, #16]
 8006064:	f000 face 	bl	8006604 <memcpy>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800606e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	6126      	str	r6, [r4, #16]
 8006076:	444e      	add	r6, r9
 8006078:	6026      	str	r6, [r4, #0]
 800607a:	463e      	mov	r6, r7
 800607c:	6165      	str	r5, [r4, #20]
 800607e:	eba5 0509 	sub.w	r5, r5, r9
 8006082:	60a5      	str	r5, [r4, #8]
 8006084:	42be      	cmp	r6, r7
 8006086:	d900      	bls.n	800608a <__ssputs_r+0x86>
 8006088:	463e      	mov	r6, r7
 800608a:	4632      	mov	r2, r6
 800608c:	4641      	mov	r1, r8
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	f000 fac6 	bl	8006620 <memmove>
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	4432      	add	r2, r6
 800609c:	2000      	movs	r0, #0
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	6022      	str	r2, [r4, #0]
 80060a2:	e7db      	b.n	800605c <__ssputs_r+0x58>
 80060a4:	462a      	mov	r2, r5
 80060a6:	f000 fb7b 	bl	80067a0 <_realloc_r>
 80060aa:	4606      	mov	r6, r0
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1e1      	bne.n	8006074 <__ssputs_r+0x70>
 80060b0:	4650      	mov	r0, sl
 80060b2:	6921      	ldr	r1, [r4, #16]
 80060b4:	f000 face 	bl	8006654 <_free_r>
 80060b8:	e7c7      	b.n	800604a <__ssputs_r+0x46>
	...

080060bc <_svfiprintf_r>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	4698      	mov	r8, r3
 80060c2:	898b      	ldrh	r3, [r1, #12]
 80060c4:	4607      	mov	r7, r0
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	460d      	mov	r5, r1
 80060ca:	4614      	mov	r4, r2
 80060cc:	b09d      	sub	sp, #116	; 0x74
 80060ce:	d50e      	bpl.n	80060ee <_svfiprintf_r+0x32>
 80060d0:	690b      	ldr	r3, [r1, #16]
 80060d2:	b963      	cbnz	r3, 80060ee <_svfiprintf_r+0x32>
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	f000 fb09 	bl	80066ec <_malloc_r>
 80060da:	6028      	str	r0, [r5, #0]
 80060dc:	6128      	str	r0, [r5, #16]
 80060de:	b920      	cbnz	r0, 80060ea <_svfiprintf_r+0x2e>
 80060e0:	230c      	movs	r3, #12
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	e0d1      	b.n	800628e <_svfiprintf_r+0x1d2>
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	616b      	str	r3, [r5, #20]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	2320      	movs	r3, #32
 80060f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060f8:	2330      	movs	r3, #48	; 0x30
 80060fa:	f04f 0901 	mov.w	r9, #1
 80060fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006102:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80062a8 <_svfiprintf_r+0x1ec>
 8006106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800610a:	4623      	mov	r3, r4
 800610c:	469a      	mov	sl, r3
 800610e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006112:	b10a      	cbz	r2, 8006118 <_svfiprintf_r+0x5c>
 8006114:	2a25      	cmp	r2, #37	; 0x25
 8006116:	d1f9      	bne.n	800610c <_svfiprintf_r+0x50>
 8006118:	ebba 0b04 	subs.w	fp, sl, r4
 800611c:	d00b      	beq.n	8006136 <_svfiprintf_r+0x7a>
 800611e:	465b      	mov	r3, fp
 8006120:	4622      	mov	r2, r4
 8006122:	4629      	mov	r1, r5
 8006124:	4638      	mov	r0, r7
 8006126:	f7ff ff6d 	bl	8006004 <__ssputs_r>
 800612a:	3001      	adds	r0, #1
 800612c:	f000 80aa 	beq.w	8006284 <_svfiprintf_r+0x1c8>
 8006130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006132:	445a      	add	r2, fp
 8006134:	9209      	str	r2, [sp, #36]	; 0x24
 8006136:	f89a 3000 	ldrb.w	r3, [sl]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80a2 	beq.w	8006284 <_svfiprintf_r+0x1c8>
 8006140:	2300      	movs	r3, #0
 8006142:	f04f 32ff 	mov.w	r2, #4294967295
 8006146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614a:	f10a 0a01 	add.w	sl, sl, #1
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	9307      	str	r3, [sp, #28]
 8006152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006156:	931a      	str	r3, [sp, #104]	; 0x68
 8006158:	4654      	mov	r4, sl
 800615a:	2205      	movs	r2, #5
 800615c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006160:	4851      	ldr	r0, [pc, #324]	; (80062a8 <_svfiprintf_r+0x1ec>)
 8006162:	f000 fa41 	bl	80065e8 <memchr>
 8006166:	9a04      	ldr	r2, [sp, #16]
 8006168:	b9d8      	cbnz	r0, 80061a2 <_svfiprintf_r+0xe6>
 800616a:	06d0      	lsls	r0, r2, #27
 800616c:	bf44      	itt	mi
 800616e:	2320      	movmi	r3, #32
 8006170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006174:	0711      	lsls	r1, r2, #28
 8006176:	bf44      	itt	mi
 8006178:	232b      	movmi	r3, #43	; 0x2b
 800617a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617e:	f89a 3000 	ldrb.w	r3, [sl]
 8006182:	2b2a      	cmp	r3, #42	; 0x2a
 8006184:	d015      	beq.n	80061b2 <_svfiprintf_r+0xf6>
 8006186:	4654      	mov	r4, sl
 8006188:	2000      	movs	r0, #0
 800618a:	f04f 0c0a 	mov.w	ip, #10
 800618e:	9a07      	ldr	r2, [sp, #28]
 8006190:	4621      	mov	r1, r4
 8006192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006196:	3b30      	subs	r3, #48	; 0x30
 8006198:	2b09      	cmp	r3, #9
 800619a:	d94e      	bls.n	800623a <_svfiprintf_r+0x17e>
 800619c:	b1b0      	cbz	r0, 80061cc <_svfiprintf_r+0x110>
 800619e:	9207      	str	r2, [sp, #28]
 80061a0:	e014      	b.n	80061cc <_svfiprintf_r+0x110>
 80061a2:	eba0 0308 	sub.w	r3, r0, r8
 80061a6:	fa09 f303 	lsl.w	r3, r9, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	46a2      	mov	sl, r4
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	e7d2      	b.n	8006158 <_svfiprintf_r+0x9c>
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	1d19      	adds	r1, r3, #4
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	9103      	str	r1, [sp, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfbb      	ittet	lt
 80061be:	425b      	neglt	r3, r3
 80061c0:	f042 0202 	orrlt.w	r2, r2, #2
 80061c4:	9307      	strge	r3, [sp, #28]
 80061c6:	9307      	strlt	r3, [sp, #28]
 80061c8:	bfb8      	it	lt
 80061ca:	9204      	strlt	r2, [sp, #16]
 80061cc:	7823      	ldrb	r3, [r4, #0]
 80061ce:	2b2e      	cmp	r3, #46	; 0x2e
 80061d0:	d10c      	bne.n	80061ec <_svfiprintf_r+0x130>
 80061d2:	7863      	ldrb	r3, [r4, #1]
 80061d4:	2b2a      	cmp	r3, #42	; 0x2a
 80061d6:	d135      	bne.n	8006244 <_svfiprintf_r+0x188>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	3402      	adds	r4, #2
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	9203      	str	r2, [sp, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ea:	9305      	str	r3, [sp, #20]
 80061ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062b8 <_svfiprintf_r+0x1fc>
 80061f0:	2203      	movs	r2, #3
 80061f2:	4650      	mov	r0, sl
 80061f4:	7821      	ldrb	r1, [r4, #0]
 80061f6:	f000 f9f7 	bl	80065e8 <memchr>
 80061fa:	b140      	cbz	r0, 800620e <_svfiprintf_r+0x152>
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	eba0 000a 	sub.w	r0, r0, sl
 8006202:	fa03 f000 	lsl.w	r0, r3, r0
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	3401      	adds	r4, #1
 800620a:	4303      	orrs	r3, r0
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006212:	2206      	movs	r2, #6
 8006214:	4825      	ldr	r0, [pc, #148]	; (80062ac <_svfiprintf_r+0x1f0>)
 8006216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621a:	f000 f9e5 	bl	80065e8 <memchr>
 800621e:	2800      	cmp	r0, #0
 8006220:	d038      	beq.n	8006294 <_svfiprintf_r+0x1d8>
 8006222:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <_svfiprintf_r+0x1f4>)
 8006224:	bb1b      	cbnz	r3, 800626e <_svfiprintf_r+0x1b2>
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	3307      	adds	r3, #7
 800622a:	f023 0307 	bic.w	r3, r3, #7
 800622e:	3308      	adds	r3, #8
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006234:	4433      	add	r3, r6
 8006236:	9309      	str	r3, [sp, #36]	; 0x24
 8006238:	e767      	b.n	800610a <_svfiprintf_r+0x4e>
 800623a:	460c      	mov	r4, r1
 800623c:	2001      	movs	r0, #1
 800623e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006242:	e7a5      	b.n	8006190 <_svfiprintf_r+0xd4>
 8006244:	2300      	movs	r3, #0
 8006246:	f04f 0c0a 	mov.w	ip, #10
 800624a:	4619      	mov	r1, r3
 800624c:	3401      	adds	r4, #1
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	4620      	mov	r0, r4
 8006252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006256:	3a30      	subs	r2, #48	; 0x30
 8006258:	2a09      	cmp	r2, #9
 800625a:	d903      	bls.n	8006264 <_svfiprintf_r+0x1a8>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0c5      	beq.n	80061ec <_svfiprintf_r+0x130>
 8006260:	9105      	str	r1, [sp, #20]
 8006262:	e7c3      	b.n	80061ec <_svfiprintf_r+0x130>
 8006264:	4604      	mov	r4, r0
 8006266:	2301      	movs	r3, #1
 8006268:	fb0c 2101 	mla	r1, ip, r1, r2
 800626c:	e7f0      	b.n	8006250 <_svfiprintf_r+0x194>
 800626e:	ab03      	add	r3, sp, #12
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	462a      	mov	r2, r5
 8006274:	4638      	mov	r0, r7
 8006276:	4b0f      	ldr	r3, [pc, #60]	; (80062b4 <_svfiprintf_r+0x1f8>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	f3af 8000 	nop.w
 800627e:	1c42      	adds	r2, r0, #1
 8006280:	4606      	mov	r6, r0
 8006282:	d1d6      	bne.n	8006232 <_svfiprintf_r+0x176>
 8006284:	89ab      	ldrh	r3, [r5, #12]
 8006286:	065b      	lsls	r3, r3, #25
 8006288:	f53f af2c 	bmi.w	80060e4 <_svfiprintf_r+0x28>
 800628c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800628e:	b01d      	add	sp, #116	; 0x74
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	ab03      	add	r3, sp, #12
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	462a      	mov	r2, r5
 800629a:	4638      	mov	r0, r7
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <_svfiprintf_r+0x1f8>)
 800629e:	a904      	add	r1, sp, #16
 80062a0:	f000 f87c 	bl	800639c <_printf_i>
 80062a4:	e7eb      	b.n	800627e <_svfiprintf_r+0x1c2>
 80062a6:	bf00      	nop
 80062a8:	080077be 	.word	0x080077be
 80062ac:	080077c8 	.word	0x080077c8
 80062b0:	00000000 	.word	0x00000000
 80062b4:	08006005 	.word	0x08006005
 80062b8:	080077c4 	.word	0x080077c4

080062bc <_printf_common>:
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	4616      	mov	r6, r2
 80062c2:	4699      	mov	r9, r3
 80062c4:	688a      	ldr	r2, [r1, #8]
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	4607      	mov	r7, r0
 80062ca:	4293      	cmp	r3, r2
 80062cc:	bfb8      	it	lt
 80062ce:	4613      	movlt	r3, r2
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d6:	460c      	mov	r4, r1
 80062d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062dc:	b10a      	cbz	r2, 80062e2 <_printf_common+0x26>
 80062de:	3301      	adds	r3, #1
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	0699      	lsls	r1, r3, #26
 80062e6:	bf42      	ittt	mi
 80062e8:	6833      	ldrmi	r3, [r6, #0]
 80062ea:	3302      	addmi	r3, #2
 80062ec:	6033      	strmi	r3, [r6, #0]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d106      	bne.n	8006304 <_printf_common+0x48>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	6832      	ldr	r2, [r6, #0]
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	42ab      	cmp	r3, r5
 8006302:	dc28      	bgt.n	8006356 <_printf_common+0x9a>
 8006304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006308:	1e13      	subs	r3, r2, #0
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	bf18      	it	ne
 800630e:	2301      	movne	r3, #1
 8006310:	0692      	lsls	r2, r2, #26
 8006312:	d42d      	bmi.n	8006370 <_printf_common+0xb4>
 8006314:	4649      	mov	r1, r9
 8006316:	4638      	mov	r0, r7
 8006318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800631c:	47c0      	blx	r8
 800631e:	3001      	adds	r0, #1
 8006320:	d020      	beq.n	8006364 <_printf_common+0xa8>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	68e5      	ldr	r5, [r4, #12]
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	2b04      	cmp	r3, #4
 800632c:	bf18      	it	ne
 800632e:	2500      	movne	r5, #0
 8006330:	6832      	ldr	r2, [r6, #0]
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	bf08      	it	eq
 800633a:	1aad      	subeq	r5, r5, r2
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	bf08      	it	eq
 8006340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006344:	4293      	cmp	r3, r2
 8006346:	bfc4      	itt	gt
 8006348:	1a9b      	subgt	r3, r3, r2
 800634a:	18ed      	addgt	r5, r5, r3
 800634c:	341a      	adds	r4, #26
 800634e:	42b5      	cmp	r5, r6
 8006350:	d11a      	bne.n	8006388 <_printf_common+0xcc>
 8006352:	2000      	movs	r0, #0
 8006354:	e008      	b.n	8006368 <_printf_common+0xac>
 8006356:	2301      	movs	r3, #1
 8006358:	4652      	mov	r2, sl
 800635a:	4649      	mov	r1, r9
 800635c:	4638      	mov	r0, r7
 800635e:	47c0      	blx	r8
 8006360:	3001      	adds	r0, #1
 8006362:	d103      	bne.n	800636c <_printf_common+0xb0>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636c:	3501      	adds	r5, #1
 800636e:	e7c4      	b.n	80062fa <_printf_common+0x3e>
 8006370:	2030      	movs	r0, #48	; 0x30
 8006372:	18e1      	adds	r1, r4, r3
 8006374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800637e:	4422      	add	r2, r4
 8006380:	3302      	adds	r3, #2
 8006382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006386:	e7c5      	b.n	8006314 <_printf_common+0x58>
 8006388:	2301      	movs	r3, #1
 800638a:	4622      	mov	r2, r4
 800638c:	4649      	mov	r1, r9
 800638e:	4638      	mov	r0, r7
 8006390:	47c0      	blx	r8
 8006392:	3001      	adds	r0, #1
 8006394:	d0e6      	beq.n	8006364 <_printf_common+0xa8>
 8006396:	3601      	adds	r6, #1
 8006398:	e7d9      	b.n	800634e <_printf_common+0x92>
	...

0800639c <_printf_i>:
 800639c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	460c      	mov	r4, r1
 80063a2:	7e27      	ldrb	r7, [r4, #24]
 80063a4:	4691      	mov	r9, r2
 80063a6:	2f78      	cmp	r7, #120	; 0x78
 80063a8:	4680      	mov	r8, r0
 80063aa:	469a      	mov	sl, r3
 80063ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b2:	d807      	bhi.n	80063c4 <_printf_i+0x28>
 80063b4:	2f62      	cmp	r7, #98	; 0x62
 80063b6:	d80a      	bhi.n	80063ce <_printf_i+0x32>
 80063b8:	2f00      	cmp	r7, #0
 80063ba:	f000 80d9 	beq.w	8006570 <_printf_i+0x1d4>
 80063be:	2f58      	cmp	r7, #88	; 0x58
 80063c0:	f000 80a4 	beq.w	800650c <_printf_i+0x170>
 80063c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063cc:	e03a      	b.n	8006444 <_printf_i+0xa8>
 80063ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063d2:	2b15      	cmp	r3, #21
 80063d4:	d8f6      	bhi.n	80063c4 <_printf_i+0x28>
 80063d6:	a001      	add	r0, pc, #4	; (adr r0, 80063dc <_printf_i+0x40>)
 80063d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006449 	.word	0x08006449
 80063e4:	080063c5 	.word	0x080063c5
 80063e8:	080063c5 	.word	0x080063c5
 80063ec:	080063c5 	.word	0x080063c5
 80063f0:	080063c5 	.word	0x080063c5
 80063f4:	08006449 	.word	0x08006449
 80063f8:	080063c5 	.word	0x080063c5
 80063fc:	080063c5 	.word	0x080063c5
 8006400:	080063c5 	.word	0x080063c5
 8006404:	080063c5 	.word	0x080063c5
 8006408:	08006557 	.word	0x08006557
 800640c:	08006479 	.word	0x08006479
 8006410:	08006539 	.word	0x08006539
 8006414:	080063c5 	.word	0x080063c5
 8006418:	080063c5 	.word	0x080063c5
 800641c:	08006579 	.word	0x08006579
 8006420:	080063c5 	.word	0x080063c5
 8006424:	08006479 	.word	0x08006479
 8006428:	080063c5 	.word	0x080063c5
 800642c:	080063c5 	.word	0x080063c5
 8006430:	08006541 	.word	0x08006541
 8006434:	680b      	ldr	r3, [r1, #0]
 8006436:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	600a      	str	r2, [r1, #0]
 8006440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006444:	2301      	movs	r3, #1
 8006446:	e0a4      	b.n	8006592 <_printf_i+0x1f6>
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	6808      	ldr	r0, [r1, #0]
 800644c:	062e      	lsls	r6, r5, #24
 800644e:	f100 0304 	add.w	r3, r0, #4
 8006452:	d50a      	bpl.n	800646a <_printf_i+0xce>
 8006454:	6805      	ldr	r5, [r0, #0]
 8006456:	600b      	str	r3, [r1, #0]
 8006458:	2d00      	cmp	r5, #0
 800645a:	da03      	bge.n	8006464 <_printf_i+0xc8>
 800645c:	232d      	movs	r3, #45	; 0x2d
 800645e:	426d      	negs	r5, r5
 8006460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006464:	230a      	movs	r3, #10
 8006466:	485e      	ldr	r0, [pc, #376]	; (80065e0 <_printf_i+0x244>)
 8006468:	e019      	b.n	800649e <_printf_i+0x102>
 800646a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800646e:	6805      	ldr	r5, [r0, #0]
 8006470:	600b      	str	r3, [r1, #0]
 8006472:	bf18      	it	ne
 8006474:	b22d      	sxthne	r5, r5
 8006476:	e7ef      	b.n	8006458 <_printf_i+0xbc>
 8006478:	680b      	ldr	r3, [r1, #0]
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	1d18      	adds	r0, r3, #4
 800647e:	6008      	str	r0, [r1, #0]
 8006480:	0628      	lsls	r0, r5, #24
 8006482:	d501      	bpl.n	8006488 <_printf_i+0xec>
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	e002      	b.n	800648e <_printf_i+0xf2>
 8006488:	0669      	lsls	r1, r5, #25
 800648a:	d5fb      	bpl.n	8006484 <_printf_i+0xe8>
 800648c:	881d      	ldrh	r5, [r3, #0]
 800648e:	2f6f      	cmp	r7, #111	; 0x6f
 8006490:	bf0c      	ite	eq
 8006492:	2308      	moveq	r3, #8
 8006494:	230a      	movne	r3, #10
 8006496:	4852      	ldr	r0, [pc, #328]	; (80065e0 <_printf_i+0x244>)
 8006498:	2100      	movs	r1, #0
 800649a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800649e:	6866      	ldr	r6, [r4, #4]
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	bfa8      	it	ge
 80064a4:	6821      	ldrge	r1, [r4, #0]
 80064a6:	60a6      	str	r6, [r4, #8]
 80064a8:	bfa4      	itt	ge
 80064aa:	f021 0104 	bicge.w	r1, r1, #4
 80064ae:	6021      	strge	r1, [r4, #0]
 80064b0:	b90d      	cbnz	r5, 80064b6 <_printf_i+0x11a>
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d04d      	beq.n	8006552 <_printf_i+0x1b6>
 80064b6:	4616      	mov	r6, r2
 80064b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80064bc:	fb03 5711 	mls	r7, r3, r1, r5
 80064c0:	5dc7      	ldrb	r7, [r0, r7]
 80064c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064c6:	462f      	mov	r7, r5
 80064c8:	42bb      	cmp	r3, r7
 80064ca:	460d      	mov	r5, r1
 80064cc:	d9f4      	bls.n	80064b8 <_printf_i+0x11c>
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d10b      	bne.n	80064ea <_printf_i+0x14e>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07df      	lsls	r7, r3, #31
 80064d6:	d508      	bpl.n	80064ea <_printf_i+0x14e>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	6861      	ldr	r1, [r4, #4]
 80064dc:	4299      	cmp	r1, r3
 80064de:	bfde      	ittt	le
 80064e0:	2330      	movle	r3, #48	; 0x30
 80064e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ea:	1b92      	subs	r2, r2, r6
 80064ec:	6122      	str	r2, [r4, #16]
 80064ee:	464b      	mov	r3, r9
 80064f0:	4621      	mov	r1, r4
 80064f2:	4640      	mov	r0, r8
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	aa03      	add	r2, sp, #12
 80064fa:	f7ff fedf 	bl	80062bc <_printf_common>
 80064fe:	3001      	adds	r0, #1
 8006500:	d14c      	bne.n	800659c <_printf_i+0x200>
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	b004      	add	sp, #16
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	4834      	ldr	r0, [pc, #208]	; (80065e0 <_printf_i+0x244>)
 800650e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006512:	680e      	ldr	r6, [r1, #0]
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	f856 5b04 	ldr.w	r5, [r6], #4
 800651a:	061f      	lsls	r7, r3, #24
 800651c:	600e      	str	r6, [r1, #0]
 800651e:	d514      	bpl.n	800654a <_printf_i+0x1ae>
 8006520:	07d9      	lsls	r1, r3, #31
 8006522:	bf44      	itt	mi
 8006524:	f043 0320 	orrmi.w	r3, r3, #32
 8006528:	6023      	strmi	r3, [r4, #0]
 800652a:	b91d      	cbnz	r5, 8006534 <_printf_i+0x198>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f023 0320 	bic.w	r3, r3, #32
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	2310      	movs	r3, #16
 8006536:	e7af      	b.n	8006498 <_printf_i+0xfc>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f043 0320 	orr.w	r3, r3, #32
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	2378      	movs	r3, #120	; 0x78
 8006542:	4828      	ldr	r0, [pc, #160]	; (80065e4 <_printf_i+0x248>)
 8006544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006548:	e7e3      	b.n	8006512 <_printf_i+0x176>
 800654a:	065e      	lsls	r6, r3, #25
 800654c:	bf48      	it	mi
 800654e:	b2ad      	uxthmi	r5, r5
 8006550:	e7e6      	b.n	8006520 <_printf_i+0x184>
 8006552:	4616      	mov	r6, r2
 8006554:	e7bb      	b.n	80064ce <_printf_i+0x132>
 8006556:	680b      	ldr	r3, [r1, #0]
 8006558:	6826      	ldr	r6, [r4, #0]
 800655a:	1d1d      	adds	r5, r3, #4
 800655c:	6960      	ldr	r0, [r4, #20]
 800655e:	600d      	str	r5, [r1, #0]
 8006560:	0635      	lsls	r5, r6, #24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0x1ce>
 8006566:	6018      	str	r0, [r3, #0]
 8006568:	e002      	b.n	8006570 <_printf_i+0x1d4>
 800656a:	0671      	lsls	r1, r6, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0x1ca>
 800656e:	8018      	strh	r0, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	4616      	mov	r6, r2
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	e7ba      	b.n	80064ee <_printf_i+0x152>
 8006578:	680b      	ldr	r3, [r1, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	600a      	str	r2, [r1, #0]
 800657e:	681e      	ldr	r6, [r3, #0]
 8006580:	2100      	movs	r1, #0
 8006582:	4630      	mov	r0, r6
 8006584:	6862      	ldr	r2, [r4, #4]
 8006586:	f000 f82f 	bl	80065e8 <memchr>
 800658a:	b108      	cbz	r0, 8006590 <_printf_i+0x1f4>
 800658c:	1b80      	subs	r0, r0, r6
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659a:	e7a8      	b.n	80064ee <_printf_i+0x152>
 800659c:	4632      	mov	r2, r6
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	47d0      	blx	sl
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0ab      	beq.n	8006502 <_printf_i+0x166>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d413      	bmi.n	80065d8 <_printf_i+0x23c>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e7a4      	b.n	8006506 <_printf_i+0x16a>
 80065bc:	2301      	movs	r3, #1
 80065be:	4632      	mov	r2, r6
 80065c0:	4649      	mov	r1, r9
 80065c2:	4640      	mov	r0, r8
 80065c4:	47d0      	blx	sl
 80065c6:	3001      	adds	r0, #1
 80065c8:	d09b      	beq.n	8006502 <_printf_i+0x166>
 80065ca:	3501      	adds	r5, #1
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	1a5b      	subs	r3, r3, r1
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	dcf2      	bgt.n	80065bc <_printf_i+0x220>
 80065d6:	e7eb      	b.n	80065b0 <_printf_i+0x214>
 80065d8:	2500      	movs	r5, #0
 80065da:	f104 0619 	add.w	r6, r4, #25
 80065de:	e7f5      	b.n	80065cc <_printf_i+0x230>
 80065e0:	080077cf 	.word	0x080077cf
 80065e4:	080077e0 	.word	0x080077e0

080065e8 <memchr>:
 80065e8:	4603      	mov	r3, r0
 80065ea:	b510      	push	{r4, lr}
 80065ec:	b2c9      	uxtb	r1, r1
 80065ee:	4402      	add	r2, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	d101      	bne.n	80065fa <memchr+0x12>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e003      	b.n	8006602 <memchr+0x1a>
 80065fa:	7804      	ldrb	r4, [r0, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	428c      	cmp	r4, r1
 8006600:	d1f6      	bne.n	80065f0 <memchr+0x8>
 8006602:	bd10      	pop	{r4, pc}

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	4291      	cmp	r1, r2
 8006618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <memmove>:
 8006620:	4288      	cmp	r0, r1
 8006622:	b510      	push	{r4, lr}
 8006624:	eb01 0402 	add.w	r4, r1, r2
 8006628:	d902      	bls.n	8006630 <memmove+0x10>
 800662a:	4284      	cmp	r4, r0
 800662c:	4623      	mov	r3, r4
 800662e:	d807      	bhi.n	8006640 <memmove+0x20>
 8006630:	1e43      	subs	r3, r0, #1
 8006632:	42a1      	cmp	r1, r4
 8006634:	d008      	beq.n	8006648 <memmove+0x28>
 8006636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800663a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800663e:	e7f8      	b.n	8006632 <memmove+0x12>
 8006640:	4601      	mov	r1, r0
 8006642:	4402      	add	r2, r0
 8006644:	428a      	cmp	r2, r1
 8006646:	d100      	bne.n	800664a <memmove+0x2a>
 8006648:	bd10      	pop	{r4, pc}
 800664a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800664e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006652:	e7f7      	b.n	8006644 <memmove+0x24>

08006654 <_free_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4605      	mov	r5, r0
 8006658:	2900      	cmp	r1, #0
 800665a:	d043      	beq.n	80066e4 <_free_r+0x90>
 800665c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006660:	1f0c      	subs	r4, r1, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	bfb8      	it	lt
 8006666:	18e4      	addlt	r4, r4, r3
 8006668:	f000 f8d0 	bl	800680c <__malloc_lock>
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <_free_r+0x94>)
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	4610      	mov	r0, r2
 8006672:	b933      	cbnz	r3, 8006682 <_free_r+0x2e>
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6014      	str	r4, [r2, #0]
 8006678:	4628      	mov	r0, r5
 800667a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800667e:	f000 b8cb 	b.w	8006818 <__malloc_unlock>
 8006682:	42a3      	cmp	r3, r4
 8006684:	d90a      	bls.n	800669c <_free_r+0x48>
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	1862      	adds	r2, r4, r1
 800668a:	4293      	cmp	r3, r2
 800668c:	bf01      	itttt	eq
 800668e:	681a      	ldreq	r2, [r3, #0]
 8006690:	685b      	ldreq	r3, [r3, #4]
 8006692:	1852      	addeq	r2, r2, r1
 8006694:	6022      	streq	r2, [r4, #0]
 8006696:	6063      	str	r3, [r4, #4]
 8006698:	6004      	str	r4, [r0, #0]
 800669a:	e7ed      	b.n	8006678 <_free_r+0x24>
 800669c:	461a      	mov	r2, r3
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b10b      	cbz	r3, 80066a6 <_free_r+0x52>
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	d9fa      	bls.n	800669c <_free_r+0x48>
 80066a6:	6811      	ldr	r1, [r2, #0]
 80066a8:	1850      	adds	r0, r2, r1
 80066aa:	42a0      	cmp	r0, r4
 80066ac:	d10b      	bne.n	80066c6 <_free_r+0x72>
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	4401      	add	r1, r0
 80066b2:	1850      	adds	r0, r2, r1
 80066b4:	4283      	cmp	r3, r0
 80066b6:	6011      	str	r1, [r2, #0]
 80066b8:	d1de      	bne.n	8006678 <_free_r+0x24>
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4401      	add	r1, r0
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	6053      	str	r3, [r2, #4]
 80066c4:	e7d8      	b.n	8006678 <_free_r+0x24>
 80066c6:	d902      	bls.n	80066ce <_free_r+0x7a>
 80066c8:	230c      	movs	r3, #12
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	e7d4      	b.n	8006678 <_free_r+0x24>
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	1821      	adds	r1, r4, r0
 80066d2:	428b      	cmp	r3, r1
 80066d4:	bf01      	itttt	eq
 80066d6:	6819      	ldreq	r1, [r3, #0]
 80066d8:	685b      	ldreq	r3, [r3, #4]
 80066da:	1809      	addeq	r1, r1, r0
 80066dc:	6021      	streq	r1, [r4, #0]
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6054      	str	r4, [r2, #4]
 80066e2:	e7c9      	b.n	8006678 <_free_r+0x24>
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	20000094 	.word	0x20000094

080066ec <_malloc_r>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	1ccd      	adds	r5, r1, #3
 80066f0:	f025 0503 	bic.w	r5, r5, #3
 80066f4:	3508      	adds	r5, #8
 80066f6:	2d0c      	cmp	r5, #12
 80066f8:	bf38      	it	cc
 80066fa:	250c      	movcc	r5, #12
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	4606      	mov	r6, r0
 8006700:	db01      	blt.n	8006706 <_malloc_r+0x1a>
 8006702:	42a9      	cmp	r1, r5
 8006704:	d903      	bls.n	800670e <_malloc_r+0x22>
 8006706:	230c      	movs	r3, #12
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670e:	f000 f87d 	bl	800680c <__malloc_lock>
 8006712:	4921      	ldr	r1, [pc, #132]	; (8006798 <_malloc_r+0xac>)
 8006714:	680a      	ldr	r2, [r1, #0]
 8006716:	4614      	mov	r4, r2
 8006718:	b99c      	cbnz	r4, 8006742 <_malloc_r+0x56>
 800671a:	4f20      	ldr	r7, [pc, #128]	; (800679c <_malloc_r+0xb0>)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	b923      	cbnz	r3, 800672a <_malloc_r+0x3e>
 8006720:	4621      	mov	r1, r4
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f862 	bl	80067ec <_sbrk_r>
 8006728:	6038      	str	r0, [r7, #0]
 800672a:	4629      	mov	r1, r5
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f85d 	bl	80067ec <_sbrk_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d123      	bne.n	800677e <_malloc_r+0x92>
 8006736:	230c      	movs	r3, #12
 8006738:	4630      	mov	r0, r6
 800673a:	6033      	str	r3, [r6, #0]
 800673c:	f000 f86c 	bl	8006818 <__malloc_unlock>
 8006740:	e7e3      	b.n	800670a <_malloc_r+0x1e>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	1b5b      	subs	r3, r3, r5
 8006746:	d417      	bmi.n	8006778 <_malloc_r+0x8c>
 8006748:	2b0b      	cmp	r3, #11
 800674a:	d903      	bls.n	8006754 <_malloc_r+0x68>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	441c      	add	r4, r3
 8006750:	6025      	str	r5, [r4, #0]
 8006752:	e004      	b.n	800675e <_malloc_r+0x72>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	42a2      	cmp	r2, r4
 8006758:	bf0c      	ite	eq
 800675a:	600b      	streq	r3, [r1, #0]
 800675c:	6053      	strne	r3, [r2, #4]
 800675e:	4630      	mov	r0, r6
 8006760:	f000 f85a 	bl	8006818 <__malloc_unlock>
 8006764:	f104 000b 	add.w	r0, r4, #11
 8006768:	1d23      	adds	r3, r4, #4
 800676a:	f020 0007 	bic.w	r0, r0, #7
 800676e:	1ac2      	subs	r2, r0, r3
 8006770:	d0cc      	beq.n	800670c <_malloc_r+0x20>
 8006772:	1a1b      	subs	r3, r3, r0
 8006774:	50a3      	str	r3, [r4, r2]
 8006776:	e7c9      	b.n	800670c <_malloc_r+0x20>
 8006778:	4622      	mov	r2, r4
 800677a:	6864      	ldr	r4, [r4, #4]
 800677c:	e7cc      	b.n	8006718 <_malloc_r+0x2c>
 800677e:	1cc4      	adds	r4, r0, #3
 8006780:	f024 0403 	bic.w	r4, r4, #3
 8006784:	42a0      	cmp	r0, r4
 8006786:	d0e3      	beq.n	8006750 <_malloc_r+0x64>
 8006788:	1a21      	subs	r1, r4, r0
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f82e 	bl	80067ec <_sbrk_r>
 8006790:	3001      	adds	r0, #1
 8006792:	d1dd      	bne.n	8006750 <_malloc_r+0x64>
 8006794:	e7cf      	b.n	8006736 <_malloc_r+0x4a>
 8006796:	bf00      	nop
 8006798:	20000094 	.word	0x20000094
 800679c:	20000098 	.word	0x20000098

080067a0 <_realloc_r>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	4607      	mov	r7, r0
 80067a4:	4614      	mov	r4, r2
 80067a6:	460e      	mov	r6, r1
 80067a8:	b921      	cbnz	r1, 80067b4 <_realloc_r+0x14>
 80067aa:	4611      	mov	r1, r2
 80067ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067b0:	f7ff bf9c 	b.w	80066ec <_malloc_r>
 80067b4:	b922      	cbnz	r2, 80067c0 <_realloc_r+0x20>
 80067b6:	f7ff ff4d 	bl	8006654 <_free_r>
 80067ba:	4625      	mov	r5, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c0:	f000 f830 	bl	8006824 <_malloc_usable_size_r>
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d20f      	bcs.n	80067e8 <_realloc_r+0x48>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4638      	mov	r0, r7
 80067cc:	f7ff ff8e 	bl	80066ec <_malloc_r>
 80067d0:	4605      	mov	r5, r0
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d0f2      	beq.n	80067bc <_realloc_r+0x1c>
 80067d6:	4631      	mov	r1, r6
 80067d8:	4622      	mov	r2, r4
 80067da:	f7ff ff13 	bl	8006604 <memcpy>
 80067de:	4631      	mov	r1, r6
 80067e0:	4638      	mov	r0, r7
 80067e2:	f7ff ff37 	bl	8006654 <_free_r>
 80067e6:	e7e9      	b.n	80067bc <_realloc_r+0x1c>
 80067e8:	4635      	mov	r5, r6
 80067ea:	e7e7      	b.n	80067bc <_realloc_r+0x1c>

080067ec <_sbrk_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	2300      	movs	r3, #0
 80067f0:	4d05      	ldr	r5, [pc, #20]	; (8006808 <_sbrk_r+0x1c>)
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	f7fa ffe2 	bl	80017c0 <_sbrk>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_sbrk_r+0x1a>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_sbrk_r+0x1a>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	20000170 	.word	0x20000170

0800680c <__malloc_lock>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__malloc_lock+0x8>)
 800680e:	f000 b811 	b.w	8006834 <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	20000178 	.word	0x20000178

08006818 <__malloc_unlock>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__malloc_unlock+0x8>)
 800681a:	f000 b80c 	b.w	8006836 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	20000178 	.word	0x20000178

08006824 <_malloc_usable_size_r>:
 8006824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006828:	1f18      	subs	r0, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfbc      	itt	lt
 800682e:	580b      	ldrlt	r3, [r1, r0]
 8006830:	18c0      	addlt	r0, r0, r3
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_acquire_recursive>:
 8006834:	4770      	bx	lr

08006836 <__retarget_lock_release_recursive>:
 8006836:	4770      	bx	lr

08006838 <pow>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	461f      	mov	r7, r3
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	4616      	mov	r6, r2
 8006844:	f000 f8a4 	bl	8006990 <__ieee754_pow>
 8006848:	4b4d      	ldr	r3, [pc, #308]	; (8006980 <pow+0x148>)
 800684a:	4604      	mov	r4, r0
 800684c:	f993 3000 	ldrsb.w	r3, [r3]
 8006850:	460d      	mov	r5, r1
 8006852:	3301      	adds	r3, #1
 8006854:	d015      	beq.n	8006882 <pow+0x4a>
 8006856:	4632      	mov	r2, r6
 8006858:	463b      	mov	r3, r7
 800685a:	4630      	mov	r0, r6
 800685c:	4639      	mov	r1, r7
 800685e:	f7fa f8cd 	bl	80009fc <__aeabi_dcmpun>
 8006862:	b970      	cbnz	r0, 8006882 <pow+0x4a>
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7fa f8c6 	bl	80009fc <__aeabi_dcmpun>
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	b148      	cbz	r0, 800688a <pow+0x52>
 8006876:	4630      	mov	r0, r6
 8006878:	4639      	mov	r1, r7
 800687a:	f7fa f88d 	bl	8000998 <__aeabi_dcmpeq>
 800687e:	2800      	cmp	r0, #0
 8006880:	d17b      	bne.n	800697a <pow+0x142>
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7fa f883 	bl	8000998 <__aeabi_dcmpeq>
 8006892:	b1e0      	cbz	r0, 80068ce <pow+0x96>
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f87c 	bl	8000998 <__aeabi_dcmpeq>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d16a      	bne.n	800697a <pow+0x142>
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f000 fe37 	bl	800751a <finite>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d0e8      	beq.n	8006882 <pow+0x4a>
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7fa f878 	bl	80009ac <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d0e0      	beq.n	8006882 <pow+0x4a>
 80068c0:	f7ff fb4e 	bl	8005f60 <__errno>
 80068c4:	2321      	movs	r3, #33	; 0x21
 80068c6:	2400      	movs	r4, #0
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	4d2e      	ldr	r5, [pc, #184]	; (8006984 <pow+0x14c>)
 80068cc:	e7d9      	b.n	8006882 <pow+0x4a>
 80068ce:	4620      	mov	r0, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	f000 fe22 	bl	800751a <finite>
 80068d6:	bba8      	cbnz	r0, 8006944 <pow+0x10c>
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f000 fe1d 	bl	800751a <finite>
 80068e0:	b380      	cbz	r0, 8006944 <pow+0x10c>
 80068e2:	4630      	mov	r0, r6
 80068e4:	4639      	mov	r1, r7
 80068e6:	f000 fe18 	bl	800751a <finite>
 80068ea:	b358      	cbz	r0, 8006944 <pow+0x10c>
 80068ec:	4622      	mov	r2, r4
 80068ee:	462b      	mov	r3, r5
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7fa f882 	bl	80009fc <__aeabi_dcmpun>
 80068f8:	b160      	cbz	r0, 8006914 <pow+0xdc>
 80068fa:	f7ff fb31 	bl	8005f60 <__errno>
 80068fe:	2321      	movs	r3, #33	; 0x21
 8006900:	2200      	movs	r2, #0
 8006902:	6003      	str	r3, [r0, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	f7f9 ff07 	bl	800071c <__aeabi_ddiv>
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	e7b6      	b.n	8006882 <pow+0x4a>
 8006914:	f7ff fb24 	bl	8005f60 <__errno>
 8006918:	2322      	movs	r3, #34	; 0x22
 800691a:	2200      	movs	r2, #0
 800691c:	6003      	str	r3, [r0, #0]
 800691e:	4649      	mov	r1, r9
 8006920:	2300      	movs	r3, #0
 8006922:	4640      	mov	r0, r8
 8006924:	f7fa f842 	bl	80009ac <__aeabi_dcmplt>
 8006928:	2400      	movs	r4, #0
 800692a:	b148      	cbz	r0, 8006940 <pow+0x108>
 800692c:	4630      	mov	r0, r6
 800692e:	4639      	mov	r1, r7
 8006930:	f000 fe00 	bl	8007534 <rint>
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	f7fa f82e 	bl	8000998 <__aeabi_dcmpeq>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0c4      	beq.n	80068ca <pow+0x92>
 8006940:	4d11      	ldr	r5, [pc, #68]	; (8006988 <pow+0x150>)
 8006942:	e79e      	b.n	8006882 <pow+0x4a>
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	f7fa f824 	bl	8000998 <__aeabi_dcmpeq>
 8006950:	2800      	cmp	r0, #0
 8006952:	d096      	beq.n	8006882 <pow+0x4a>
 8006954:	4640      	mov	r0, r8
 8006956:	4649      	mov	r1, r9
 8006958:	f000 fddf 	bl	800751a <finite>
 800695c:	2800      	cmp	r0, #0
 800695e:	d090      	beq.n	8006882 <pow+0x4a>
 8006960:	4630      	mov	r0, r6
 8006962:	4639      	mov	r1, r7
 8006964:	f000 fdd9 	bl	800751a <finite>
 8006968:	2800      	cmp	r0, #0
 800696a:	d08a      	beq.n	8006882 <pow+0x4a>
 800696c:	f7ff faf8 	bl	8005f60 <__errno>
 8006970:	2322      	movs	r3, #34	; 0x22
 8006972:	2400      	movs	r4, #0
 8006974:	2500      	movs	r5, #0
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	e783      	b.n	8006882 <pow+0x4a>
 800697a:	2400      	movs	r4, #0
 800697c:	4d03      	ldr	r5, [pc, #12]	; (800698c <pow+0x154>)
 800697e:	e780      	b.n	8006882 <pow+0x4a>
 8006980:	20000070 	.word	0x20000070
 8006984:	fff00000 	.word	0xfff00000
 8006988:	7ff00000 	.word	0x7ff00000
 800698c:	3ff00000 	.word	0x3ff00000

08006990 <__ieee754_pow>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	b093      	sub	sp, #76	; 0x4c
 8006996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800699a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800699e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80069a2:	ea55 0302 	orrs.w	r3, r5, r2
 80069a6:	4607      	mov	r7, r0
 80069a8:	4688      	mov	r8, r1
 80069aa:	f000 84bf 	beq.w	800732c <__ieee754_pow+0x99c>
 80069ae:	4b7e      	ldr	r3, [pc, #504]	; (8006ba8 <__ieee754_pow+0x218>)
 80069b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80069b4:	429c      	cmp	r4, r3
 80069b6:	4689      	mov	r9, r1
 80069b8:	4682      	mov	sl, r0
 80069ba:	dc09      	bgt.n	80069d0 <__ieee754_pow+0x40>
 80069bc:	d103      	bne.n	80069c6 <__ieee754_pow+0x36>
 80069be:	b978      	cbnz	r0, 80069e0 <__ieee754_pow+0x50>
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	dd02      	ble.n	80069ca <__ieee754_pow+0x3a>
 80069c4:	e00c      	b.n	80069e0 <__ieee754_pow+0x50>
 80069c6:	429d      	cmp	r5, r3
 80069c8:	dc02      	bgt.n	80069d0 <__ieee754_pow+0x40>
 80069ca:	429d      	cmp	r5, r3
 80069cc:	d10e      	bne.n	80069ec <__ieee754_pow+0x5c>
 80069ce:	b16a      	cbz	r2, 80069ec <__ieee754_pow+0x5c>
 80069d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80069d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069d8:	ea54 030a 	orrs.w	r3, r4, sl
 80069dc:	f000 84a6 	beq.w	800732c <__ieee754_pow+0x99c>
 80069e0:	4872      	ldr	r0, [pc, #456]	; (8006bac <__ieee754_pow+0x21c>)
 80069e2:	b013      	add	sp, #76	; 0x4c
 80069e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	f000 bd9e 	b.w	8007528 <nan>
 80069ec:	f1b9 0f00 	cmp.w	r9, #0
 80069f0:	da39      	bge.n	8006a66 <__ieee754_pow+0xd6>
 80069f2:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <__ieee754_pow+0x220>)
 80069f4:	429d      	cmp	r5, r3
 80069f6:	dc54      	bgt.n	8006aa2 <__ieee754_pow+0x112>
 80069f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80069fc:	429d      	cmp	r5, r3
 80069fe:	f340 84a6 	ble.w	800734e <__ieee754_pow+0x9be>
 8006a02:	152b      	asrs	r3, r5, #20
 8006a04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a08:	2b14      	cmp	r3, #20
 8006a0a:	dd0f      	ble.n	8006a2c <__ieee754_pow+0x9c>
 8006a0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a10:	fa22 f103 	lsr.w	r1, r2, r3
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	f040 8498 	bne.w	800734e <__ieee754_pow+0x9be>
 8006a1e:	f001 0101 	and.w	r1, r1, #1
 8006a22:	f1c1 0302 	rsb	r3, r1, #2
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	b182      	cbz	r2, 8006a4c <__ieee754_pow+0xbc>
 8006a2a:	e05e      	b.n	8006aea <__ieee754_pow+0x15a>
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d15a      	bne.n	8006ae6 <__ieee754_pow+0x156>
 8006a30:	f1c3 0314 	rsb	r3, r3, #20
 8006a34:	fa45 f103 	asr.w	r1, r5, r3
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	f040 8483 	bne.w	8007348 <__ieee754_pow+0x9b8>
 8006a42:	f001 0101 	and.w	r1, r1, #1
 8006a46:	f1c1 0302 	rsb	r3, r1, #2
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <__ieee754_pow+0x224>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	d130      	bne.n	8006ab4 <__ieee754_pow+0x124>
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	f280 8474 	bge.w	8007340 <__ieee754_pow+0x9b0>
 8006a58:	463a      	mov	r2, r7
 8006a5a:	4643      	mov	r3, r8
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	4955      	ldr	r1, [pc, #340]	; (8006bb4 <__ieee754_pow+0x224>)
 8006a60:	f7f9 fe5c 	bl	800071c <__aeabi_ddiv>
 8006a64:	e02f      	b.n	8006ac6 <__ieee754_pow+0x136>
 8006a66:	2300      	movs	r3, #0
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	d13d      	bne.n	8006aea <__ieee754_pow+0x15a>
 8006a6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ba8 <__ieee754_pow+0x218>)
 8006a70:	429d      	cmp	r5, r3
 8006a72:	d1eb      	bne.n	8006a4c <__ieee754_pow+0xbc>
 8006a74:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a78:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a7c:	ea53 030a 	orrs.w	r3, r3, sl
 8006a80:	f000 8454 	beq.w	800732c <__ieee754_pow+0x99c>
 8006a84:	4b4c      	ldr	r3, [pc, #304]	; (8006bb8 <__ieee754_pow+0x228>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	dd0d      	ble.n	8006aa6 <__ieee754_pow+0x116>
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	f280 8454 	bge.w	8007338 <__ieee754_pow+0x9a8>
 8006a90:	f04f 0b00 	mov.w	fp, #0
 8006a94:	f04f 0c00 	mov.w	ip, #0
 8006a98:	4658      	mov	r0, fp
 8006a9a:	4661      	mov	r1, ip
 8006a9c:	b013      	add	sp, #76	; 0x4c
 8006a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e7e0      	b.n	8006a68 <__ieee754_pow+0xd8>
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	daf2      	bge.n	8006a90 <__ieee754_pow+0x100>
 8006aaa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006aae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006ab2:	e7f1      	b.n	8006a98 <__ieee754_pow+0x108>
 8006ab4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006ab8:	d108      	bne.n	8006acc <__ieee754_pow+0x13c>
 8006aba:	463a      	mov	r2, r7
 8006abc:	4643      	mov	r3, r8
 8006abe:	4638      	mov	r0, r7
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	f7f9 fd01 	bl	80004c8 <__aeabi_dmul>
 8006ac6:	4683      	mov	fp, r0
 8006ac8:	468c      	mov	ip, r1
 8006aca:	e7e5      	b.n	8006a98 <__ieee754_pow+0x108>
 8006acc:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <__ieee754_pow+0x22c>)
 8006ace:	429e      	cmp	r6, r3
 8006ad0:	d10b      	bne.n	8006aea <__ieee754_pow+0x15a>
 8006ad2:	f1b9 0f00 	cmp.w	r9, #0
 8006ad6:	db08      	blt.n	8006aea <__ieee754_pow+0x15a>
 8006ad8:	4638      	mov	r0, r7
 8006ada:	4641      	mov	r1, r8
 8006adc:	b013      	add	sp, #76	; 0x4c
 8006ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae2:	f000 bc6b 	b.w	80073bc <__ieee754_sqrt>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	4638      	mov	r0, r7
 8006aec:	4641      	mov	r1, r8
 8006aee:	f000 fd11 	bl	8007514 <fabs>
 8006af2:	4683      	mov	fp, r0
 8006af4:	468c      	mov	ip, r1
 8006af6:	f1ba 0f00 	cmp.w	sl, #0
 8006afa:	d129      	bne.n	8006b50 <__ieee754_pow+0x1c0>
 8006afc:	b124      	cbz	r4, 8006b08 <__ieee754_pow+0x178>
 8006afe:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <__ieee754_pow+0x224>)
 8006b00:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d123      	bne.n	8006b50 <__ieee754_pow+0x1c0>
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	da07      	bge.n	8006b1c <__ieee754_pow+0x18c>
 8006b0c:	465a      	mov	r2, fp
 8006b0e:	4663      	mov	r3, ip
 8006b10:	2000      	movs	r0, #0
 8006b12:	4928      	ldr	r1, [pc, #160]	; (8006bb4 <__ieee754_pow+0x224>)
 8006b14:	f7f9 fe02 	bl	800071c <__aeabi_ddiv>
 8006b18:	4683      	mov	fp, r0
 8006b1a:	468c      	mov	ip, r1
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	daba      	bge.n	8006a98 <__ieee754_pow+0x108>
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b2c:	4323      	orrs	r3, r4
 8006b2e:	d108      	bne.n	8006b42 <__ieee754_pow+0x1b2>
 8006b30:	465a      	mov	r2, fp
 8006b32:	4663      	mov	r3, ip
 8006b34:	4658      	mov	r0, fp
 8006b36:	4661      	mov	r1, ip
 8006b38:	f7f9 fb0e 	bl	8000158 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e78e      	b.n	8006a60 <__ieee754_pow+0xd0>
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d1a7      	bne.n	8006a98 <__ieee754_pow+0x108>
 8006b48:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006b4c:	469c      	mov	ip, r3
 8006b4e:	e7a3      	b.n	8006a98 <__ieee754_pow+0x108>
 8006b50:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8006b54:	3b01      	subs	r3, #1
 8006b56:	930c      	str	r3, [sp, #48]	; 0x30
 8006b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	d104      	bne.n	8006b6a <__ieee754_pow+0x1da>
 8006b60:	463a      	mov	r2, r7
 8006b62:	4643      	mov	r3, r8
 8006b64:	4638      	mov	r0, r7
 8006b66:	4641      	mov	r1, r8
 8006b68:	e7e6      	b.n	8006b38 <__ieee754_pow+0x1a8>
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <__ieee754_pow+0x230>)
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	f340 80f9 	ble.w	8006d64 <__ieee754_pow+0x3d4>
 8006b72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b76:	429d      	cmp	r5, r3
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <__ieee754_pow+0x228>)
 8006b7a:	dd09      	ble.n	8006b90 <__ieee754_pow+0x200>
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	dc0c      	bgt.n	8006b9a <__ieee754_pow+0x20a>
 8006b80:	2e00      	cmp	r6, #0
 8006b82:	da85      	bge.n	8006a90 <__ieee754_pow+0x100>
 8006b84:	a306      	add	r3, pc, #24	; (adr r3, 8006ba0 <__ieee754_pow+0x210>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	e798      	b.n	8006ac2 <__ieee754_pow+0x132>
 8006b90:	429c      	cmp	r4, r3
 8006b92:	dbf5      	blt.n	8006b80 <__ieee754_pow+0x1f0>
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <__ieee754_pow+0x224>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	dd14      	ble.n	8006bc4 <__ieee754_pow+0x234>
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	dcf2      	bgt.n	8006b84 <__ieee754_pow+0x1f4>
 8006b9e:	e777      	b.n	8006a90 <__ieee754_pow+0x100>
 8006ba0:	8800759c 	.word	0x8800759c
 8006ba4:	7e37e43c 	.word	0x7e37e43c
 8006ba8:	7ff00000 	.word	0x7ff00000
 8006bac:	080077c3 	.word	0x080077c3
 8006bb0:	433fffff 	.word	0x433fffff
 8006bb4:	3ff00000 	.word	0x3ff00000
 8006bb8:	3fefffff 	.word	0x3fefffff
 8006bbc:	3fe00000 	.word	0x3fe00000
 8006bc0:	41e00000 	.word	0x41e00000
 8006bc4:	4661      	mov	r1, ip
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4658      	mov	r0, fp
 8006bca:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <__ieee754_pow+0x3c0>)
 8006bcc:	f7f9 fac4 	bl	8000158 <__aeabi_dsub>
 8006bd0:	a355      	add	r3, pc, #340	; (adr r3, 8006d28 <__ieee754_pow+0x398>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	f7f9 fc75 	bl	80004c8 <__aeabi_dmul>
 8006bde:	a354      	add	r3, pc, #336	; (adr r3, 8006d30 <__ieee754_pow+0x3a0>)
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7f9 fc6c 	bl	80004c8 <__aeabi_dmul>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4682      	mov	sl, r0
 8006bf4:	468b      	mov	fp, r1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4b56      	ldr	r3, [pc, #344]	; (8006d54 <__ieee754_pow+0x3c4>)
 8006bfc:	f7f9 fc64 	bl	80004c8 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	a14c      	add	r1, pc, #304	; (adr r1, 8006d38 <__ieee754_pow+0x3a8>)
 8006c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0a:	f7f9 faa5 	bl	8000158 <__aeabi_dsub>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	f7f9 fc59 	bl	80004c8 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	494e      	ldr	r1, [pc, #312]	; (8006d58 <__ieee754_pow+0x3c8>)
 8006c1e:	f7f9 fa9b 	bl	8000158 <__aeabi_dsub>
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	4680      	mov	r8, r0
 8006c28:	4689      	mov	r9, r1
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fc4b 	bl	80004c8 <__aeabi_dmul>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 fc45 	bl	80004c8 <__aeabi_dmul>
 8006c3e:	a340      	add	r3, pc, #256	; (adr r3, 8006d40 <__ieee754_pow+0x3b0>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fc40 	bl	80004c8 <__aeabi_dmul>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	f7f9 fa82 	bl	8000158 <__aeabi_dsub>
 8006c54:	f04f 0a00 	mov.w	sl, #0
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 fa7a 	bl	800015c <__adddf3>
 8006c68:	4632      	mov	r2, r6
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	468b      	mov	fp, r1
 8006c70:	f7f9 fa72 	bl	8000158 <__aeabi_dsub>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f7f9 fa6c 	bl	8000158 <__aeabi_dsub>
 8006c80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c84:	9b00      	ldr	r3, [sp, #0]
 8006c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f04f 0600 	mov.w	r6, #0
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	bf0c      	ite	eq
 8006c96:	4b31      	ldreq	r3, [pc, #196]	; (8006d5c <__ieee754_pow+0x3cc>)
 8006c98:	4b2d      	ldrne	r3, [pc, #180]	; (8006d50 <__ieee754_pow+0x3c0>)
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	463b      	mov	r3, r7
 8006caa:	f7f9 fa55 	bl	8000158 <__aeabi_dsub>
 8006cae:	4652      	mov	r2, sl
 8006cb0:	465b      	mov	r3, fp
 8006cb2:	f7f9 fc09 	bl	80004c8 <__aeabi_dmul>
 8006cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 fc01 	bl	80004c8 <__aeabi_dmul>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	f7f9 fa45 	bl	800015c <__adddf3>
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	4689      	mov	r9, r1
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4659      	mov	r1, fp
 8006cde:	f7f9 fbf3 	bl	80004c8 <__aeabi_dmul>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006cf2:	f7f9 fa33 	bl	800015c <__adddf3>
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <__ieee754_pow+0x3d0>)
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	4299      	cmp	r1, r3
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	460e      	mov	r6, r1
 8006d00:	f340 82ed 	ble.w	80072de <__ieee754_pow+0x94e>
 8006d04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d0c:	4303      	orrs	r3, r0
 8006d0e:	f000 81e7 	beq.w	80070e0 <__ieee754_pow+0x750>
 8006d12:	a30d      	add	r3, pc, #52	; (adr r3, 8006d48 <__ieee754_pow+0x3b8>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d1c:	f7f9 fbd4 	bl	80004c8 <__aeabi_dmul>
 8006d20:	a309      	add	r3, pc, #36	; (adr r3, 8006d48 <__ieee754_pow+0x3b8>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	e6cc      	b.n	8006ac2 <__ieee754_pow+0x132>
 8006d28:	60000000 	.word	0x60000000
 8006d2c:	3ff71547 	.word	0x3ff71547
 8006d30:	f85ddf44 	.word	0xf85ddf44
 8006d34:	3e54ae0b 	.word	0x3e54ae0b
 8006d38:	55555555 	.word	0x55555555
 8006d3c:	3fd55555 	.word	0x3fd55555
 8006d40:	652b82fe 	.word	0x652b82fe
 8006d44:	3ff71547 	.word	0x3ff71547
 8006d48:	8800759c 	.word	0x8800759c
 8006d4c:	7e37e43c 	.word	0x7e37e43c
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	3fd00000 	.word	0x3fd00000
 8006d58:	3fe00000 	.word	0x3fe00000
 8006d5c:	bff00000 	.word	0xbff00000
 8006d60:	408fffff 	.word	0x408fffff
 8006d64:	4bd4      	ldr	r3, [pc, #848]	; (80070b8 <__ieee754_pow+0x728>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	ea09 0303 	and.w	r3, r9, r3
 8006d6c:	b943      	cbnz	r3, 8006d80 <__ieee754_pow+0x3f0>
 8006d6e:	4658      	mov	r0, fp
 8006d70:	4661      	mov	r1, ip
 8006d72:	4bd2      	ldr	r3, [pc, #840]	; (80070bc <__ieee754_pow+0x72c>)
 8006d74:	f7f9 fba8 	bl	80004c8 <__aeabi_dmul>
 8006d78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d7c:	4683      	mov	fp, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	1523      	asrs	r3, r4, #20
 8006d82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d86:	4413      	add	r3, r2
 8006d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d8a:	4bcd      	ldr	r3, [pc, #820]	; (80070c0 <__ieee754_pow+0x730>)
 8006d8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d94:	429c      	cmp	r4, r3
 8006d96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d9a:	dd08      	ble.n	8006dae <__ieee754_pow+0x41e>
 8006d9c:	4bc9      	ldr	r3, [pc, #804]	; (80070c4 <__ieee754_pow+0x734>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	f340 819c 	ble.w	80070dc <__ieee754_pow+0x74c>
 8006da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006daa:	3301      	adds	r3, #1
 8006dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dae:	2600      	movs	r6, #0
 8006db0:	00f3      	lsls	r3, r6, #3
 8006db2:	930d      	str	r3, [sp, #52]	; 0x34
 8006db4:	4bc4      	ldr	r3, [pc, #784]	; (80070c8 <__ieee754_pow+0x738>)
 8006db6:	4658      	mov	r0, fp
 8006db8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006dbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006dc8:	4623      	mov	r3, r4
 8006dca:	f7f9 f9c5 	bl	8000158 <__aeabi_dsub>
 8006dce:	46da      	mov	sl, fp
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006dd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ddc:	f7f9 f9be 	bl	800015c <__adddf3>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	2000      	movs	r0, #0
 8006de6:	49b9      	ldr	r1, [pc, #740]	; (80070cc <__ieee754_pow+0x73c>)
 8006de8:	f7f9 fc98 	bl	800071c <__aeabi_ddiv>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006df4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006df8:	f7f9 fb66 	bl	80004c8 <__aeabi_dmul>
 8006dfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e00:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006e04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	46ab      	mov	fp, r5
 8006e0e:	106d      	asrs	r5, r5, #1
 8006e10:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e1e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	4614      	mov	r4, r2
 8006e28:	461d      	mov	r5, r3
 8006e2a:	f7f9 fb4d 	bl	80004c8 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e36:	f7f9 f98f 	bl	8000158 <__aeabi_dsub>
 8006e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	4620      	mov	r0, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	f7f9 f987 	bl	8000158 <__aeabi_dsub>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4650      	mov	r0, sl
 8006e50:	4659      	mov	r1, fp
 8006e52:	f7f9 f981 	bl	8000158 <__aeabi_dsub>
 8006e56:	4642      	mov	r2, r8
 8006e58:	464b      	mov	r3, r9
 8006e5a:	f7f9 fb35 	bl	80004c8 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 f977 	bl	8000158 <__aeabi_dsub>
 8006e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e6e:	f7f9 fb2b 	bl	80004c8 <__aeabi_dmul>
 8006e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7f9 fb23 	bl	80004c8 <__aeabi_dmul>
 8006e82:	a37b      	add	r3, pc, #492	; (adr r3, 8007070 <__ieee754_pow+0x6e0>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	f7f9 fb1c 	bl	80004c8 <__aeabi_dmul>
 8006e90:	a379      	add	r3, pc, #484	; (adr r3, 8007078 <__ieee754_pow+0x6e8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f961 	bl	800015c <__adddf3>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	f7f9 fb13 	bl	80004c8 <__aeabi_dmul>
 8006ea2:	a377      	add	r3, pc, #476	; (adr r3, 8007080 <__ieee754_pow+0x6f0>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f958 	bl	800015c <__adddf3>
 8006eac:	4622      	mov	r2, r4
 8006eae:	462b      	mov	r3, r5
 8006eb0:	f7f9 fb0a 	bl	80004c8 <__aeabi_dmul>
 8006eb4:	a374      	add	r3, pc, #464	; (adr r3, 8007088 <__ieee754_pow+0x6f8>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 f94f 	bl	800015c <__adddf3>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	f7f9 fb01 	bl	80004c8 <__aeabi_dmul>
 8006ec6:	a372      	add	r3, pc, #456	; (adr r3, 8007090 <__ieee754_pow+0x700>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f946 	bl	800015c <__adddf3>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	f7f9 faf8 	bl	80004c8 <__aeabi_dmul>
 8006ed8:	a36f      	add	r3, pc, #444	; (adr r3, 8007098 <__ieee754_pow+0x708>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f93d 	bl	800015c <__adddf3>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	462b      	mov	r3, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 faeb 	bl	80004c8 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 fae5 	bl	80004c8 <__aeabi_dmul>
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	f7f9 f927 	bl	800015c <__adddf3>
 8006f0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f12:	f7f9 fad9 	bl	80004c8 <__aeabi_dmul>
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f7f9 f91f 	bl	800015c <__adddf3>
 8006f1e:	4642      	mov	r2, r8
 8006f20:	4606      	mov	r6, r0
 8006f22:	460f      	mov	r7, r1
 8006f24:	464b      	mov	r3, r9
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 facd 	bl	80004c8 <__aeabi_dmul>
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <__ieee754_pow+0x740>)
 8006f32:	4682      	mov	sl, r0
 8006f34:	468b      	mov	fp, r1
 8006f36:	f7f9 f911 	bl	800015c <__adddf3>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 f90d 	bl	800015c <__adddf3>
 8006f42:	9c04      	ldr	r4, [sp, #16]
 8006f44:	460d      	mov	r5, r1
 8006f46:	4622      	mov	r2, r4
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fabb 	bl	80004c8 <__aeabi_dmul>
 8006f52:	2200      	movs	r2, #0
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4b5c      	ldr	r3, [pc, #368]	; (80070d0 <__ieee754_pow+0x740>)
 8006f5e:	f7f9 f8fb 	bl	8000158 <__aeabi_dsub>
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	f7f9 f8f7 	bl	8000158 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4630      	mov	r0, r6
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 f8f1 	bl	8000158 <__aeabi_dsub>
 8006f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f7a:	f7f9 faa5 	bl	80004c8 <__aeabi_dmul>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f88:	462b      	mov	r3, r5
 8006f8a:	f7f9 fa9d 	bl	80004c8 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 f8e1 	bl	800015c <__adddf3>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f8d9 	bl	800015c <__adddf3>
 8006faa:	a33d      	add	r3, pc, #244	; (adr r3, 80070a0 <__ieee754_pow+0x710>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	9c04      	ldr	r4, [sp, #16]
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7f9 fa87 	bl	80004c8 <__aeabi_dmul>
 8006fba:	4642      	mov	r2, r8
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f8c7 	bl	8000158 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 f8c1 	bl	8000158 <__aeabi_dsub>
 8006fd6:	a334      	add	r3, pc, #208	; (adr r3, 80070a8 <__ieee754_pow+0x718>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 fa74 	bl	80004c8 <__aeabi_dmul>
 8006fe0:	a333      	add	r3, pc, #204	; (adr r3, 80070b0 <__ieee754_pow+0x720>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fa6b 	bl	80004c8 <__aeabi_dmul>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	f7f9 f8af 	bl	800015c <__adddf3>
 8006ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007000:	4b34      	ldr	r3, [pc, #208]	; (80070d4 <__ieee754_pow+0x744>)
 8007002:	4413      	add	r3, r2
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f7f9 f8a8 	bl	800015c <__adddf3>
 800700c:	4680      	mov	r8, r0
 800700e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007010:	4689      	mov	r9, r1
 8007012:	f7f9 f9ef 	bl	80003f4 <__aeabi_i2d>
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800701c:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <__ieee754_pow+0x748>)
 800701e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007022:	4413      	add	r3, r2
 8007024:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	f7f9 f896 	bl	800015c <__adddf3>
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	f7f9 f892 	bl	800015c <__adddf3>
 8007038:	4622      	mov	r2, r4
 800703a:	462b      	mov	r3, r5
 800703c:	f7f9 f88e 	bl	800015c <__adddf3>
 8007040:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	4650      	mov	r0, sl
 800704a:	468b      	mov	fp, r1
 800704c:	f7f9 f884 	bl	8000158 <__aeabi_dsub>
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	f7f9 f880 	bl	8000158 <__aeabi_dsub>
 8007058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800705c:	f7f9 f87c 	bl	8000158 <__aeabi_dsub>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4640      	mov	r0, r8
 8007066:	4649      	mov	r1, r9
 8007068:	e608      	b.n	8006c7c <__ieee754_pow+0x2ec>
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w
 8007070:	4a454eef 	.word	0x4a454eef
 8007074:	3fca7e28 	.word	0x3fca7e28
 8007078:	93c9db65 	.word	0x93c9db65
 800707c:	3fcd864a 	.word	0x3fcd864a
 8007080:	a91d4101 	.word	0xa91d4101
 8007084:	3fd17460 	.word	0x3fd17460
 8007088:	518f264d 	.word	0x518f264d
 800708c:	3fd55555 	.word	0x3fd55555
 8007090:	db6fabff 	.word	0xdb6fabff
 8007094:	3fdb6db6 	.word	0x3fdb6db6
 8007098:	33333303 	.word	0x33333303
 800709c:	3fe33333 	.word	0x3fe33333
 80070a0:	e0000000 	.word	0xe0000000
 80070a4:	3feec709 	.word	0x3feec709
 80070a8:	dc3a03fd 	.word	0xdc3a03fd
 80070ac:	3feec709 	.word	0x3feec709
 80070b0:	145b01f5 	.word	0x145b01f5
 80070b4:	be3e2fe0 	.word	0xbe3e2fe0
 80070b8:	7ff00000 	.word	0x7ff00000
 80070bc:	43400000 	.word	0x43400000
 80070c0:	0003988e 	.word	0x0003988e
 80070c4:	000bb679 	.word	0x000bb679
 80070c8:	080077f8 	.word	0x080077f8
 80070cc:	3ff00000 	.word	0x3ff00000
 80070d0:	40080000 	.word	0x40080000
 80070d4:	08007818 	.word	0x08007818
 80070d8:	08007808 	.word	0x08007808
 80070dc:	2601      	movs	r6, #1
 80070de:	e667      	b.n	8006db0 <__ieee754_pow+0x420>
 80070e0:	a39d      	add	r3, pc, #628	; (adr r3, 8007358 <__ieee754_pow+0x9c8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 f837 	bl	800015c <__adddf3>
 80070ee:	4622      	mov	r2, r4
 80070f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f4:	462b      	mov	r3, r5
 80070f6:	4650      	mov	r0, sl
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 f82d 	bl	8000158 <__aeabi_dsub>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007106:	f7f9 fc6f 	bl	80009e8 <__aeabi_dcmpgt>
 800710a:	2800      	cmp	r0, #0
 800710c:	f47f ae01 	bne.w	8006d12 <__ieee754_pow+0x382>
 8007110:	4aa5      	ldr	r2, [pc, #660]	; (80073a8 <__ieee754_pow+0xa18>)
 8007112:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007116:	4293      	cmp	r3, r2
 8007118:	f340 8103 	ble.w	8007322 <__ieee754_pow+0x992>
 800711c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007120:	2000      	movs	r0, #0
 8007122:	151b      	asrs	r3, r3, #20
 8007124:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007128:	fa4a f303 	asr.w	r3, sl, r3
 800712c:	4433      	add	r3, r6
 800712e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007132:	4f9e      	ldr	r7, [pc, #632]	; (80073ac <__ieee754_pow+0xa1c>)
 8007134:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007138:	4117      	asrs	r7, r2
 800713a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800713e:	ea23 0107 	bic.w	r1, r3, r7
 8007142:	f1c2 0214 	rsb	r2, r2, #20
 8007146:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800714a:	460b      	mov	r3, r1
 800714c:	fa4a fa02 	asr.w	sl, sl, r2
 8007150:	2e00      	cmp	r6, #0
 8007152:	4602      	mov	r2, r0
 8007154:	4629      	mov	r1, r5
 8007156:	4620      	mov	r0, r4
 8007158:	bfb8      	it	lt
 800715a:	f1ca 0a00 	rsblt	sl, sl, #0
 800715e:	f7f8 fffb 	bl	8000158 <__aeabi_dsub>
 8007162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716a:	2400      	movs	r4, #0
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	f7f8 fff4 	bl	800015c <__adddf3>
 8007174:	a37a      	add	r3, pc, #488	; (adr r3, 8007360 <__ieee754_pow+0x9d0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	4620      	mov	r0, r4
 800717c:	460d      	mov	r5, r1
 800717e:	f7f9 f9a3 	bl	80004c8 <__aeabi_dmul>
 8007182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f8 ffe3 	bl	8000158 <__aeabi_dsub>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f8 ffdd 	bl	8000158 <__aeabi_dsub>
 800719e:	a372      	add	r3, pc, #456	; (adr r3, 8007368 <__ieee754_pow+0x9d8>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 f990 	bl	80004c8 <__aeabi_dmul>
 80071a8:	a371      	add	r3, pc, #452	; (adr r3, 8007370 <__ieee754_pow+0x9e0>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	4680      	mov	r8, r0
 80071b0:	4689      	mov	r9, r1
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f987 	bl	80004c8 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f8 ffcb 	bl	800015c <__adddf3>
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f8 ffc3 	bl	800015c <__adddf3>
 80071d6:	4632      	mov	r2, r6
 80071d8:	463b      	mov	r3, r7
 80071da:	4680      	mov	r8, r0
 80071dc:	4689      	mov	r9, r1
 80071de:	f7f8 ffbb 	bl	8000158 <__aeabi_dsub>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f8 ffb5 	bl	8000158 <__aeabi_dsub>
 80071ee:	4642      	mov	r2, r8
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	464b      	mov	r3, r9
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 f965 	bl	80004c8 <__aeabi_dmul>
 80071fe:	a35e      	add	r3, pc, #376	; (adr r3, 8007378 <__ieee754_pow+0x9e8>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	4604      	mov	r4, r0
 8007206:	460d      	mov	r5, r1
 8007208:	f7f9 f95e 	bl	80004c8 <__aeabi_dmul>
 800720c:	a35c      	add	r3, pc, #368	; (adr r3, 8007380 <__ieee754_pow+0x9f0>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f8 ffa1 	bl	8000158 <__aeabi_dsub>
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	f7f9 f955 	bl	80004c8 <__aeabi_dmul>
 800721e:	a35a      	add	r3, pc, #360	; (adr r3, 8007388 <__ieee754_pow+0x9f8>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f8 ff9a 	bl	800015c <__adddf3>
 8007228:	4622      	mov	r2, r4
 800722a:	462b      	mov	r3, r5
 800722c:	f7f9 f94c 	bl	80004c8 <__aeabi_dmul>
 8007230:	a357      	add	r3, pc, #348	; (adr r3, 8007390 <__ieee754_pow+0xa00>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f8 ff8f 	bl	8000158 <__aeabi_dsub>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	f7f9 f943 	bl	80004c8 <__aeabi_dmul>
 8007242:	a355      	add	r3, pc, #340	; (adr r3, 8007398 <__ieee754_pow+0xa08>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f8 ff88 	bl	800015c <__adddf3>
 800724c:	4622      	mov	r2, r4
 800724e:	462b      	mov	r3, r5
 8007250:	f7f9 f93a 	bl	80004c8 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	f7f8 ff7c 	bl	8000158 <__aeabi_dsub>
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 f92c 	bl	80004c8 <__aeabi_dmul>
 8007270:	2200      	movs	r2, #0
 8007272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f8 ff6b 	bl	8000158 <__aeabi_dsub>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728a:	f7f9 fa47 	bl	800071c <__aeabi_ddiv>
 800728e:	4632      	mov	r2, r6
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	463b      	mov	r3, r7
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 f915 	bl	80004c8 <__aeabi_dmul>
 800729e:	4632      	mov	r2, r6
 80072a0:	463b      	mov	r3, r7
 80072a2:	f7f8 ff5b 	bl	800015c <__adddf3>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4620      	mov	r0, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7f8 ff53 	bl	8000158 <__aeabi_dsub>
 80072b2:	4642      	mov	r2, r8
 80072b4:	464b      	mov	r3, r9
 80072b6:	f7f8 ff4f 	bl	8000158 <__aeabi_dsub>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	2000      	movs	r0, #0
 80072c0:	493b      	ldr	r1, [pc, #236]	; (80073b0 <__ieee754_pow+0xa20>)
 80072c2:	f7f8 ff49 	bl	8000158 <__aeabi_dsub>
 80072c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80072ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80072ce:	da2b      	bge.n	8007328 <__ieee754_pow+0x998>
 80072d0:	4652      	mov	r2, sl
 80072d2:	f000 f9b9 	bl	8007648 <scalbn>
 80072d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072da:	f7ff bbf2 	b.w	8006ac2 <__ieee754_pow+0x132>
 80072de:	4b35      	ldr	r3, [pc, #212]	; (80073b4 <__ieee754_pow+0xa24>)
 80072e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80072e4:	429f      	cmp	r7, r3
 80072e6:	f77f af13 	ble.w	8007110 <__ieee754_pow+0x780>
 80072ea:	4b33      	ldr	r3, [pc, #204]	; (80073b8 <__ieee754_pow+0xa28>)
 80072ec:	440b      	add	r3, r1
 80072ee:	4303      	orrs	r3, r0
 80072f0:	d00b      	beq.n	800730a <__ieee754_pow+0x97a>
 80072f2:	a32b      	add	r3, pc, #172	; (adr r3, 80073a0 <__ieee754_pow+0xa10>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072fc:	f7f9 f8e4 	bl	80004c8 <__aeabi_dmul>
 8007300:	a327      	add	r3, pc, #156	; (adr r3, 80073a0 <__ieee754_pow+0xa10>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7ff bbdc 	b.w	8006ac2 <__ieee754_pow+0x132>
 800730a:	4622      	mov	r2, r4
 800730c:	462b      	mov	r3, r5
 800730e:	f7f8 ff23 	bl	8000158 <__aeabi_dsub>
 8007312:	4642      	mov	r2, r8
 8007314:	464b      	mov	r3, r9
 8007316:	f7f9 fb5d 	bl	80009d4 <__aeabi_dcmpge>
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f aef8 	beq.w	8007110 <__ieee754_pow+0x780>
 8007320:	e7e7      	b.n	80072f2 <__ieee754_pow+0x962>
 8007322:	f04f 0a00 	mov.w	sl, #0
 8007326:	e71e      	b.n	8007166 <__ieee754_pow+0x7d6>
 8007328:	4621      	mov	r1, r4
 800732a:	e7d4      	b.n	80072d6 <__ieee754_pow+0x946>
 800732c:	f04f 0b00 	mov.w	fp, #0
 8007330:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80073b0 <__ieee754_pow+0xa20>
 8007334:	f7ff bbb0 	b.w	8006a98 <__ieee754_pow+0x108>
 8007338:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800733c:	f7ff bbac 	b.w	8006a98 <__ieee754_pow+0x108>
 8007340:	4638      	mov	r0, r7
 8007342:	4641      	mov	r1, r8
 8007344:	f7ff bbbf 	b.w	8006ac6 <__ieee754_pow+0x136>
 8007348:	9200      	str	r2, [sp, #0]
 800734a:	f7ff bb7f 	b.w	8006a4c <__ieee754_pow+0xbc>
 800734e:	2300      	movs	r3, #0
 8007350:	f7ff bb69 	b.w	8006a26 <__ieee754_pow+0x96>
 8007354:	f3af 8000 	nop.w
 8007358:	652b82fe 	.word	0x652b82fe
 800735c:	3c971547 	.word	0x3c971547
 8007360:	00000000 	.word	0x00000000
 8007364:	3fe62e43 	.word	0x3fe62e43
 8007368:	fefa39ef 	.word	0xfefa39ef
 800736c:	3fe62e42 	.word	0x3fe62e42
 8007370:	0ca86c39 	.word	0x0ca86c39
 8007374:	be205c61 	.word	0xbe205c61
 8007378:	72bea4d0 	.word	0x72bea4d0
 800737c:	3e663769 	.word	0x3e663769
 8007380:	c5d26bf1 	.word	0xc5d26bf1
 8007384:	3ebbbd41 	.word	0x3ebbbd41
 8007388:	af25de2c 	.word	0xaf25de2c
 800738c:	3f11566a 	.word	0x3f11566a
 8007390:	16bebd93 	.word	0x16bebd93
 8007394:	3f66c16c 	.word	0x3f66c16c
 8007398:	5555553e 	.word	0x5555553e
 800739c:	3fc55555 	.word	0x3fc55555
 80073a0:	c2f8f359 	.word	0xc2f8f359
 80073a4:	01a56e1f 	.word	0x01a56e1f
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	000fffff 	.word	0x000fffff
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	4090cbff 	.word	0x4090cbff
 80073b8:	3f6f3400 	.word	0x3f6f3400

080073bc <__ieee754_sqrt>:
 80073bc:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007510 <__ieee754_sqrt+0x154>
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80073c8:	460b      	mov	r3, r1
 80073ca:	4606      	mov	r6, r0
 80073cc:	460d      	mov	r5, r1
 80073ce:	460a      	mov	r2, r1
 80073d0:	4607      	mov	r7, r0
 80073d2:	4604      	mov	r4, r0
 80073d4:	d10e      	bne.n	80073f4 <__ieee754_sqrt+0x38>
 80073d6:	4602      	mov	r2, r0
 80073d8:	f7f9 f876 	bl	80004c8 <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4630      	mov	r0, r6
 80073e2:	4629      	mov	r1, r5
 80073e4:	f7f8 feba 	bl	800015c <__adddf3>
 80073e8:	4606      	mov	r6, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	4630      	mov	r0, r6
 80073ee:	4629      	mov	r1, r5
 80073f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f4:	2900      	cmp	r1, #0
 80073f6:	dc0d      	bgt.n	8007414 <__ieee754_sqrt+0x58>
 80073f8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80073fc:	ea5c 0707 	orrs.w	r7, ip, r7
 8007400:	d0f4      	beq.n	80073ec <__ieee754_sqrt+0x30>
 8007402:	b139      	cbz	r1, 8007414 <__ieee754_sqrt+0x58>
 8007404:	4602      	mov	r2, r0
 8007406:	f7f8 fea7 	bl	8000158 <__aeabi_dsub>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	f7f9 f985 	bl	800071c <__aeabi_ddiv>
 8007412:	e7e9      	b.n	80073e8 <__ieee754_sqrt+0x2c>
 8007414:	1512      	asrs	r2, r2, #20
 8007416:	d074      	beq.n	8007502 <__ieee754_sqrt+0x146>
 8007418:	2000      	movs	r0, #0
 800741a:	07d5      	lsls	r5, r2, #31
 800741c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007420:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8007424:	bf5e      	ittt	pl
 8007426:	0fe3      	lsrpl	r3, r4, #31
 8007428:	0064      	lslpl	r4, r4, #1
 800742a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800742e:	0fe3      	lsrs	r3, r4, #31
 8007430:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007434:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007438:	2516      	movs	r5, #22
 800743a:	4601      	mov	r1, r0
 800743c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007440:	1076      	asrs	r6, r6, #1
 8007442:	0064      	lsls	r4, r4, #1
 8007444:	188f      	adds	r7, r1, r2
 8007446:	429f      	cmp	r7, r3
 8007448:	bfde      	ittt	le
 800744a:	1bdb      	suble	r3, r3, r7
 800744c:	18b9      	addle	r1, r7, r2
 800744e:	1880      	addle	r0, r0, r2
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	3d01      	subs	r5, #1
 8007454:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007458:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800745c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007460:	d1f0      	bne.n	8007444 <__ieee754_sqrt+0x88>
 8007462:	462a      	mov	r2, r5
 8007464:	f04f 0e20 	mov.w	lr, #32
 8007468:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800746c:	428b      	cmp	r3, r1
 800746e:	eb07 0c05 	add.w	ip, r7, r5
 8007472:	dc02      	bgt.n	800747a <__ieee754_sqrt+0xbe>
 8007474:	d113      	bne.n	800749e <__ieee754_sqrt+0xe2>
 8007476:	45a4      	cmp	ip, r4
 8007478:	d811      	bhi.n	800749e <__ieee754_sqrt+0xe2>
 800747a:	f1bc 0f00 	cmp.w	ip, #0
 800747e:	eb0c 0507 	add.w	r5, ip, r7
 8007482:	da43      	bge.n	800750c <__ieee754_sqrt+0x150>
 8007484:	2d00      	cmp	r5, #0
 8007486:	db41      	blt.n	800750c <__ieee754_sqrt+0x150>
 8007488:	f101 0801 	add.w	r8, r1, #1
 800748c:	1a5b      	subs	r3, r3, r1
 800748e:	4641      	mov	r1, r8
 8007490:	45a4      	cmp	ip, r4
 8007492:	bf88      	it	hi
 8007494:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007498:	eba4 040c 	sub.w	r4, r4, ip
 800749c:	443a      	add	r2, r7
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	f1be 0e01 	subs.w	lr, lr, #1
 80074a4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80074a8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80074ac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80074b0:	d1dc      	bne.n	800746c <__ieee754_sqrt+0xb0>
 80074b2:	4323      	orrs	r3, r4
 80074b4:	d006      	beq.n	80074c4 <__ieee754_sqrt+0x108>
 80074b6:	1c54      	adds	r4, r2, #1
 80074b8:	bf0b      	itete	eq
 80074ba:	4672      	moveq	r2, lr
 80074bc:	3201      	addne	r2, #1
 80074be:	3001      	addeq	r0, #1
 80074c0:	f022 0201 	bicne.w	r2, r2, #1
 80074c4:	1043      	asrs	r3, r0, #1
 80074c6:	07c1      	lsls	r1, r0, #31
 80074c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80074cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074d4:	bf48      	it	mi
 80074d6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80074da:	4610      	mov	r0, r2
 80074dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80074e0:	e782      	b.n	80073e8 <__ieee754_sqrt+0x2c>
 80074e2:	0ae3      	lsrs	r3, r4, #11
 80074e4:	3915      	subs	r1, #21
 80074e6:	0564      	lsls	r4, r4, #21
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0fa      	beq.n	80074e2 <__ieee754_sqrt+0x126>
 80074ec:	02de      	lsls	r6, r3, #11
 80074ee:	d50a      	bpl.n	8007506 <__ieee754_sqrt+0x14a>
 80074f0:	f1c2 0020 	rsb	r0, r2, #32
 80074f4:	fa24 f000 	lsr.w	r0, r4, r0
 80074f8:	1e55      	subs	r5, r2, #1
 80074fa:	4094      	lsls	r4, r2
 80074fc:	4303      	orrs	r3, r0
 80074fe:	1b4a      	subs	r2, r1, r5
 8007500:	e78a      	b.n	8007418 <__ieee754_sqrt+0x5c>
 8007502:	4611      	mov	r1, r2
 8007504:	e7f0      	b.n	80074e8 <__ieee754_sqrt+0x12c>
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	3201      	adds	r2, #1
 800750a:	e7ef      	b.n	80074ec <__ieee754_sqrt+0x130>
 800750c:	4688      	mov	r8, r1
 800750e:	e7bd      	b.n	800748c <__ieee754_sqrt+0xd0>
 8007510:	7ff00000 	.word	0x7ff00000

08007514 <fabs>:
 8007514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007518:	4770      	bx	lr

0800751a <finite>:
 800751a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800751e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007522:	0fc0      	lsrs	r0, r0, #31
 8007524:	4770      	bx	lr
	...

08007528 <nan>:
 8007528:	2000      	movs	r0, #0
 800752a:	4901      	ldr	r1, [pc, #4]	; (8007530 <nan+0x8>)
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	7ff80000 	.word	0x7ff80000

08007534 <rint>:
 8007534:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8007538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800753a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800753e:	2f13      	cmp	r7, #19
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	460c      	mov	r4, r1
 8007546:	4605      	mov	r5, r0
 8007548:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800754c:	dc59      	bgt.n	8007602 <rint+0xce>
 800754e:	2f00      	cmp	r7, #0
 8007550:	da2a      	bge.n	80075a8 <rint+0x74>
 8007552:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007556:	4301      	orrs	r1, r0
 8007558:	d022      	beq.n	80075a0 <rint+0x6c>
 800755a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800755e:	4301      	orrs	r1, r0
 8007560:	424d      	negs	r5, r1
 8007562:	430d      	orrs	r5, r1
 8007564:	4936      	ldr	r1, [pc, #216]	; (8007640 <rint+0x10c>)
 8007566:	0c5c      	lsrs	r4, r3, #17
 8007568:	0b2d      	lsrs	r5, r5, #12
 800756a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800756e:	0464      	lsls	r4, r4, #17
 8007570:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007574:	ea45 0304 	orr.w	r3, r5, r4
 8007578:	e9d1 4500 	ldrd	r4, r5, [r1]
 800757c:	4620      	mov	r0, r4
 800757e:	4629      	mov	r1, r5
 8007580:	f7f8 fdec 	bl	800015c <__adddf3>
 8007584:	e9cd 0100 	strd	r0, r1, [sp]
 8007588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758c:	462b      	mov	r3, r5
 800758e:	4622      	mov	r2, r4
 8007590:	f7f8 fde2 	bl	8000158 <__aeabi_dsub>
 8007594:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007598:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4610      	mov	r0, r2
 80075a2:	4619      	mov	r1, r3
 80075a4:	b003      	add	sp, #12
 80075a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a8:	4926      	ldr	r1, [pc, #152]	; (8007644 <rint+0x110>)
 80075aa:	4139      	asrs	r1, r7
 80075ac:	ea03 0001 	and.w	r0, r3, r1
 80075b0:	4310      	orrs	r0, r2
 80075b2:	d0f5      	beq.n	80075a0 <rint+0x6c>
 80075b4:	084b      	lsrs	r3, r1, #1
 80075b6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80075ba:	ea52 0501 	orrs.w	r5, r2, r1
 80075be:	d00c      	beq.n	80075da <rint+0xa6>
 80075c0:	ea24 0303 	bic.w	r3, r4, r3
 80075c4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80075c8:	2f13      	cmp	r7, #19
 80075ca:	bf0c      	ite	eq
 80075cc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80075d0:	2500      	movne	r5, #0
 80075d2:	fa44 f707 	asr.w	r7, r4, r7
 80075d6:	ea43 0407 	orr.w	r4, r3, r7
 80075da:	4919      	ldr	r1, [pc, #100]	; (8007640 <rint+0x10c>)
 80075dc:	4623      	mov	r3, r4
 80075de:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80075e2:	462a      	mov	r2, r5
 80075e4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80075e8:	4620      	mov	r0, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	f7f8 fdb6 	bl	800015c <__adddf3>
 80075f0:	e9cd 0100 	strd	r0, r1, [sp]
 80075f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075f8:	4622      	mov	r2, r4
 80075fa:	462b      	mov	r3, r5
 80075fc:	f7f8 fdac 	bl	8000158 <__aeabi_dsub>
 8007600:	e7cc      	b.n	800759c <rint+0x68>
 8007602:	2f33      	cmp	r7, #51	; 0x33
 8007604:	dd05      	ble.n	8007612 <rint+0xde>
 8007606:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800760a:	d1c9      	bne.n	80075a0 <rint+0x6c>
 800760c:	f7f8 fda6 	bl	800015c <__adddf3>
 8007610:	e7c4      	b.n	800759c <rint+0x68>
 8007612:	f04f 31ff 	mov.w	r1, #4294967295
 8007616:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800761a:	fa21 f10c 	lsr.w	r1, r1, ip
 800761e:	4208      	tst	r0, r1
 8007620:	d0be      	beq.n	80075a0 <rint+0x6c>
 8007622:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8007626:	bf18      	it	ne
 8007628:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800762c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8007630:	bf1e      	ittt	ne
 8007632:	ea20 0303 	bicne.w	r3, r0, r3
 8007636:	fa45 fc0c 	asrne.w	ip, r5, ip
 800763a:	ea43 050c 	orrne.w	r5, r3, ip
 800763e:	e7cc      	b.n	80075da <rint+0xa6>
 8007640:	08007828 	.word	0x08007828
 8007644:	000fffff 	.word	0x000fffff

08007648 <scalbn>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	4617      	mov	r7, r2
 8007654:	460b      	mov	r3, r1
 8007656:	b996      	cbnz	r6, 800767e <scalbn+0x36>
 8007658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800765c:	4303      	orrs	r3, r0
 800765e:	d039      	beq.n	80076d4 <scalbn+0x8c>
 8007660:	4b35      	ldr	r3, [pc, #212]	; (8007738 <scalbn+0xf0>)
 8007662:	2200      	movs	r2, #0
 8007664:	f7f8 ff30 	bl	80004c8 <__aeabi_dmul>
 8007668:	4b34      	ldr	r3, [pc, #208]	; (800773c <scalbn+0xf4>)
 800766a:	4604      	mov	r4, r0
 800766c:	429f      	cmp	r7, r3
 800766e:	460d      	mov	r5, r1
 8007670:	da0f      	bge.n	8007692 <scalbn+0x4a>
 8007672:	a32d      	add	r3, pc, #180	; (adr r3, 8007728 <scalbn+0xe0>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f7f8 ff26 	bl	80004c8 <__aeabi_dmul>
 800767c:	e006      	b.n	800768c <scalbn+0x44>
 800767e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007682:	4296      	cmp	r6, r2
 8007684:	d10a      	bne.n	800769c <scalbn+0x54>
 8007686:	4602      	mov	r2, r0
 8007688:	f7f8 fd68 	bl	800015c <__adddf3>
 800768c:	4604      	mov	r4, r0
 800768e:	460d      	mov	r5, r1
 8007690:	e020      	b.n	80076d4 <scalbn+0x8c>
 8007692:	460b      	mov	r3, r1
 8007694:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007698:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800769c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80076a0:	19b9      	adds	r1, r7, r6
 80076a2:	4291      	cmp	r1, r2
 80076a4:	dd0e      	ble.n	80076c4 <scalbn+0x7c>
 80076a6:	a322      	add	r3, pc, #136	; (adr r3, 8007730 <scalbn+0xe8>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80076b0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80076b4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80076b8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80076bc:	4820      	ldr	r0, [pc, #128]	; (8007740 <scalbn+0xf8>)
 80076be:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80076c2:	e7d9      	b.n	8007678 <scalbn+0x30>
 80076c4:	2900      	cmp	r1, #0
 80076c6:	dd08      	ble.n	80076da <scalbn+0x92>
 80076c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80076de:	da16      	bge.n	800770e <scalbn+0xc6>
 80076e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076e4:	429f      	cmp	r7, r3
 80076e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80076ea:	dd08      	ble.n	80076fe <scalbn+0xb6>
 80076ec:	4c15      	ldr	r4, [pc, #84]	; (8007744 <scalbn+0xfc>)
 80076ee:	4814      	ldr	r0, [pc, #80]	; (8007740 <scalbn+0xf8>)
 80076f0:	f363 74df 	bfi	r4, r3, #31, #1
 80076f4:	a30e      	add	r3, pc, #56	; (adr r3, 8007730 <scalbn+0xe8>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4621      	mov	r1, r4
 80076fc:	e7bc      	b.n	8007678 <scalbn+0x30>
 80076fe:	4c12      	ldr	r4, [pc, #72]	; (8007748 <scalbn+0x100>)
 8007700:	4812      	ldr	r0, [pc, #72]	; (800774c <scalbn+0x104>)
 8007702:	f363 74df 	bfi	r4, r3, #31, #1
 8007706:	a308      	add	r3, pc, #32	; (adr r3, 8007728 <scalbn+0xe0>)
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	e7f5      	b.n	80076fa <scalbn+0xb2>
 800770e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007712:	3136      	adds	r1, #54	; 0x36
 8007714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007718:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	2200      	movs	r2, #0
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <scalbn+0x108>)
 8007724:	e7a8      	b.n	8007678 <scalbn+0x30>
 8007726:	bf00      	nop
 8007728:	c2f8f359 	.word	0xc2f8f359
 800772c:	01a56e1f 	.word	0x01a56e1f
 8007730:	8800759c 	.word	0x8800759c
 8007734:	7e37e43c 	.word	0x7e37e43c
 8007738:	43500000 	.word	0x43500000
 800773c:	ffff3cb0 	.word	0xffff3cb0
 8007740:	8800759c 	.word	0x8800759c
 8007744:	7e37e43c 	.word	0x7e37e43c
 8007748:	01a56e1f 	.word	0x01a56e1f
 800774c:	c2f8f359 	.word	0xc2f8f359
 8007750:	3c900000 	.word	0x3c900000

08007754 <_init>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr

08007760 <_fini>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr
